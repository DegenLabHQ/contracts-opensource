{
  "address": "0x84D45143A0671560c501A667D64893B3e03EE05A",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DropNative",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DropReborn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "_dropOn",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "_lockRequestDropReborn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "_lockRequestDropNative",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "_rebornDropInterval",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "_nativeDropInterval",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "_rebornDropLastUpdate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "_nativeDropLastUpdate",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "_nativeTopDropRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "_nativeRaffleDropRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint40",
              "name": "_rebornTopEthAmount",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "_rebornRaffleEthAmount",
              "type": "uint40"
            },
            {
              "internalType": "uint8",
              "name": "_placeholder",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct PortalLib.AirdropConf",
          "name": "conf",
          "type": "tuple"
        }
      ],
      "name": "NewDropConf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "keyHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "s_subscriptionId",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numWords",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "requestConfirmations",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct PortalLib.VrfConf",
          "name": "conf",
          "type": "tuple"
        }
      ],
      "name": "NewVrfConf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "Refer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ref1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ref2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum PortalLib.RewardType",
          "name": "rewardType",
          "type": "uint8"
        }
      ],
      "name": "ReferReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "SignerUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERSHARE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_SOUPPARAMS_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "currentAP",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxAP",
              "type": "uint8"
            },
            {
              "internalType": "uint24",
              "name": "restoreTimePerAP",
              "type": "uint24"
            },
            {
              "internalType": "uint32",
              "name": "lastTimeAPUpdate",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            }
          ],
          "internalType": "struct PortalLib.CharacterProperty",
          "name": "charProperty",
          "type": "tuple"
        }
      ],
      "name": "_calculateCurrentAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentAP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeef2f7d872673a394c59b2824df416524cd7aa84df283225306da188f7894d01",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe0B4c9C36f5A5D0Ff3A547FeaBB6BC9Ba65805F2",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1045251",
    "logsBloom": "0x
    "blockHash": "0x3539b5ae2dd17979cac96c78476849259dea83ba1a7bb98ad7dba4f0cd1a52df",
    "transactionHash": "0xeef2f7d872673a394c59b2824df416524cd7aa84df283225306da188f7894d01",
    "logs": [],
    "blockNumber": 29185829,
    "cumulativeGasUsed": "1045251",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "0ca574a101a7a25772d9778b930229cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DropNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DropReborn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_dropOn\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_lockRequestDropReborn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_lockRequestDropNative\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"_rebornDropInterval\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_nativeDropInterval\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"_rebornDropLastUpdate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_nativeDropLastUpdate\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_nativeTopDropRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_nativeRaffleDropRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"_rebornTopEthAmount\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_rebornRaffleEthAmount\",\"type\":\"uint40\"},{\"internalType\":\"uint8\",\"name\":\"_placeholder\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct PortalLib.AirdropConf\",\"name\":\"conf\",\"type\":\"tuple\"}],\"name\":\"NewDropConf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"s_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct PortalLib.VrfConf\",\"name\":\"conf\",\"type\":\"tuple\"}],\"name\":\"NewVrfConf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Refer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ref1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ref2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum PortalLib.RewardType\",\"name\":\"rewardType\",\"type\":\"uint8\"}],\"name\":\"ReferReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"SignerUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERSHARE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SOUPPARAMS_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"currentAP\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxAP\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"restoreTimePerAP\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"lastTimeAPUpdate\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"internalType\":\"struct PortalLib.CharacterProperty\",\"name\":\"charProperty\",\"type\":\"tuple\"}],\"name\":\"_calculateCurrentAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentAP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_calculateReferReward(mapping(address => address) storage,PortalLib.ReferrerRewardFees storage,address,uint256,PortalLib.RewardType)\":{\"details\":\"returns referrer and referer reward\",\"returns\":{\"ref1\":\" level1 of referrer. direct referrer\",\"ref1Reward\":\" level 1 referrer reward\",\"ref2\":\" level2 of referrer. referrer's referrer\",\"ref2Reward\":\" level 2 referrer reward\"}},\"_refer(mapping(address => address) storage,address)\":{\"details\":\"record referrer relationship\"},\"_sendNativeRewardToRefs(mapping(address => address) storage,PortalLib.ReferrerRewardFees storage,address,uint256)\":{\"details\":\"send NativeToken to referrers\"},\"_setReferrerRewardFee(PortalLib.ReferrerRewardFees storage,uint16,uint16,PortalLib.RewardType)\":{\"details\":\"set percentage of referrer reward\",\"params\":{\"rewardType\":\"0: incarnate reward 1: engrave reward\"}},\"_updateSigners(mapping(address => bool) storage,address[],address[])\":{\"details\":\"update signers\",\"params\":{\"toAdd\":\"list of to be added signer\",\"toRemove\":\"list of to be removed signer\"}},\"_vaultRewardToRefs(mapping(address => address) storage,PortalLib.ReferrerRewardFees storage,RewardVault,address,uint256)\":{\"details\":\"vault $REBORN token to referrers\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_setReferrerRewardFee(PortalLib.ReferrerRewardFees storage,uint16,uint16,PortalLib.RewardType)\":{\"notice\":\"mul 10000 when set. eg: 8% -> 800 18%-> 1800\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PortalLib.sol\":\"PortalLib\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363832323438353638313537\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/PortalLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\nimport {IRebornDefination} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {RewardVault} from \\\"src/RewardVault.sol\\\";\\nimport {CommonError} from \\\"src/lib/CommonError.sol\\\";\\nimport {ECDSAUpgradeable} from \\\"src/oz/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n\\nlibrary PortalLib {\\n    uint256 public constant PERSHARE_BASE = 10e18;\\n    // percentage base of refer reward fees\\n    uint256 public constant PERCENTAGE_BASE = 10000;\\n\\n    bytes32 public constant _SOUPPARAMS_TYPEHASH =\\n        keccak256(\\n            \\\"AuthenticateSoupArg(address user,uint256 soupPrice,uint256 incarnateCounter,uint256 tokenId,uint256 deadline)\\\"\\n        );\\n\\n    bytes32 public constant _TYPE_HASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    uint256 public constant ONE_HUNDRED = 100;\\n\\n    struct CharacterParams {\\n        uint256 maxAP;\\n        uint256 restoreTimePerAP;\\n        uint256 level;\\n    }\\n\\n    // TODO: use more compact storage\\n    struct CharacterProperty {\\n        uint8 currentAP;\\n        uint8 maxAP;\\n        uint24 restoreTimePerAP; // Time Needed to Restore One Action Point\\n        uint32 lastTimeAPUpdate;\\n        uint8 level;\\n    }\\n\\n    enum RewardType {\\n        NativeToken,\\n        RebornToken\\n    }\\n\\n    struct ReferrerRewardFees {\\n        uint16 incarnateRef1Fee;\\n        uint16 incarnateRef2Fee;\\n        uint16 vaultRef1Fee;\\n        uint16 vaultRef2Fee;\\n        uint192 _slotPlaceholder;\\n    }\\n\\n    struct Pool {\\n        uint256 totalAmount;\\n        uint256 accRebornPerShare;\\n        uint256 accNativePerShare;\\n        uint128 droppedRebornTotal;\\n        uint128 droppedNativeTotal;\\n        uint256 coindayCumulant;\\n        uint32 coindayUpdateLastTime;\\n        uint112 totalForwardTribute;\\n        uint112 totalReverseTribute;\\n        uint32 lastDropNativeTime;\\n        uint32 lastDropRebornTime;\\n        uint192 placeholder;\\n    }\\n\\n    //\\n    // We do some fancy math here. Basically, any point in time, the amount\\n    // entitled to a user but is pending to be distributed is:\\n    //\\n    //   pending reward = (Amount * pool.accPerShare) - user.rewardDebt\\n    //\\n    // Whenever a user infuse or switchPool. Here's what happens:\\n    //   1. The pool's `accPerShare` (and `lastRewardBlock`) gets updated.\\n    //   2. User receives the pending reward sent to his/her address.\\n    //   3. User's `amount` gets updated.\\n    //   4. User's `rewardDebt` gets updated.\\n    struct Portfolio {\\n        uint256 accumulativeAmount;\\n        uint128 rebornRewardDebt;\\n        uint128 nativeRewardDebt;\\n        /// @dev reward for holding the NFT when the NFT is selected\\n        uint128 pendingOwnerRebornReward;\\n        uint128 pendingOwnerNativeReward;\\n        uint256 coindayCumulant;\\n        uint32 coindayUpdateLastTime;\\n        uint112 totalForwardTribute;\\n        uint112 totalReverseTribute;\\n    }\\n\\n    struct AirdropConf {\\n        uint8 _dropOn; //                  ---\\n        bool _lockRequestDropReborn;\\n        bool _lockRequestDropNative;\\n        uint24 _rebornDropInterval; //        |\\n        uint24 _nativeDropInterval; //        |\\n        uint32 _rebornDropLastUpdate; //      |\\n        uint32 _nativeDropLastUpdate; //      |\\n        uint16 _nativeTopDropRatio; //        |\\n        uint16 _nativeRaffleDropRatio; //   |\\n        uint40 _rebornTopEthAmount; // |\\n        uint40 _rebornRaffleEthAmount; //    ---\\n        uint8 _placeholder;\\n    }\\n\\n    struct VrfConf {\\n        bytes32 keyHash;\\n        uint64 s_subscriptionId;\\n        uint32 callbackGasLimit;\\n        uint32 numWords;\\n        uint16 requestConfirmations;\\n    }\\n\\n    event DropNative(uint256 indexed tokenId, uint256 amount);\\n    event DropReborn(uint256 indexed tokenId, uint256 amount);\\n\\n    event NewDropConf(AirdropConf conf);\\n    event NewVrfConf(VrfConf conf);\\n    event SignerUpdate(address signer, bool valid);\\n    event ReferReward(\\n        address indexed user,\\n        address indexed ref1,\\n        uint256 amount1,\\n        address indexed ref2,\\n        uint256 amount2,\\n        RewardType rewardType\\n    );\\n    event Refer(address referee, address referrer);\\n\\n    function _flattenRewardDebt(\\n        uint256 tokenId,\\n        address user,\\n        AirdropConf storage dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) public {\\n        Pool storage pool = _seasonData.pools[tokenId];\\n        Portfolio storage portfolio = _seasonData.portfolios[user][tokenId];\\n\\n        (\\n            uint256 userNativeCoinday,\\n            uint256 userRebornCoinday\\n        ) = _computeUserCoindayOfAirdropTimestamp(\\n                tokenId,\\n                msg.sender,\\n                dropConf,\\n                _seasonData\\n            );\\n\\n        unchecked {\\n            // flatten native reward\\n            portfolio.nativeRewardDebt = uint128(\\n                (userNativeCoinday * pool.accNativePerShare) / PERSHARE_BASE\\n            );\\n\\n            // flatten reborn reward\\n            portfolio.rebornRewardDebt = uint128(\\n                (userRebornCoinday * pool.accRebornPerShare) / PERSHARE_BASE\\n            );\\n        }\\n    }\\n\\n    function _toLastHour(uint256 timestamp) internal pure returns (uint256) {\\n        return timestamp - (timestamp % (1 hours));\\n    }\\n\\n    /**\\n     * @dev update signers\\n     * @param toAdd list of to be added signer\\n     * @param toRemove list of to be removed signer\\n     */\\n    function _updateSigners(\\n        mapping(address => bool) storage signers,\\n        address[] calldata toAdd,\\n        address[] calldata toRemove\\n    ) public {\\n        for (uint256 i = 0; i < toAdd.length; i++) {\\n            signers[toAdd[i]] = true;\\n            emit SignerUpdate(toAdd[i], true);\\n        }\\n        for (uint256 i = 0; i < toRemove.length; i++) {\\n            delete signers[toRemove[i]];\\n            emit SignerUpdate(toRemove[i], false);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns referrer and referer reward\\n     * @return ref1  level1 of referrer. direct referrer\\n     * @return ref1Reward  level 1 referrer reward\\n     * @return ref2  level2 of referrer. referrer's referrer\\n     * @return ref2Reward  level 2 referrer reward\\n     */\\n    function _calculateReferReward(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        address account,\\n        uint256 amount,\\n        RewardType rewardType\\n    )\\n        public\\n        view\\n        returns (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        )\\n    {\\n        ref1 = referrals[account];\\n        ref2 = referrals[ref1];\\n\\n        if (rewardType == RewardType.NativeToken) {\\n            ref1Reward = ref1 == address(0)\\n                ? 0\\n                : (amount * rewardFees.incarnateRef1Fee) / PERCENTAGE_BASE;\\n            ref2Reward = ref2 == address(0)\\n                ? 0\\n                : (amount * rewardFees.incarnateRef2Fee) / PERCENTAGE_BASE;\\n        }\\n\\n        if (rewardType == RewardType.RebornToken) {\\n            ref1Reward = ref1 == address(0)\\n                ? 0\\n                : (amount * rewardFees.vaultRef1Fee) / PERCENTAGE_BASE;\\n            ref2Reward = ref2 == address(0)\\n                ? 0\\n                : (amount * rewardFees.vaultRef2Fee) / PERCENTAGE_BASE;\\n        }\\n    }\\n\\n    /**\\n     * @notice mul 10000 when set. eg: 8% -> 800 18%-> 1800\\n     * @dev set percentage of referrer reward\\n     * @param rewardType 0: incarnate reward 1: engrave reward\\n     */\\n    function _setReferrerRewardFee(\\n        ReferrerRewardFees storage rewardFees,\\n        uint16 refL1Fee,\\n        uint16 refL2Fee,\\n        RewardType rewardType\\n    ) external {\\n        if (rewardType == RewardType.NativeToken) {\\n            rewardFees.incarnateRef1Fee = refL1Fee;\\n            rewardFees.incarnateRef2Fee = refL2Fee;\\n        } else if (rewardType == RewardType.RebornToken) {\\n            rewardFees.vaultRef1Fee = refL1Fee;\\n            rewardFees.vaultRef2Fee = refL2Fee;\\n        }\\n    }\\n\\n    /**\\n     * @dev send NativeToken to referrers\\n     */\\n    function _sendNativeRewardToRefs(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        address account,\\n        uint256 amount\\n    ) public returns (uint256 total) {\\n        (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        ) = _calculateReferReward(\\n                referrals,\\n                rewardFees,\\n                account,\\n                amount,\\n                RewardType.NativeToken\\n            );\\n\\n        if (ref1Reward > 0) {\\n            payable(ref1).transfer(ref1Reward);\\n        }\\n\\n        if (ref2Reward > 0) {\\n            payable(ref2).transfer(ref2Reward);\\n        }\\n\\n        unchecked {\\n            total = ref1Reward + ref2Reward;\\n        }\\n\\n        emit ReferReward(\\n            account,\\n            ref1,\\n            ref1Reward,\\n            ref2,\\n            ref2Reward,\\n            RewardType.NativeToken\\n        );\\n    }\\n\\n    /**\\n     * @dev vault $REBORN token to referrers\\n     */\\n    function _vaultRewardToRefs(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        RewardVault vault,\\n        address account,\\n        uint256 amount\\n    ) public {\\n        (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        ) = _calculateReferReward(\\n                referrals,\\n                rewardFees,\\n                account,\\n                amount,\\n                RewardType.RebornToken\\n            );\\n\\n        if (ref1Reward > 0) {\\n            vault.reward(ref1, ref1Reward);\\n        }\\n\\n        if (ref2Reward > 0) {\\n            vault.reward(ref2, ref2Reward);\\n        }\\n\\n        emit ReferReward(\\n            account,\\n            ref1,\\n            ref1Reward,\\n            ref2,\\n            ref2Reward,\\n            RewardType.RebornToken\\n        );\\n    }\\n\\n    function _computeUserCoindayOfAirdropTimestamp(\\n        uint256 tokenId,\\n        address account,\\n        AirdropConf storage dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    )\\n        internal\\n        view\\n        returns (uint256 userNativeCoinday, uint256 userRebornCoinday)\\n    {\\n        PortalLib.Portfolio storage portfolio = _seasonData.portfolios[account][\\n            tokenId\\n        ];\\n\\n        PortalLib.Pool storage pool = _seasonData.pools[tokenId];\\n\\n        uint256 lastNativeUpdate;\\n        uint256 lastRebornUpdate;\\n        if (pool.lastDropNativeTime == 0) {\\n            lastNativeUpdate = dropConf._nativeDropLastUpdate;\\n        } else {\\n            lastNativeUpdate = pool.lastDropNativeTime;\\n        }\\n        if (pool.lastDropRebornTime == 0) {\\n            lastRebornUpdate = dropConf._rebornDropLastUpdate;\\n        } else {\\n            lastRebornUpdate = pool.lastDropRebornTime;\\n        }\\n\\n        unchecked {\\n            if (portfolio.coindayUpdateLastTime < lastNativeUpdate) {\\n                userNativeCoinday =\\n                    portfolio.coindayCumulant +\\n                    ((lastNativeUpdate - portfolio.coindayUpdateLastTime) *\\n                        portfolio.accumulativeAmount) /\\n                    1 days;\\n            }\\n\\n            if (portfolio.coindayUpdateLastTime < lastRebornUpdate) {\\n                userRebornCoinday =\\n                    portfolio.coindayCumulant +\\n                    ((lastRebornUpdate - portfolio.coindayUpdateLastTime) *\\n                        portfolio.accumulativeAmount) /\\n                    1 days;\\n            }\\n        }\\n    }\\n\\n    function getPoolCoinday(\\n        uint256 tokenId,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) public view returns (uint256 poolCoinday) {\\n        PortalLib.Pool storage pool = _seasonData.pools[tokenId];\\n\\n        unchecked {\\n            uint256 poolPending = ((block.timestamp -\\n                pool.coindayUpdateLastTime) * pool.totalAmount) / 1 days;\\n            poolCoinday = poolPending + pool.coindayCumulant;\\n        }\\n    }\\n\\n    function _updateCoinday(\\n        PortalLib.Portfolio storage portfolio,\\n        PortalLib.Pool storage pool\\n    ) public {\\n        unchecked {\\n            portfolio.coindayCumulant +=\\n                ((block.timestamp - portfolio.coindayUpdateLastTime) *\\n                    portfolio.accumulativeAmount) /\\n                1 days;\\n            portfolio.coindayUpdateLastTime = uint32(block.timestamp);\\n\\n            pool.coindayCumulant +=\\n                ((block.timestamp - pool.coindayUpdateLastTime) *\\n                    pool.totalAmount) /\\n                1 days;\\n            pool.coindayUpdateLastTime = uint32(block.timestamp);\\n        }\\n    }\\n\\n    function getCoinday(\\n        uint256 tokenId,\\n        address account,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) public view returns (uint256 userCoinday, uint256 poolCoinday) {\\n        PortalLib.Portfolio memory portfolio = _seasonData.portfolios[account][\\n            tokenId\\n        ];\\n        PortalLib.Pool memory pool = _seasonData.pools[tokenId];\\n\\n        unchecked {\\n            uint256 userPending = ((block.timestamp -\\n                portfolio.coindayUpdateLastTime) *\\n                portfolio.accumulativeAmount) / 1 days;\\n\\n            uint256 poolPending = ((block.timestamp -\\n                pool.coindayUpdateLastTime) * pool.totalAmount) / 1 days;\\n\\n            userCoinday = userPending + portfolio.coindayCumulant;\\n            poolCoinday = poolPending + pool.coindayCumulant;\\n        }\\n    }\\n\\n    function _increasePool(\\n        uint256 tokenId,\\n        uint256 amount,\\n        IRebornDefination.TributeDirection tributeDirection,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) internal returns (uint256 totalPoolTribute) {\\n        Portfolio storage portfolio = _seasonData.portfolios[msg.sender][\\n            tokenId\\n        ];\\n        Pool storage pool = _seasonData.pools[tokenId];\\n\\n        // update coinday\\n        _updateCoinday(portfolio, pool);\\n\\n        // if user have no stake before, should flatten debt\\n        if (portfolio.accumulativeAmount == 0) {\\n            unchecked {\\n                // flatten native reward\\n                portfolio.nativeRewardDebt = uint128(\\n                    (portfolio.coindayCumulant * pool.accNativePerShare) /\\n                        PERSHARE_BASE\\n                );\\n\\n                // flatten reborn reward\\n                portfolio.rebornRewardDebt = uint128(\\n                    (portfolio.coindayCumulant * pool.accRebornPerShare) /\\n                        PERSHARE_BASE\\n                );\\n            }\\n        }\\n\\n        unchecked {\\n            portfolio.accumulativeAmount += amount;\\n            pool.totalAmount += amount;\\n        }\\n\\n        if (\\n            (portfolio.totalForwardTribute > portfolio.totalReverseTribute &&\\n                tributeDirection ==\\n                IRebornDefination.TributeDirection.Reverse) ||\\n            (portfolio.totalForwardTribute < portfolio.totalReverseTribute &&\\n                tributeDirection == IRebornDefination.TributeDirection.Forward)\\n        ) {\\n            revert IRebornDefination.DirectionError();\\n        }\\n\\n        if (tributeDirection == IRebornDefination.TributeDirection.Forward) {\\n            pool.totalForwardTribute += uint112(amount);\\n            portfolio.totalForwardTribute += uint112(amount);\\n        } else {\\n            pool.totalReverseTribute += uint112(amount);\\n            portfolio.totalReverseTribute += uint112(amount);\\n        }\\n        totalPoolTribute = _getTotalTributeOfPool(pool);\\n    }\\n\\n    function _decreaseFromPool(\\n        uint256 tokenId,\\n        uint256 amount,\\n        IRebornDefination.SeasonData storage _seasonData\\n    )\\n        internal\\n        returns (\\n            uint256 totalTribute,\\n            IRebornDefination.TributeDirection tributeDirection\\n        )\\n    {\\n        PortalLib.Portfolio storage portfolio = _seasonData.portfolios[\\n            msg.sender\\n        ][tokenId];\\n        PortalLib.Pool storage pool = _seasonData.pools[tokenId];\\n\\n        _updateCoinday(portfolio, pool);\\n\\n        // don't need to check accumulativeAmount, as it would revert if accumulativeAmount is less\\n        portfolio.accumulativeAmount -= amount;\\n        pool.totalAmount -= amount;\\n\\n        if (portfolio.totalForwardTribute > portfolio.totalReverseTribute) {\\n            portfolio.totalReverseTribute += uint112(amount);\\n            pool.totalReverseTribute += uint112(amount);\\n            tributeDirection = IRebornDefination.TributeDirection.Reverse;\\n        } else if (\\n            portfolio.totalForwardTribute < portfolio.totalReverseTribute\\n        ) {\\n            portfolio.totalForwardTribute += uint112(amount);\\n            pool.totalForwardTribute += uint112(amount);\\n            tributeDirection = IRebornDefination.TributeDirection.Forward;\\n        }\\n\\n        totalTribute = _getTotalTributeOfPool(pool);\\n    }\\n\\n    function _getTotalTributeOfPool(\\n        PortalLib.Pool storage pool\\n    ) public view returns (uint256) {\\n        return\\n            pool.totalForwardTribute > pool.totalReverseTribute\\n                ? pool.totalForwardTribute - pool.totalReverseTribute\\n                : 0;\\n    }\\n\\n    function _calculateCurrentAP(\\n        CharacterProperty memory charProperty\\n    ) public view returns (uint256 currentAP) {\\n        if (charProperty.restoreTimePerAP == 0) {\\n            return charProperty.currentAP;\\n        }\\n\\n        uint256 calculatedRestoreAp = (block.timestamp -\\n            charProperty.lastTimeAPUpdate) / charProperty.restoreTimePerAP;\\n\\n        uint256 calculatedCurrentAP = calculatedRestoreAp +\\n            charProperty.currentAP;\\n\\n        if (calculatedCurrentAP <= charProperty.maxAP) {\\n            currentAP = calculatedCurrentAP;\\n        } else {\\n            currentAP = charProperty.maxAP;\\n        }\\n    }\\n\\n    function _comsumeAP(\\n        uint256 tokenId,\\n        mapping(uint256 => CharacterProperty) storage _characterProperties\\n    ) public {\\n        CharacterProperty storage charProperty = _characterProperties[tokenId];\\n\\n        // restore AP and decrement\\n        charProperty.currentAP = uint8(_calculateCurrentAP(charProperty) - 1);\\n\\n        charProperty.lastTimeAPUpdate = uint32(block.timestamp);\\n        // AP decrement\\n    }\\n\\n    function setCharProperty(\\n        uint256[] calldata tokenIds,\\n        CharacterParams[] calldata charParams,\\n        mapping(uint256 => CharacterProperty) storage _characterProperties\\n    ) external {\\n        uint256 tokenIdLength = tokenIds.length;\\n        uint256 charParamsLength = charParams.length;\\n        if (tokenIdLength != charParamsLength) {\\n            revert CommonError.InvalidParams();\\n        }\\n        for (uint256 i = 0; i < tokenIdLength; ) {\\n            uint256 tokenId = tokenIds[i];\\n            PortalLib.CharacterParams memory charParam = charParams[i];\\n            PortalLib.CharacterProperty\\n                storage charProperty = _characterProperties[tokenId];\\n\\n            charProperty.maxAP = uint8(charParam.maxAP);\\n            charProperty.restoreTimePerAP = uint24(charParam.restoreTimePerAP);\\n\\n            // TODO: to check, restore all AP immediately\\n            charProperty.currentAP = uint8(charParam.maxAP);\\n\\n            charProperty.level = uint8(charParam.level);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev record referrer relationship\\n     */\\n    function _refer(\\n        mapping(address => address) storage referrals,\\n        address referrer\\n    ) external {\\n        if (\\n            referrals[msg.sender] == address(0) &&\\n            referrer != address(0) &&\\n            referrer != msg.sender\\n        ) {\\n            referrals[msg.sender] = referrer;\\n            emit Refer(msg.sender, referrer);\\n        }\\n    }\\n\\n    function _useSoupParam(\\n        IRebornDefination.SoupParams calldata soupParams,\\n        uint256 nonce,\\n        mapping(uint256 => PortalLib.CharacterProperty)\\n            storage _characterProperties,\\n        mapping(address => bool) storage signers\\n    ) internal {\\n        _checkSig(soupParams, nonce, signers);\\n\\n        if (soupParams.charTokenId != 0) {\\n            _comsumeAP(soupParams.charTokenId, _characterProperties);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return\\n            _buildDomainSeparator(\\n                PortalLib._TYPE_HASH,\\n                keccak256(\\\"Altar\\\"),\\n                keccak256(\\\"1\\\")\\n            );\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    typeHash,\\n                    nameHash,\\n                    versionHash,\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function _checkSig(\\n        IRebornDefination.SoupParams calldata soupParams,\\n        uint256 nonce,\\n        mapping(address => bool) storage signers\\n    ) internal view {\\n        if (block.timestamp >= soupParams.deadline) {\\n            revert CommonError.SignatureExpired();\\n        }\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                PortalLib._SOUPPARAMS_TYPEHASH,\\n                msg.sender,\\n                soupParams.soupPrice,\\n                nonce,\\n                soupParams.charTokenId,\\n                soupParams.deadline\\n            )\\n        );\\n\\n        bytes32 hash = ECDSAUpgradeable.toTypedDataHash(\\n            _domainSeparatorV4(),\\n            structHash\\n        );\\n\\n        address signer = ECDSAUpgradeable.recover(\\n            hash,\\n            soupParams.v,\\n            soupParams.r,\\n            soupParams.s\\n        );\\n\\n        if (!signers[signer]) {\\n            revert CommonError.NotSigner();\\n        }\\n    }\\n\\n    function readCharProperty(\\n        uint256 tokenId,\\n        mapping(uint256 => PortalLib.CharacterProperty)\\n            storage _characterProperties\\n    ) public view returns (PortalLib.CharacterProperty memory) {\\n        PortalLib.CharacterProperty memory charProperty = _characterProperties[\\n            tokenId\\n        ];\\n\\n        charProperty.currentAP = uint8(_calculateCurrentAP(charProperty));\\n\\n        return charProperty;\\n    }\\n}\\n\",\"keccak256\":\"0x3c3f617b59166d93b6ee5b02845016b5b0517ccf27dfaf5ef0f2e35ffdcfd82a\",\"license\":\"GPL-3.0\"},\"src/RewardVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IRewardVault} from \\\"src/interfaces/IRewardVault.sol\\\";\\n\\ncontract RewardVault is IRewardVault, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable rebornToken;\\n\\n    constructor(address owner_, address rebornToken_) {\\n        if (rebornToken_ == address(0)) revert ZeroAddressSet();\\n        _transferOwnership(owner_);\\n        rebornToken = rebornToken_;\\n    }\\n\\n    /**\\n     * @notice Send reward to user\\n     * @param to The address of awards\\n     * @param amount number of awards\\n     */\\n    function reward(\\n        address to,\\n        uint256 amount\\n    ) external virtual override onlyOwner {\\n        IERC20(rebornToken).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice withdraw token Emergency\\n     */\\n    function withdrawEmergency(address to) external virtual override onlyOwner {\\n        if (to == address(0)) revert ZeroAddressSet();\\n        IERC20(rebornToken).safeTransfer(\\n            to,\\n            IERC20(rebornToken).balanceOf(address(this))\\n        );\\n        emit WithdrawEmergency(\\n            rebornToken,\\n            IERC20(rebornToken).balanceOf(address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x630c746afc9d06768752c0eb57c5084aca185ebe9f22eba1e2a735523006b699\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRebornPortal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {PortalLib} from \\\"src/PortalLib.sol\\\";\\nimport {SingleRanking} from \\\"src/lib/SingleRanking.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"../oz/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\n\\ninterface IRebornDefination {\\n    struct InnateParams {\\n        uint256 talentNativePrice;\\n        uint256 talentRebornPrice;\\n        uint256 propertyNativePrice;\\n        uint256 propertyRebornPrice;\\n    }\\n\\n    struct SoupParams {\\n        uint256 soupPrice;\\n        uint256 charTokenId;\\n        uint256 deadline;\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n    struct PermitParams {\\n        uint256 amount;\\n        uint256 deadline;\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n    struct LifeDetail {\\n        bytes32 seed;\\n        address creator; // ---\\n        // uint96 max 7*10^28  7*10^10 eth  //   |\\n        uint96 reward; // ---\\n        uint96 rebornCost; // ---\\n        uint16 age; //   |\\n        uint32 round; //   |\\n        // uint64 max 1.8*10^19             //   |\\n        uint64 score; //   |\\n        uint48 nativeCost; // only with dicimal of 10^6 // ---\\n        string creatorName;\\n    }\\n\\n    struct SeasonData {\\n        mapping(uint256 => PortalLib.Pool) pools;\\n        /// @dev user address => pool tokenId => Portfolio\\n        mapping(address => mapping(uint256 => PortalLib.Portfolio)) portfolios;\\n        SingleRanking.Data _tributeRank;\\n        SingleRanking.Data _scoreRank;\\n        mapping(uint256 => uint256) _oldStakeAmounts;\\n        /// tokenId => bool\\n        BitMapsUpgradeable.BitMap _isTopHundredScore;\\n        // the value of minimum score\\n        uint256 _minScore;\\n        // jackpot of this season\\n        uint256 _jackpot;\\n    }\\n\\n    struct AirDropDebt {\\n        uint128 nativeDebt;\\n        uint128 degenDebt;\\n    }\\n\\n    event AirdropNative(\\n        uint256[] topTokenIds,\\n        uint256 topAmountPer,\\n        uint256[] raffleTokenIds,\\n        uint256 raffleAmountPer\\n    );\\n    event AirdropDegen(\\n        uint256[] topTokenIds,\\n        uint256 topAmountPer,\\n        uint256[] raffleTokenIds,\\n        uint256 raffleAmountPer\\n    );\\n\\n    enum AirdropVrfType {\\n        Invalid,\\n        DropReborn,\\n        DropNative\\n    }\\n\\n    enum TributeDirection {\\n        Reverse,\\n        Forward\\n    }\\n\\n    struct RequestStatus {\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        bool executed; // whether the airdrop is executed\\n        AirdropVrfType t;\\n        uint256 randomWords; // we only need one random word. keccak256 to generate more\\n    }\\n\\n    enum BaptiseType {\\n        Invalid,\\n        TwitterShare,\\n        Airdrop\\n    }\\n\\n    event Incarnate(\\n        address indexed user,\\n        uint256 indexed charTokenId,\\n        uint256 talentNativePrice,\\n        uint256 talentRebornPrice,\\n        uint256 propertyNativePrice,\\n        uint256 propertyRebornPrice,\\n        uint256 soupPrice\\n    );\\n\\n    event Engrave(\\n        bytes32 indexed seed,\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        uint256 score,\\n        uint256 reward\\n    );\\n\\n    event Infuse(\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        uint256 amount,\\n        TributeDirection tributeDirection\\n    );\\n\\n    event Dry(address indexed user, uint256 indexed tokenId, uint256 amount);\\n\\n    event Baptise(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 indexed baptiseType\\n    );\\n\\n    event NewSoupPrice(uint256 price);\\n\\n    event DecreaseFromPool(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount,\\n        TributeDirection tributeDirection\\n    );\\n\\n    event IncreaseToPool(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount,\\n        TributeDirection tributeDirection\\n    );\\n\\n    event Drop(uint256[] tokenIds);\\n\\n    /// @dev event about the vault address is set\\n    event VaultSet(address rewardVault);\\n\\n    event AirdropVaultSet(address airdropVault);\\n\\n    event NewSeason(uint256);\\n\\n    event NewIncarnationLimit(uint256 limit);\\n\\n    event ForgedTo(\\n        uint256 indexed tokenId,\\n        uint256 newLevel,\\n        uint256 burnTokenAmount\\n    );\\n\\n    event SetNewPiggyBank(address piggyBank);\\n\\n    event SetNewPiggyBankFee(uint256 piggyBankFee);\\n\\n    event ClaimNativeAirDrop(uint256 amount);\\n    event ClaimDegenAirDrop(uint256 amount);\\n\\n    event NativeDropRootSet(bytes32);\\n    event DegenDropRootSet(bytes32);\\n\\n    /// @dev revert when msg.value is insufficient\\n    error InsufficientAmount();\\n\\n    /// @dev revert when some address var are set to zero\\n    error ZeroAddressSet();\\n\\n    /// @dev revert when the random seed is duplicated\\n    error SameSeed();\\n\\n    /// @dev revert if burnPool address not set when infuse\\n    error NotSetBurnPoolAddress();\\n\\n    /// @dev revert when the drop is not on\\n    error DropOff();\\n\\n    /// @dev revert when incarnation count exceed limit\\n    error IncarnationExceedLimit();\\n\\n    error DirectionError();\\n\\n    error DropLocked();\\n\\n    error InvalidProof();\\n\\n    error NoRemainingReward();\\n\\n    error SeasonAlreadyStoped();\\n}\\n\\ninterface IRebornPortal is IRebornDefination {\\n    /**\\n     * @dev user buy the innate for the life\\n     * @param innate talent and property choice\\n     * @param referrer the referrer address\\n     */\\n    function incarnate(\\n        InnateParams calldata innate,\\n        address referrer,\\n        SoupParams calldata charParams\\n    ) external payable;\\n\\n    function incarnate(\\n        InnateParams calldata innate,\\n        address referrer,\\n        SoupParams calldata charParams,\\n        PermitParams calldata permitParams\\n    ) external payable;\\n\\n    /**\\n     * @dev engrave the result on chain and reward\\n     * @param seed random seed in bytes32\\n     * @param user user address\\n     * @param lifeReward $REBORN user earns, decimal 10^18\\n     * @param boostReward $REBORN user earns with degen2009 boost\\n     * @param score life score\\n     * @param rebornCost user cost reborn token for this life\\n     * @param nativeCost user cost native token for this life\\n     */\\n    function engrave(\\n        bytes32 seed,\\n        address user,\\n        uint256 lifeReward,\\n        uint256 boostReward,\\n        uint256 score,\\n        uint256 age,\\n        uint256 rebornCost,\\n        uint256 nativeCost,\\n        string calldata creatorName\\n    ) external;\\n\\n    /**\\n     * @dev reward for share the game\\n     * @param user user address\\n     * @param amount amount for reward\\n     */\\n    function baptise(\\n        address user,\\n        uint256 amount,\\n        uint256 baptiseType\\n    ) external;\\n\\n    /**\\n     * @dev stake $REBORN on this tombstone\\n     * @param tokenId tokenId of the life to stake\\n     * @param amount stake amount, decimal 10^18\\n     */\\n    function infuse(\\n        uint256 tokenId,\\n        uint256 amount,\\n        TributeDirection tributeDirection\\n    ) external;\\n\\n    /**\\n     * @dev stake $REBORN with permit\\n     * @param tokenId tokenId of the life to stake\\n     * @param amount amount of $REBORN to stake\\n     * @param permitAmount amount of $REBORN to approve\\n     * @param r r of signature\\n     * @param s v of signature\\n     * @param v v of signature\\n     */\\n    function infuse(\\n        uint256 tokenId,\\n        uint256 amount,\\n        TributeDirection tributeDirection,\\n        uint256 permitAmount,\\n        uint256 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external;\\n\\n    /**\\n     * @dev switch stake amount from poolFrom to poolTo\\n     * @param fromTokenId tokenId of from pool\\n     * @param toTokenId tokenId of to pool\\n     * @param amount amount to switch\\n     */\\n    function switchPool(\\n        uint256 fromTokenId,\\n        uint256 toTokenId,\\n        uint256 amount,\\n        TributeDirection tributeDirection\\n    ) external;\\n\\n    /**\\n     * @dev set new airdrop config\\n     */\\n    function setDropConf(PortalLib.AirdropConf calldata conf) external;\\n\\n    /**\\n     * @dev set new chainlink vrf v2 config\\n     */\\n    function setVrfConf(PortalLib.VrfConf calldata conf) external;\\n\\n    function claimNativeDrops(\\n        uint256 totalAmount,\\n        bytes32[] calldata proof\\n    ) external;\\n\\n    function claimDegenDrops(\\n        uint256 totalAmount,\\n        bytes32[] calldata proof\\n    ) external;\\n\\n    /**\\n     * @dev switch to next season, call by owner\\n     */\\n    function toNextSeason() external;\\n}\\n\",\"keccak256\":\"0xc023bdeb9786081bb0a203cb5a8b6f416615cfacbb1910c22f43b31fddf89843\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRewardVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IRewardVault {\\n    error ZeroAddressSet();\\n    \\n    function reward(address to, uint256 amount) external; // send reward\\n\\n    function withdrawEmergency(address to) external;\\n\\n    event WithdrawEmergency(address p12Token, uint256 amount);\\n}\\n\",\"keccak256\":\"0x45f05e6c373a4bb604ed8f894b77dd363c40bfb9ec171ec720893bb7e39bd45a\",\"license\":\"GPL-3.0\"},\"src/lib/CommonError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nlibrary CommonError {\\n    error ZeroAddressSet();\\n    error InvalidParams();\\n    /// @dev revert when to caller is not signer\\n    error NotSigner();\\n    error SignatureExpired();\\n}\\n\",\"keccak256\":\"0x810b70d395173799f0357fb37a6dff60225ba8b25f07ed79f9b6419e03e284bd\",\"license\":\"GPL-3.0\"},\"src/lib/FastArray.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// A simple array that supports insert and removal.\\n// The values are assumed to be unique and the library is meant to be lightweight.\\n// So when calling insert or remove, the caller is responsible to know whether a value already exists in the array or not.\\nlibrary FastArray {\\n    struct Data {\\n        mapping(uint256 => uint256) array;\\n        mapping(uint256 => uint256) indexMap;\\n        uint256 length;\\n    }\\n\\n    /**\\n     * @notice please confirm no eq item exist before insert\\n     */\\n    function insert(Data storage _fastArray, uint256 _value) public {\\n        _fastArray.array[_fastArray.length] = _value;\\n        _fastArray.indexMap[_value] = _fastArray.length;\\n        _fastArray.length += 1;\\n    }\\n\\n    /**\\n     * @dev remove item from array,but not keep rest item sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function remove(Data storage _fastArray, uint256 _value) public {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        uint256 oldIndex = _fastArray.length - 1;\\n\\n        _fastArray.array[index] = _fastArray.array[oldIndex];\\n        delete _fastArray.indexMap[_value];\\n        delete _fastArray.array[oldIndex];\\n\\n        _fastArray.length = oldIndex;\\n    }\\n\\n    /**\\n     * @dev remove item and keep rest item in sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function removeKeepSort(Data storage _fastArray, uint256 _value) public {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        uint256 tempLastItem = _fastArray.array[_fastArray.length - 1];\\n\\n        for (uint256 i = index; i < _fastArray.length - 1; i++) {\\n            _fastArray.indexMap[_fastArray.array[i + 1]] = i;\\n            _fastArray.array[i] = _fastArray.array[i + 1];\\n        }\\n\\n        delete _fastArray.indexMap[tempLastItem];\\n        delete _fastArray.array[_fastArray.length - 1];\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @notice PLease confirm index is not out of bounds\\n     */\\n    function get(\\n        Data storage _fastArray,\\n        uint256 _index\\n    ) public view returns (uint256) {\\n        return _fastArray.array[_index];\\n    }\\n\\n    function length(Data storage _fastArray) public view returns (uint256) {\\n        return _fastArray.length;\\n    }\\n\\n    function contains(\\n        Data storage _fastArray,\\n        uint256 _value\\n    ) public view returns (bool) {\\n        return _fastArray.indexMap[_value] != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xfd8206ad787bf6c00652d6b0484b49bc4441a40b128f069a4962f3e5e2a67117\",\"license\":\"UNLICENSED\"},\"src/lib/RankingRedBlackTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// A red-black tree that holds a \\\"count\\\" variable next to the value in the tree.\\n// This library is used to resolve which values should be skipped to respect the _offset when querying from the rank library.\\n// The focal function is \\\"lastByOffset\\\" which starts from the largest value in the tree and traverses backwards to find the\\n// first value that is included in the offset specified and returns it.\\n// The nodes are accessed by a key and other properties can be queried using the key.\\n// This library is a modification of BokkyPooBah's Red-Black Tree Library which has a MIT licence.\\n// Following is the original description and the license:\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n// Here is the license attached to this library:\\n// ----------------------------------------------------------------------------\\n// MIT License\\n//\\n// Copyright (c) 2018 The Officious BokkyPooBah\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n// ----------------------------------------------------------------------------\\nlibrary RankingRedBlackTree {\\n    struct Node {\\n        uint id;\\n        uint value;\\n        uint count;\\n        uint parent;\\n        uint left;\\n        uint right;\\n        bool red;\\n    }\\n\\n    struct Tree {\\n        uint root;\\n        mapping(uint => Node) nodes;\\n        uint counter;\\n    }\\n\\n    uint private constant EMPTY = 0;\\n\\n    function first(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].left != EMPTY) {\\n                _key = self.nodes[_key].left;\\n            }\\n        }\\n    }\\n\\n    function last(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].right != EMPTY) {\\n                _key = self.nodes[_key].right;\\n            }\\n        }\\n    }\\n\\n    function lastByOffset(\\n        Tree storage self,\\n        uint _offset\\n    ) public view returns (uint, uint) {\\n        uint key = last(self);\\n\\n        while (key != EMPTY && _offset > self.nodes[key].count) {\\n            unchecked {\\n                _offset -= self.nodes[key].count;\\n            }\\n            key = prev(self, key);\\n        }\\n\\n        return (key, _offset);\\n    }\\n\\n    function next(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function find(Tree storage self, uint _value) public view returns (uint) {\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            if (_value == self.nodes[probe].value) {\\n                return probe;\\n            }\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        return EMPTY;\\n    }\\n\\n    function value(Tree storage self, uint _key) public view returns (uint) {\\n        return self.nodes[_key].value;\\n    }\\n\\n    function addToCount(Tree storage self, uint _value, uint amount) public {\\n        self.nodes[find(self, _value)].count += amount;\\n    }\\n\\n    function minusFromCount(\\n        Tree storage self,\\n        uint _value,\\n        uint amount\\n    ) public {\\n        self.nodes[find(self, _value)].count -= amount;\\n    }\\n\\n    function insert(Tree storage self, uint _value) public returns (uint) {\\n        uint cursor = EMPTY;\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.counter += 1;\\n        self.nodes[self.counter] = Node({\\n            id: self.counter,\\n            value: _value,\\n            count: 1,\\n            parent: cursor,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true\\n        });\\n        if (cursor == EMPTY) {\\n            self.root = self.counter;\\n        } else if (_value < self.nodes[cursor].value) {\\n            self.nodes[cursor].left = self.counter;\\n        } else {\\n            self.nodes[cursor].right = self.counter;\\n        }\\n        insertFixup(self, self.counter);\\n        return self.counter;\\n    }\\n\\n    function remove(Tree storage self, uint _value) public {\\n        uint key = find(self, _value);\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function removeWithKey(Tree storage self, uint key) public {\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function treeMinimum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].right;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].left;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(self, self.nodes[keyParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[keyParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(Tree storage self, uint a, uint b) private {\\n        uint bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n\",\"keccak256\":\"0xf57d5e1946cc4c76435318b6cfb39fbbd58249b84d0b966c38924940509a4404\",\"license\":\"MIT\"},\"src/lib/SingleRanking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\nimport \\\"./FastArray.sol\\\";\\nimport \\\"./RankingRedBlackTree.sol\\\";\\n\\nlibrary SingleRanking {\\n    using FastArray for FastArray.Data;\\n    using RankingRedBlackTree for RankingRedBlackTree.Tree;\\n\\n    struct Data {\\n        RankingRedBlackTree.Tree tree;\\n        mapping(uint => FastArray.Data) keys;\\n        uint length;\\n    }\\n\\n    function add(Data storage _singleRanking, uint _key, uint _value) public {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) == 0) {\\n            _singleRanking.tree.insert(_value);\\n        } else {\\n            _singleRanking.tree.addToCount(_value, 1);\\n        }\\n\\n        _singleRanking.keys[_value].insert(_key);\\n\\n        _singleRanking.length += 1;\\n    }\\n\\n    function remove(\\n        Data storage _singleRanking,\\n        uint _key,\\n        uint _value\\n    ) public {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) > 0) {\\n            keys.remove(_key);\\n\\n            if (FastArray.length(keys) == 0) {\\n                _singleRanking.tree.remove(_value);\\n            } else {\\n                _singleRanking.tree.minusFromCount(_value, 1);\\n            }\\n        }\\n        // if FastArray.length(keys) is zero, it means logic error and should revert\\n        // but no revert here to reduce gas. use remove with caution\\n\\n        _singleRanking.length -= 1;\\n    }\\n\\n    function length(Data storage _singleRanking) public view returns (uint) {\\n        return _singleRanking.length;\\n    }\\n\\n    function get(\\n        Data storage _singleRanking,\\n        uint _offset,\\n        uint _count\\n    ) public view returns (uint[] memory) {\\n        require(_count > 0 && _count <= 100, \\\"Count must be between 0 and 100\\\");\\n\\n        uint[] memory result = new uint[](_count);\\n        uint size = 0;\\n        uint id;\\n        (id, _offset) = _singleRanking.tree.lastByOffset(_offset);\\n\\n        while (id != 0) {\\n            uint value = _singleRanking.tree.value(id);\\n            FastArray.Data storage keys = _singleRanking.keys[value];\\n\\n            if (_offset >= FastArray.length(keys)) {\\n                unchecked {\\n                    _offset -= FastArray.length(keys);\\n                }\\n            } else if (FastArray.length(keys) < _offset + _count) {\\n                uint index;\\n                unchecked {\\n                    index = FastArray.length(keys) - 1;\\n                }\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    unchecked {\\n                        result[size] = key;\\n                        size += 1;\\n                    }\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    unchecked {\\n                        index -= 1;\\n                    }\\n                }\\n\\n                unchecked {\\n                    _count -= FastArray.length(keys) - _offset;\\n                    _offset = 0;\\n                }\\n            } else {\\n                uint index;\\n                unchecked {\\n                    index = _offset + _count - 1;\\n                }\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    unchecked {\\n                        size += 1;\\n                    }\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    unchecked {\\n                        index -= 1;\\n                    }\\n                }\\n\\n                break;\\n            }\\n\\n            id = _singleRanking.tree.prev(id);\\n        }\\n\\n        return result;\\n    }\\n\\n    function getNthValue(\\n        Data storage _singleRanking,\\n        uint n\\n    ) public view returns (uint) {\\n        (uint256 id, ) = _singleRanking.tree.lastByOffset(n);\\n        uint value = _singleRanking.tree.value(id);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0xd8518b71301eebcbf2978c23df6c081532aaf4d8fe4e6679d05896a63c694cca\",\"license\":\"UNLICENSED\"},\"src/oz/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n    error InvalidSignature();\\n    error InvalidSignatureLength();\\n    error InvalidSignatureSValue();\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert InvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert InvalidSignatureLength();\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert InvalidSignatureSValue();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs &\\n            bytes32(\\n                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            );\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(\\n        bytes32 hash\\n    ) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(\\n        bytes memory s\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n                    StringsUpgradeable.toString(s.length),\\n                    s\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(\\n        bytes32 domainSeparator,\\n        bytes32 structHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x642a537e21d1e06eb879d03b23d5fe50b76a198071426972e62d71b0590060d5\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMapsUpgradeable {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(\\n        BitMap storage bitmap,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x53cd824c67951e8cc28855188b72c87bb6dfbd87368940a3ba808f095d17ceb5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c576111e690816100228239308160070152f35b600080fdfe6080604052307f000000000000000000000000000000000000000000000000000000000000000014600436101561003557600080fd5b600090813560e01c80631747e07714610ede5780632691a0af14610e815780632e0a159d14610e4b57806337a8f5a514610cb257806337bd752114610c945780633880f0ab14610be65780633f3ccdf914610aba5780634da8305c14610a7a5780635d2dab0b14610a445780637ef613d6146109b5578063818ff1fc1461094f57806387704f84146107b957806387c13943146107a1578063abfdc0e51461066c578063afb3da25146104c1578063bfaa8cca146104aa578063c3326c8614610439578063dea23a7814610303578063e51057f51461026e5763ed7c9de31461011d57600080fd5b61026b57608036600319011261026b57600435610138610f9a565b6044359083606435928482526020938085526040832091600182019460018060a01b0316600052848652604060002087855286526040842095849785963360005282526040600020908652815260408520928152600660408620015463ffffffff928382818094168015600014610265575081835460681c16945b1c168061025c57505460481c16915b60048401541690808210610240575b50818110610223575b5050506001678ac7230489e8000080966002840154020494019485549460018060801b03199060801b16936001808060801b039386858916178955015402041692161717905580f35b8293955060036201518093015493549103020401913880806101da565b90975062015180600384015491898554910302040196386101d1565b915050916101c2565b946101b3565b80fd5b8260a036600319011261026b576040519061028882611009565b60043560ff811681036102fa57825260243560ff811681036102fa57602083015260443562ffffff811681036102ff5760408301526064359063ffffffff8216820361026b5750606082015260843560ff811681036102fa57816102f291608060209401526110b1565b604051908152f35b600080fd5b5080fd5b5061026b57606036600319011261026b576001600160401b0360043560243582811161043557610337903690600401610fc6565b91909260443590811161043157610352903690600401610fc6565b939092855b8181106103d757505050835b83811061036e578480f35b6103d29060008051602061119183398151915260406001600160a01b038061039f61039a868b8b611049565b61106f565b166000528860208781528360002060ff1981541690556103c361039a878c8c611049565b845193168352820152a1611024565b610363565b61042c9060008051602061119183398151915260406001600160a01b038061040361039a86898b611049565b16600052602088815282600020906001918260ff198254161790556103c361039a878a8c611049565b610357565b8480fd5b8380fd5b5061026b57604036600319011261026b576003600435602435906004810191825491805463ffffffff91620151809687910191838616420302048154019055804216938463ffffffff1980951617905560058201948554926004815491019284164203020481540190551617905580f35b828060031936011261026b57602060405160648152f35b5061026b57606036600319011261026b576004356001600160401b0381116102ff576104f1903690600401610fc6565b6001600160401b036024351161066857366023602435011215610668576001600160401b036004602435013511610668573660246060813560040135028135010111610668576044359060243560040135810361065657835b818110610555578480f35b610560818386611049565b359060243560040135811015610642576060602435828202013603602319011261063e576040516001600160401b03606082019081119082111761062857600192606082016040526024606084028135010135825260209086828401926044606087026024350101358452604085019260646060880260243501013584528b525260ff60408a2093519164ffffff00008554945160101b16908260481b905160481b169361ff008460081b169069ff00000000ffffffffff191617179116171790550161054a565b634e487b7160e01b600052604160045260246000fd5b8580fd5b634e487b7160e01b86526032600452602486fd5b604051635435b28960e11b8152600490fd5b8280fd5b5061026b57608036600319011261026b57602435610688610fb0565b6001600160a01b03908116600081815260043560205260408082205484168083529120549192919091169060643581610788576000945b8361076b5750506000925b85858381158015610746575b5050505083158015610715575b50602095506000805160206111718339815191526060604051878152868982015260006040820152a460405191018152f35b84848892839061073d575b839283928392f11561073257856106e3565b6040513d87823e3d90fd5b506108fc610720565b8390610762575b839283928392f11561073257858583386106d6565b506108fc61074d565b6127109161ffff610781925460101c1690611083565b04926106ca565b61271061079a61ffff87541683611083565b04946106bf565b828060031936011261026b5760206040516127108152f35b82606036600319011261026b57600435906107d2610f9a565b6044359060018060a01b03166000526020916001820183526040600020848252835260408120906040519161012083019360018060401b039484811086821117610628576040528154845260018201549260018060801b03938481168887015260801c60408601526002830154848116606087015260801c6080860152600460038401549360a08701948552015495604060c087019263ffffffff94858a16855260018060701b039b8c8b8d1c1660e08b01526101009a60901c8b8b015282528a522060405191610180830190838210908211176106285760405280549586835260018201548a840152600282015460408401526003820154908116606084015260801c60808301526004810154978860a084015260058201548581169b8c60c0860152818c1c1660e085015260901c908301526006015483811661012083015283818a1c1661014083015260401c9061016001525116926201518093849151904203020490510194604051958652420302040190820152604090f35b82602036600319011261026b57600435600501546001600160701b0390609081901c9060201c8216818111156109aa57038181116109965760209250905b60405191168152f35b634e487b7160e01b83526011600452602483fd5b50506020919061098d565b60a06109f66040856109c636610f84565b9082608085516109d581611009565b82815282602082015282878201528260608201520152825260205220611126565b60ff608081610a04846110b1565b169283815260405193845282602082015116602085015262ffffff604082015116604085015263ffffffff60608201511660608501520151166080820152f35b828060031936011261026b5760206040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8152f35b82604036600319011261026b576040602091600435815260243583522060046201518063ffffffff60058401541642038354020491015401604051908152f35b8260a036600319011261026b57602435610ad2610fb0565b9060643590608435906002821015610431576080945060009060009360018060a01b0380961685526004356020528560408620541695868652604086205416938015610b94575b600114610b3a575b5050604051938452602084015260408301526060820152f35b915092508315600014610b795760005b9282610b5d57505060005b918580610b21565b6127109161ffff610b73925460301c1690611083565b04610b55565b612710610b8e61ffff855460201c1683611083565b04610b4a565b94925085610bce57825b9284610bb0576001905b959050610b19565b506001612710610bc861ffff855460101c1684611083565b04610ba8565b612710610be061ffff84541683611083565b04610b9e565b5061026b57604036600319011261026b57610bff610f9a565b33600090815260043560205260409020546001600160a01b039081161580610c89575b80610c7d575b610c30578280f35b7f677cd8c8ce12dc7827579d65be5e6efa74b6ac9ab04ac43d4648dc85d328c2ae91604091826000209116908160018060a01b03198254161790558151903382526020820152a138808280f35b50338183161415610c28565b508082161515610c22565b828060031936011261026b576020604051678ac7230489e800008152f35b5061026b5760a036600319011261026b576044356001600160a01b03818116916024359083900361043557606435908282168092036104315760843593828652600435602052858460408220541694858252604082205416958515600014610e2f5781935b87610e1257505080915b83610db0575b82610d58575b505060008051602061117183398151915291606091604051918252602082015260016040820152a480f35b803b156102ff576040516310b3879160e11b81529082908290818381610d82898e60048401611096565b03925af18015610da55715610d2d57610d9a90610ff6565b61063e578538610d2d565b6040513d84823e3d90fd5b8091503b15610e0e576040516310b3879160e11b8152878180610dd7878a60048401611096565b038183865af18015610e0357610df0575b508690610d27565b610dfc90979197610ff6565b9538610de8565b6040513d8a823e3d90fd5b8680fd5b6127109161ffff610e28925460301c1690611083565b0491610d21565b612710610e4461ffff865460201c1683611083565b0493610d17565b828060031936011261026b5760206040517f94fd718aa05a42d2b36d996b7fe56ff32591e46434435d6d3449720695e107588152f35b5061026b57610e8f36610f84565b90825260205260408120610eaa610ea582611126565b6110b1565b600019810190811161099657815468ffffffff00000000ff191660ff91909116174260281b63ffffffff60281b1617905580f35b5061026b57608036600319011261026b5760043561ffff6024358181169081810361043157604435928316830361043157606435600281101561063e5780610f3d57505063ffff000083549260101b169163ffffffff19161717905580f35b60019193925014610f4f575b50505080f35b825463ffffffff60201b191660209290921b61ffff60201b169190911760309190911b61ffff60301b16179055388080610f49565b60409060031901126102fa576004359060243590565b602435906001600160a01b03821682036102fa57565b604435906001600160a01b03821682036102fa57565b9181601f840112156102fa578235916001600160401b0383116102fa576020808501948460051b0101116102fa57565b6001600160401b03811161062857604052565b60a081019081106001600160401b0382111761062857604052565b60001981146110335760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156110595760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036102fa5790565b8181029291811591840414171561103357565b6001600160a01b039091168152602081019190915260400190565b6040810162ffffff808251161561111d5763ffffffff60608401511642039142831161103357511690811561110757049060ff8151168201809211611033576020015160ff16808211611102575090565b905090565b634e487b7160e01b600052601260045260246000fd5b50505160ff1690565b9060405161113381611009565b608060ff8294548181168452818160081c16602085015262ffffff8160101c16604085015263ffffffff8160281c16606085015260481c1691015256feba677d62d32cf3ca7ea533245a2128ce25fdbee9811bd67751f522b18e98db4ec648f6265408cc54c0dc26d24ba51dfc9f35ce1a63baa2228f65d93aaf11cc67a2646970667358221220f30edbe71b19433f2e76177bad59f975759d774ab07ffb8ace9cfa6f153627d364736f6c63430008110033",
  "deployedBytecode": "0x6080604052307f000000000000000000000000000000000000000000000000000000000000000014600436101561003557600080fd5b600090813560e01c80631747e07714610ede5780632691a0af14610e815780632e0a159d14610e4b57806337a8f5a514610cb257806337bd752114610c945780633880f0ab14610be65780633f3ccdf914610aba5780634da8305c14610a7a5780635d2dab0b14610a445780637ef613d6146109b5578063818ff1fc1461094f57806387704f84146107b957806387c13943146107a1578063abfdc0e51461066c578063afb3da25146104c1578063bfaa8cca146104aa578063c3326c8614610439578063dea23a7814610303578063e51057f51461026e5763ed7c9de31461011d57600080fd5b61026b57608036600319011261026b57600435610138610f9a565b6044359083606435928482526020938085526040832091600182019460018060a01b0316600052848652604060002087855286526040842095849785963360005282526040600020908652815260408520928152600660408620015463ffffffff928382818094168015600014610265575081835460681c16945b1c168061025c57505460481c16915b60048401541690808210610240575b50818110610223575b5050506001678ac7230489e8000080966002840154020494019485549460018060801b03199060801b16936001808060801b039386858916178955015402041692161717905580f35b8293955060036201518093015493549103020401913880806101da565b90975062015180600384015491898554910302040196386101d1565b915050916101c2565b946101b3565b80fd5b8260a036600319011261026b576040519061028882611009565b60043560ff811681036102fa57825260243560ff811681036102fa57602083015260443562ffffff811681036102ff5760408301526064359063ffffffff8216820361026b5750606082015260843560ff811681036102fa57816102f291608060209401526110b1565b604051908152f35b600080fd5b5080fd5b5061026b57606036600319011261026b576001600160401b0360043560243582811161043557610337903690600401610fc6565b91909260443590811161043157610352903690600401610fc6565b939092855b8181106103d757505050835b83811061036e578480f35b6103d29060008051602061119183398151915260406001600160a01b038061039f61039a868b8b611049565b61106f565b166000528860208781528360002060ff1981541690556103c361039a878c8c611049565b845193168352820152a1611024565b610363565b61042c9060008051602061119183398151915260406001600160a01b038061040361039a86898b611049565b16600052602088815282600020906001918260ff198254161790556103c361039a878a8c611049565b610357565b8480fd5b8380fd5b5061026b57604036600319011261026b576003600435602435906004810191825491805463ffffffff91620151809687910191838616420302048154019055804216938463ffffffff1980951617905560058201948554926004815491019284164203020481540190551617905580f35b828060031936011261026b57602060405160648152f35b5061026b57606036600319011261026b576004356001600160401b0381116102ff576104f1903690600401610fc6565b6001600160401b036024351161066857366023602435011215610668576001600160401b036004602435013511610668573660246060813560040135028135010111610668576044359060243560040135810361065657835b818110610555578480f35b610560818386611049565b359060243560040135811015610642576060602435828202013603602319011261063e576040516001600160401b03606082019081119082111761062857600192606082016040526024606084028135010135825260209086828401926044606087026024350101358452604085019260646060880260243501013584528b525260ff60408a2093519164ffffff00008554945160101b16908260481b905160481b169361ff008460081b169069ff00000000ffffffffff191617179116171790550161054a565b634e487b7160e01b600052604160045260246000fd5b8580fd5b634e487b7160e01b86526032600452602486fd5b604051635435b28960e11b8152600490fd5b8280fd5b5061026b57608036600319011261026b57602435610688610fb0565b6001600160a01b03908116600081815260043560205260408082205484168083529120549192919091169060643581610788576000945b8361076b5750506000925b85858381158015610746575b5050505083158015610715575b50602095506000805160206111718339815191526060604051878152868982015260006040820152a460405191018152f35b84848892839061073d575b839283928392f11561073257856106e3565b6040513d87823e3d90fd5b506108fc610720565b8390610762575b839283928392f11561073257858583386106d6565b506108fc61074d565b6127109161ffff610781925460101c1690611083565b04926106ca565b61271061079a61ffff87541683611083565b04946106bf565b828060031936011261026b5760206040516127108152f35b82606036600319011261026b57600435906107d2610f9a565b6044359060018060a01b03166000526020916001820183526040600020848252835260408120906040519161012083019360018060401b039484811086821117610628576040528154845260018201549260018060801b03938481168887015260801c60408601526002830154848116606087015260801c6080860152600460038401549360a08701948552015495604060c087019263ffffffff94858a16855260018060701b039b8c8b8d1c1660e08b01526101009a60901c8b8b015282528a522060405191610180830190838210908211176106285760405280549586835260018201548a840152600282015460408401526003820154908116606084015260801c60808301526004810154978860a084015260058201548581169b8c60c0860152818c1c1660e085015260901c908301526006015483811661012083015283818a1c1661014083015260401c9061016001525116926201518093849151904203020490510194604051958652420302040190820152604090f35b82602036600319011261026b57600435600501546001600160701b0390609081901c9060201c8216818111156109aa57038181116109965760209250905b60405191168152f35b634e487b7160e01b83526011600452602483fd5b50506020919061098d565b60a06109f66040856109c636610f84565b9082608085516109d581611009565b82815282602082015282878201528260608201520152825260205220611126565b60ff608081610a04846110b1565b169283815260405193845282602082015116602085015262ffffff604082015116604085015263ffffffff60608201511660608501520151166080820152f35b828060031936011261026b5760206040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8152f35b82604036600319011261026b576040602091600435815260243583522060046201518063ffffffff60058401541642038354020491015401604051908152f35b8260a036600319011261026b57602435610ad2610fb0565b9060643590608435906002821015610431576080945060009060009360018060a01b0380961685526004356020528560408620541695868652604086205416938015610b94575b600114610b3a575b5050604051938452602084015260408301526060820152f35b915092508315600014610b795760005b9282610b5d57505060005b918580610b21565b6127109161ffff610b73925460301c1690611083565b04610b55565b612710610b8e61ffff855460201c1683611083565b04610b4a565b94925085610bce57825b9284610bb0576001905b959050610b19565b506001612710610bc861ffff855460101c1684611083565b04610ba8565b612710610be061ffff84541683611083565b04610b9e565b5061026b57604036600319011261026b57610bff610f9a565b33600090815260043560205260409020546001600160a01b039081161580610c89575b80610c7d575b610c30578280f35b7f677cd8c8ce12dc7827579d65be5e6efa74b6ac9ab04ac43d4648dc85d328c2ae91604091826000209116908160018060a01b03198254161790558151903382526020820152a138808280f35b50338183161415610c28565b508082161515610c22565b828060031936011261026b576020604051678ac7230489e800008152f35b5061026b5760a036600319011261026b576044356001600160a01b03818116916024359083900361043557606435908282168092036104315760843593828652600435602052858460408220541694858252604082205416958515600014610e2f5781935b87610e1257505080915b83610db0575b82610d58575b505060008051602061117183398151915291606091604051918252602082015260016040820152a480f35b803b156102ff576040516310b3879160e11b81529082908290818381610d82898e60048401611096565b03925af18015610da55715610d2d57610d9a90610ff6565b61063e578538610d2d565b6040513d84823e3d90fd5b8091503b15610e0e576040516310b3879160e11b8152878180610dd7878a60048401611096565b038183865af18015610e0357610df0575b508690610d27565b610dfc90979197610ff6565b9538610de8565b6040513d8a823e3d90fd5b8680fd5b6127109161ffff610e28925460301c1690611083565b0491610d21565b612710610e4461ffff865460201c1683611083565b0493610d17565b828060031936011261026b5760206040517f94fd718aa05a42d2b36d996b7fe56ff32591e46434435d6d3449720695e107588152f35b5061026b57610e8f36610f84565b90825260205260408120610eaa610ea582611126565b6110b1565b600019810190811161099657815468ffffffff00000000ff191660ff91909116174260281b63ffffffff60281b1617905580f35b5061026b57608036600319011261026b5760043561ffff6024358181169081810361043157604435928316830361043157606435600281101561063e5780610f3d57505063ffff000083549260101b169163ffffffff19161717905580f35b60019193925014610f4f575b50505080f35b825463ffffffff60201b191660209290921b61ffff60201b169190911760309190911b61ffff60301b16179055388080610f49565b60409060031901126102fa576004359060243590565b602435906001600160a01b03821682036102fa57565b604435906001600160a01b03821682036102fa57565b9181601f840112156102fa578235916001600160401b0383116102fa576020808501948460051b0101116102fa57565b6001600160401b03811161062857604052565b60a081019081106001600160401b0382111761062857604052565b60001981146110335760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156110595760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036102fa5790565b8181029291811591840414171561103357565b6001600160a01b039091168152602081019190915260400190565b6040810162ffffff808251161561111d5763ffffffff60608401511642039142831161103357511690811561110757049060ff8151168201809211611033576020015160ff16808211611102575090565b905090565b634e487b7160e01b600052601260045260246000fd5b50505160ff1690565b9060405161113381611009565b608060ff8294548181168452818160081c16602085015262ffffff8160101c16604085015263ffffffff8160281c16606085015260481c1691015256feba677d62d32cf3ca7ea533245a2128ce25fdbee9811bd67751f522b18e98db4ec648f6265408cc54c0dc26d24ba51dfc9f35ce1a63baa2228f65d93aaf11cc67a2646970667358221220f30edbe71b19433f2e76177bad59f975759d774ab07ffb8ace9cfa6f153627d364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_calculateReferReward(mapping(address => address) storage,PortalLib.ReferrerRewardFees storage,address,uint256,PortalLib.RewardType)": {
        "details": "returns referrer and referer reward",
        "returns": {
          "ref1": " level1 of referrer. direct referrer",
          "ref1Reward": " level 1 referrer reward",
          "ref2": " level2 of referrer. referrer's referrer",
          "ref2Reward": " level 2 referrer reward"
        }
      },
      "_refer(mapping(address => address) storage,address)": {
        "details": "record referrer relationship"
      },
      "_sendNativeRewardToRefs(mapping(address => address) storage,PortalLib.ReferrerRewardFees storage,address,uint256)": {
        "details": "send NativeToken to referrers"
      },
      "_setReferrerRewardFee(PortalLib.ReferrerRewardFees storage,uint16,uint16,PortalLib.RewardType)": {
        "details": "set percentage of referrer reward",
        "params": {
          "rewardType": "0: incarnate reward 1: engrave reward"
        }
      },
      "_updateSigners(mapping(address => bool) storage,address[],address[])": {
        "details": "update signers",
        "params": {
          "toAdd": "list of to be added signer",
          "toRemove": "list of to be removed signer"
        }
      },
      "_vaultRewardToRefs(mapping(address => address) storage,PortalLib.ReferrerRewardFees storage,RewardVault,address,uint256)": {
        "details": "vault $REBORN token to referrers"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_setReferrerRewardFee(PortalLib.ReferrerRewardFees storage,uint16,uint16,PortalLib.RewardType)": {
        "notice": "mul 10000 when set. eg: 8% -> 800 18%-> 1800"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}