{
  "address": "0xD2ACc08f1d6e403FCcBfD20D2098C653f79ddb4d",
  "abi": [],
  "transactionHash": "0xce777cd06979abe71fc2d49348cb86ed0d5317dc32fb17cf2a3bf27e055e0fd9",
  "receipt": {
    "to": null,
    "from": "0xe0B4c9C36f5A5D0Ff3A547FeaBB6BC9Ba65805F2",
    "contractAddress": "0xD2ACc08f1d6e403FCcBfD20D2098C653f79ddb4d",
    "transactionIndex": 0,
    "gasUsed": "549189",
    "logsBloom": "0x
    "blockHash": "0x84caeeed179b136dfbca42a644b88154413c283847fb54c0f72a8cf1346c3589",
    "transactionHash": "0xce777cd06979abe71fc2d49348cb86ed0d5317dc32fb17cf2a3bf27e055e0fd9",
    "logs": [],
    "blockNumber": 28115498,
    "cumulativeGasUsed": "549189",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "f6e6d452782abdad5dd9693be35085b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/SingleRanking.sol\":\"SingleRanking\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363739303334313737393130\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/lib/FastArray.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// A simple array that supports insert and removal.\\n// The values are assumed to be unique and the library is meant to be lightweight.\\n// So when calling insert or remove, the caller is responsible to know whether a value already exists in the array or not.\\nlibrary FastArray {\\n    struct Data {\\n        mapping(uint256 => uint256) array;\\n        mapping(uint256 => uint256) indexMap;\\n        uint256 length;\\n    }\\n\\n    /**\\n     * @notice please confirm no eq item exist before insert\\n     */\\n    function insert(Data storage _fastArray, uint256 _value) internal {\\n        _fastArray.array[_fastArray.length] = _value;\\n        _fastArray.indexMap[_value] = _fastArray.length;\\n        _fastArray.length += 1;\\n    }\\n\\n    /**\\n     * @dev remove item from array,but not keep rest item sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function remove(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        _fastArray.array[index] = _fastArray.array[_fastArray.length - 1];\\n        delete _fastArray.indexMap[_value];\\n        delete _fastArray.array[_fastArray.length - 1];\\n\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @dev remove item and keep rest item in sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function removeKeepSort(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        uint256 tempLastItem = _fastArray.array[_fastArray.length - 1];\\n\\n        for (uint256 i = index; i < _fastArray.length - 1; i++) {\\n            _fastArray.indexMap[_fastArray.array[i + 1]] = i;\\n            _fastArray.array[i] = _fastArray.array[i + 1];\\n        }\\n\\n        delete _fastArray.indexMap[tempLastItem];\\n        delete _fastArray.array[_fastArray.length - 1];\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @notice PLease confirm index is not out of bounds\\n     */\\n    function get(\\n        Data storage _fastArray,\\n        uint256 _index\\n    ) public view returns (uint256) {\\n        return _fastArray.array[_index];\\n    }\\n\\n    function length(Data storage _fastArray) public view returns (uint256) {\\n        return _fastArray.length;\\n    }\\n\\n    function contains(\\n        Data storage _fastArray,\\n        uint256 _value\\n    ) public view returns (bool) {\\n        return _fastArray.indexMap[_value] != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1aafe47d78876fe514a190e95a87f4720f33617712c66cf95ab73c6dc3a19f3d\",\"license\":\"UNLICENSED\"},\"src/lib/RankingRedBlackTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// A red-black tree that holds a \\\"count\\\" variable next to the value in the tree.\\n// This library is used to resolve which values should be skipped to respect the _offset when querying from the rank library.\\n// The focal function is \\\"lastByOffset\\\" which starts from the largest value in the tree and traverses backwards to find the\\n// first value that is included in the offset specified and returns it.\\n// The nodes are accessed by a key and other properties can be queried using the key.\\n// This library is a modification of BokkyPooBah's Red-Black Tree Library which has a MIT licence.\\n// Following is the original description and the license:\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n// Here is the license attached to this library:\\n// ----------------------------------------------------------------------------\\n// MIT License\\n//\\n// Copyright (c) 2018 The Officious BokkyPooBah\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n// ----------------------------------------------------------------------------\\nlibrary RankingRedBlackTree {\\n    struct Node {\\n        uint id;\\n        uint value;\\n        uint count;\\n        uint parent;\\n        uint left;\\n        uint right;\\n        bool red;\\n    }\\n\\n    struct Tree {\\n        uint root;\\n        mapping(uint => Node) nodes;\\n        uint counter;\\n    }\\n\\n    uint private constant EMPTY = 0;\\n\\n    function first(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].left != EMPTY) {\\n                _key = self.nodes[_key].left;\\n            }\\n        }\\n    }\\n\\n    function last(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].right != EMPTY) {\\n                _key = self.nodes[_key].right;\\n            }\\n        }\\n    }\\n\\n    function lastByOffset(\\n        Tree storage self,\\n        uint _offset\\n    ) public view returns (uint, uint) {\\n        uint key = last(self);\\n\\n        while (key != EMPTY && _offset > self.nodes[key].count) {\\n            _offset -= self.nodes[key].count;\\n            key = prev(self, key);\\n        }\\n\\n        return (key, _offset);\\n    }\\n\\n    function next(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function find(Tree storage self, uint _value) public view returns (uint) {\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            if (_value == self.nodes[probe].value) {\\n                return probe;\\n            }\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        return EMPTY;\\n    }\\n\\n    function value(Tree storage self, uint _key) public view returns (uint) {\\n        return self.nodes[_key].value;\\n    }\\n\\n    function addToCount(Tree storage self, uint _value, uint amount) internal {\\n        self.nodes[find(self, _value)].count += amount;\\n    }\\n\\n    function minusFromCount(\\n        Tree storage self,\\n        uint _value,\\n        uint amount\\n    ) internal {\\n        self.nodes[find(self, _value)].count -= amount;\\n    }\\n\\n    function insert(Tree storage self, uint _value) internal returns (uint) {\\n        uint cursor = EMPTY;\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.counter += 1;\\n        self.nodes[self.counter] = Node({\\n            id: self.counter,\\n            value: _value,\\n            count: 1,\\n            parent: cursor,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true\\n        });\\n        if (cursor == EMPTY) {\\n            self.root = self.counter;\\n        } else if (_value < self.nodes[cursor].value) {\\n            self.nodes[cursor].left = self.counter;\\n        } else {\\n            self.nodes[cursor].right = self.counter;\\n        }\\n        insertFixup(self, self.counter);\\n        return self.counter;\\n    }\\n\\n    function remove(Tree storage self, uint _value) internal {\\n        uint key = find(self, _value);\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function removeWithKey(Tree storage self, uint key) internal {\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function treeMinimum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].right;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].left;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(self, self.nodes[keyParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[keyParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(Tree storage self, uint a, uint b) private {\\n        uint bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n\",\"keccak256\":\"0x37e4825ff13d1868ec248d4fd3657e1074456733a82079c424ff0f2fe22f7163\",\"license\":\"MIT\"},\"src/lib/SingleRanking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\nimport \\\"./FastArray.sol\\\";\\nimport \\\"./RankingRedBlackTree.sol\\\";\\n\\nlibrary SingleRanking {\\n    using FastArray for FastArray.Data;\\n    using RankingRedBlackTree for RankingRedBlackTree.Tree;\\n\\n    struct Data {\\n        RankingRedBlackTree.Tree tree;\\n        mapping(uint => FastArray.Data) keys;\\n        uint length;\\n    }\\n\\n    function add(Data storage _singleRanking, uint _key, uint _value) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) == 0) {\\n            _singleRanking.tree.insert(_value);\\n        } else {\\n            _singleRanking.tree.addToCount(_value, 1);\\n        }\\n\\n        _singleRanking.keys[_value].insert(_key);\\n\\n        _singleRanking.length += 1;\\n    }\\n\\n    function remove(\\n        Data storage _singleRanking,\\n        uint _key,\\n        uint _value\\n    ) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) > 0) {\\n            keys.remove(_key);\\n\\n            if (FastArray.length(keys) == 0) {\\n                _singleRanking.tree.remove(_value);\\n            } else {\\n                _singleRanking.tree.minusFromCount(_value, 1);\\n            }\\n        }\\n\\n        _singleRanking.length -= 1;\\n    }\\n\\n    function length(Data storage _singleRanking) public view returns (uint) {\\n        return _singleRanking.length;\\n    }\\n\\n    function get(\\n        Data storage _singleRanking,\\n        uint _offset,\\n        uint _count\\n    ) public view returns (uint[] memory) {\\n        require(_count > 0 && _count <= 100, \\\"Count must be between 0 and 100\\\");\\n\\n        uint[] memory result = new uint[](_count);\\n        uint size = 0;\\n        uint id;\\n        (id, _offset) = _singleRanking.tree.lastByOffset(_offset);\\n\\n        while (id != 0) {\\n            uint value = _singleRanking.tree.value(id);\\n            FastArray.Data storage keys = _singleRanking.keys[value];\\n\\n            if (_offset >= FastArray.length(keys)) {\\n                _offset -= FastArray.length(keys);\\n            } else if (FastArray.length(keys) < _offset + _count) {\\n                uint index = FastArray.length(keys) - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n\\n                _count -= FastArray.length(keys) - _offset;\\n                _offset = 0;\\n            } else {\\n                uint index = _offset + _count - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n                // result[size] = value;\\n                break;\\n            }\\n\\n            id = _singleRanking.tree.prev(id);\\n        }\\n\\n        return result;\\n    }\\n\\n    function getNthValue(\\n        Data storage _singleRanking,\\n        uint n\\n    ) public view returns (uint) {\\n        require(n >= 0, \\\"order can not be negative\\\");\\n        (uint256 id, ) = _singleRanking.tree.lastByOffset(n);\\n        uint value = _singleRanking.tree.value(id);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0xd52df0ed7cd8e464f4d174ec44fc86fd157213bdb1f6f029c50966138a018ea0\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001a576108f79081610020823930815050f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081634d63fffd1461016b57508063b102d5fa1461014f5763d7b042ca1461004057600080fd5b604036600319011261010157600435736385827d74AD1879fA80A2246e0374557d558C399060405190630cd87de760e21b82528060048301526024356024830152604082604481865af490811561010e5760209260009261011a575b506044906040519485938492630ff567d560e11b8452600484015260248301525af4801561010e576000906100d7575b602090604051908152f35b506020813d8211610106575b816100f060209383610817565b8101031261010157602090516100cc565b600080fd5b3d91506100e3565b6040513d6000823e3d90fd5b60449192506101409060403d604011610148575b6101388183610817565b810190610867565b50919061009c565b503d61012e565b6020366003190112610101576020600480350154604051908152f35b606036600319011261010157602435906044359182918315158061080c575b156107ca57506101998361084f565b926101a76040519485610817565b8084526101b6601f199161084f565b0136602085013760009060405190630cd87de760e21b825260043560048301526024820152604081604481736385827d74AD1879fA80A2246e0374557d558C395af4801561010e576000916000916107a9575b50815b61025a575b5050505060405180916020820160208352815180915260206040840192019060005b818110610241575050500390f35b8251845285945060209384019390920191600101610233565b604051630ff567d560e11b81526004356004820152826024820152602081604481736385827d74AD1879fA80A2246e0374557d558C395af490811561010e57600091610777575b506000526003600435016020526040600020906040516305f739f960e21b815282600482015260208160248173EDB80829E4ED4b4E6Ff7A178801b78586d279d265af490811561010e57600091610745575b5081106103fc57604051916305f739f960e21b8352600483015260208260248173EDB80829E4ED4b4E6Ff7A178801b78586d279d265af490811561010e576000916103c6575b610343925061088a565b905b60405190631c72755760e01b825260043560048301526024820152602081604481736385827d74AD1879fA80A2246e0374557d558C395af490811561010e57600091610394575b50908161020c565b90506020813d6020116103be575b816103af60209383610817565b8101031261010157518561038c565b3d91506103a2565b90506020823d6020116103f4575b816103e160209383610817565b8101031261010157610343915190610339565b3d91506103d4565b9193906040516305f739f960e21b815281600482015260208160248173EDB80829E4ED4b4E6Ff7A178801b78586d279d265af490811561010e57600091610713575b50610449838561087d565b111561063b576040516305f739f960e21b81526004810182905260208160248173EDB80829E4ED4b4E6Ff7A178801b78586d279d265af490811561010e57600091610609575b50806000198101116105b757600019015b8381101561053a575b50604051906305f739f960e21b8252600482015260208160248173EDB80829E4ED4b4E6Ff7A178801b78586d279d265af490811561010e57600091610506575b506104fd926104f79161088a565b9061088a565b91600090610345565b90506020813d602011610532575b8161052160209383610817565b8101031261010157516104fd6104e9565b3d9150610514565b9091929360405163c9c3102d60e01b815283600482015282602482015260208160448173EDB80829E4ED4b4E6Ff7A178801b78586d279d265af490811561010e576000916105d7575b5061058e8289610897565b52600181018091116105b7579080156105cd5760001981019081116105b75793929190936104a0565b634e487b7160e01b600052601160045260246000fd5b93929190936104a9565b90506020813d602011610601575b816105f260209383610817565b81010312610101575188610583565b3d91506105e5565b90506020813d602011610633575b8161062460209383610817565b8101031261010157518761048f565b3d9150610617565b92919350610649908461087d565b60001992908381019081116105b757915b84831015610669575b50610211565b60405163c9c3102d60e01b815282600482015283602482015260208160448173EDB80829E4ED4b4E6Ff7A178801b78586d279d265af490811561010e576000916106e1575b506106b98288610897565b52600181018091116105b7579180156106dc578381019081116105b7579161065a565b610663565b90506020813d60201161070b575b816106fc60209383610817565b810103126101015751876106ae565b3d91506106ef565b90506020813d60201161073d575b8161072e60209383610817565b8101031261010157518761043e565b3d9150610721565b90506020813d60201161076f575b8161076060209383610817565b810103126101015751876102f3565b3d9150610753565b90506020813d6020116107a1575b8161079260209383610817565b810103126101015751866102a1565b3d9150610785565b90506107c4915060403d604011610148576101388183610817565b85610209565b62461bcd60e51b815260206004820152601f60248201527f436f756e74206d757374206265206265747765656e203020616e6420313030006044820152606490fd5b50606484111561018a565b90601f8019910116810190811067ffffffffffffffff82111761083957604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108395760051b60200190565b9190826040910312610101576020825192015190565b919082018092116105b757565b919082039182116105b757565b80518210156108ab5760209160051b010190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212205c39c3795a124341376b1f24818941e1d37bf7fdd62c52761d3980eadbc573f864736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081634d63fffd1461016b57508063b102d5fa1461014f5763d7b042ca1461004057600080fd5b60403660031901126101015760043573__$64be0ed8cff8e9c74167dfc40251eb2346$__9060405190630cd87de760e21b82528060048301526024356024830152604082604481865af490811561010e5760209260009261011a575b506044906040519485938492630ff567d560e11b8452600484015260248301525af4801561010e576000906100d7575b602090604051908152f35b506020813d8211610106575b816100f060209383610817565b8101031261010157602090516100cc565b600080fd5b3d91506100e3565b6040513d6000823e3d90fd5b60449192506101409060403d604011610148575b6101388183610817565b810190610867565b50919061009c565b503d61012e565b6020366003190112610101576020600480350154604051908152f35b606036600319011261010157602435906044359182918315158061080c575b156107ca57506101998361084f565b926101a76040519485610817565b8084526101b6601f199161084f565b0136602085013760009060405190630cd87de760e21b82526004356004830152602482015260408160448173__$64be0ed8cff8e9c74167dfc40251eb2346$__5af4801561010e576000916000916107a9575b50815b61025a575b5050505060405180916020820160208352815180915260206040840192019060005b818110610241575050500390f35b8251845285945060209384019390920191600101610233565b604051630ff567d560e11b8152600435600482015282602482015260208160448173__$64be0ed8cff8e9c74167dfc40251eb2346$__5af490811561010e57600091610777575b506000526003600435016020526040600020906040516305f739f960e21b815282600482015260208160248173__$f445361e8b50888b0b8cee3fd4db50a783$__5af490811561010e57600091610745575b5081106103fc57604051916305f739f960e21b8352600483015260208260248173__$f445361e8b50888b0b8cee3fd4db50a783$__5af490811561010e576000916103c6575b610343925061088a565b905b60405190631c72755760e01b82526004356004830152602482015260208160448173__$64be0ed8cff8e9c74167dfc40251eb2346$__5af490811561010e57600091610394575b50908161020c565b90506020813d6020116103be575b816103af60209383610817565b8101031261010157518561038c565b3d91506103a2565b90506020823d6020116103f4575b816103e160209383610817565b8101031261010157610343915190610339565b3d91506103d4565b9193906040516305f739f960e21b815281600482015260208160248173__$f445361e8b50888b0b8cee3fd4db50a783$__5af490811561010e57600091610713575b50610449838561087d565b111561063b576040516305f739f960e21b81526004810182905260208160248173__$f445361e8b50888b0b8cee3fd4db50a783$__5af490811561010e57600091610609575b50806000198101116105b757600019015b8381101561053a575b50604051906305f739f960e21b8252600482015260208160248173__$f445361e8b50888b0b8cee3fd4db50a783$__5af490811561010e57600091610506575b506104fd926104f79161088a565b9061088a565b91600090610345565b90506020813d602011610532575b8161052160209383610817565b8101031261010157516104fd6104e9565b3d9150610514565b9091929360405163c9c3102d60e01b815283600482015282602482015260208160448173__$f445361e8b50888b0b8cee3fd4db50a783$__5af490811561010e576000916105d7575b5061058e8289610897565b52600181018091116105b7579080156105cd5760001981019081116105b75793929190936104a0565b634e487b7160e01b600052601160045260246000fd5b93929190936104a9565b90506020813d602011610601575b816105f260209383610817565b81010312610101575188610583565b3d91506105e5565b90506020813d602011610633575b8161062460209383610817565b8101031261010157518761048f565b3d9150610617565b92919350610649908461087d565b60001992908381019081116105b757915b84831015610669575b50610211565b60405163c9c3102d60e01b815282600482015283602482015260208160448173__$f445361e8b50888b0b8cee3fd4db50a783$__5af490811561010e576000916106e1575b506106b98288610897565b52600181018091116105b7579180156106dc578381019081116105b7579161065a565b610663565b90506020813d60201161070b575b816106fc60209383610817565b810103126101015751876106ae565b3d91506106ef565b90506020813d60201161073d575b8161072e60209383610817565b8101031261010157518761043e565b3d9150610721565b90506020813d60201161076f575b8161076060209383610817565b810103126101015751876102f3565b3d9150610753565b90506020813d6020116107a1575b8161079260209383610817565b810103126101015751866102a1565b3d9150610785565b90506107c4915060403d604011610148576101388183610817565b85610209565b62461bcd60e51b815260206004820152601f60248201527f436f756e74206d757374206265206265747765656e203020616e6420313030006044820152606490fd5b50606484111561018a565b90601f8019910116810190811067ffffffffffffffff82111761083957604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108395760051b60200190565b9190826040910312610101576020825192015190565b919082018092116105b757565b919082039182116105b757565b80518210156108ab5760209160051b010190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212205c39c3795a124341376b1f24818941e1d37bf7fdd62c52761d3980eadbc573f864736f6c63430008110033",
  "libraries": {
    "FastArray": "0xEDB80829E4ED4b4E6Ff7A178801b78586d279d26",
    "RankingRedBlackTree": "0x6385827d74AD1879fA80A2246e0374557d558C39"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}