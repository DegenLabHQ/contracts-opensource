{
  "address": "0x20831a1b5Ad13A98deDA137D66Ffa9b4168B1C3C",
  "abi": [
    {
      "inputs": [],
      "name": "ValueOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "_tranformWeiToDecimal2",
      "outputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "b",
          "type": "bytes32"
        }
      ],
      "name": "_transformBytes32Seed",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "_transformUint256",
      "outputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "lifeScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "age",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "creator",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "renderSvg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "lifeScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "age",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "creatorName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "renderTrait",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4cb51c9e5bbc4b92dcbbe9469ae4a3c3d150e7e75881044433deea67e616b0e",
  "receipt": {
    "to": null,
    "from": "0xe0B4c9C36f5A5D0Ff3A547FeaBB6BC9Ba65805F2",
    "contractAddress": "0x20831a1b5Ad13A98deDA137D66Ffa9b4168B1C3C",
    "transactionIndex": 5,
    "gasUsed": "1302442",
    "logsBloom": "0x
    "blockHash": "0x8bbc60da993000cfefccd9f8bbfaba963a58bc17b32468c12fcbf628ad8b7eb0",
    "transactionHash": "0xa4cb51c9e5bbc4b92dcbbe9469ae4a3c3d150e7e75881044433deea67e616b0e",
    "logs": [],
    "blockNumber": 28068401,
    "cumulativeGasUsed": "1784351",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "818ee8c4cdc293cfe73b4da023c4e77e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ValueOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_tranformWeiToDecimal2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"_transformBytes32Seed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_transformUint256\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lifeScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creator\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"renderSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lifeScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"renderTrait\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/Renderer.sol\":\"Renderer\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363738383932383239343530\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMapsUpgradeable {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x93282769cdd2804524608a8a23f6d42b888ec0acb36eabd1d5f84b2bf1f374f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"src/PortalLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\nimport {IRebornDefination} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {RewardVault} from \\\"src/RewardVault.sol\\\";\\n\\nlibrary PortalLib {\\n    uint256 public constant PERSHARE_BASE = 10e18;\\n    // percentage base of refer reward fees\\n    uint256 public constant PERCENTAGE_BASE = 10000;\\n\\n    enum RewardType {\\n        NativeToken,\\n        RebornToken\\n    }\\n\\n    struct ReferrerRewardFees {\\n        uint16 incarnateRef1Fee;\\n        uint16 incarnateRef2Fee;\\n        uint16 vaultRef1Fee;\\n        uint16 vaultRef2Fee;\\n        uint192 _slotPlaceholder;\\n    }\\n\\n    struct Pool {\\n        uint256 totalAmount;\\n        uint256 accRebornPerShare;\\n        uint256 accNativePerShare;\\n        uint256 epoch;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct Portfolio {\\n        uint256 accumulativeAmount;\\n        uint256 rebornRewardDebt;\\n        uint256 nativeRewardDebt;\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (Amount * pool.accPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user infuse or switchPool. Here's what happens:\\n        //   1. The pool's `accPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n\\n        /// @dev reward for holding the NFT when the NFT is selected\\n        uint256 pendingOwnerRebornReward;\\n        uint256 pendingOwnerNativeReward;\\n    }\\n\\n    struct AirdropConf {\\n        uint8 _dropOn; //                  ---\\n        uint40 _rebornDropInterval; //        |\\n        uint40 _nativeDropInterval; //        |\\n        uint40 _rebornDropLastUpdate; //      |\\n        uint40 _nativeDropLastUpdate; //      |\\n        uint16 _nativeTopDropRatio; //        |\\n        uint16 _nativeRaffleDropRatio; //   |\\n        uint16 _rebornTopEthAmount; // |\\n        uint40 _rebornRaffleEthAmount; //    ---\\n    }\\n\\n    struct VrfConf {\\n        bytes32 keyHash;\\n        uint64 s_subscriptionId;\\n        uint32 callbackGasLimit;\\n        uint32 numWords;\\n        uint16 requestConfirmations;\\n    }\\n\\n    event DropNative(uint256 indexed tokenId);\\n    event DropReborn(uint256 indexed tokenId);\\n    event ClaimRebornDrop(uint256 indexed tokenId, uint256 rebornAmount);\\n    event ClaimNativeDrop(uint256 indexed tokenId, uint256 nativeAmount);\\n    event NewDropConf(AirdropConf conf);\\n    event NewVrfConf(VrfConf conf);\\n    event SignerUpdate(address signer, bool valid);\\n    event ReferReward(\\n        address indexed user,\\n        address indexed ref1,\\n        uint256 amount1,\\n        address indexed ref2,\\n        uint256 amount2,\\n        PortalLib.RewardType rewardType\\n    );\\n\\n    function _claimPoolRebornDrop(\\n        uint256 tokenId,\\n        RewardVault vault,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        Pool storage pool = _seasonData.pools[tokenId];\\n        Portfolio storage portfolio = _seasonData.portfolios[msg.sender][\\n            tokenId\\n        ];\\n\\n        if (portfolio.accumulativeAmount == 0) {\\n            return;\\n        }\\n\\n        uint256 pendingReborn = (portfolio.accumulativeAmount *\\n            pool.accRebornPerShare) /\\n            PERSHARE_BASE -\\n            portfolio.rebornRewardDebt +\\n            portfolio.pendingOwnerRebornReward;\\n\\n        // set current amount as debt\\n        portfolio.rebornRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accRebornPerShare) /\\n            PERSHARE_BASE;\\n\\n        // clean up reward as owner\\n        portfolio.pendingOwnerRebornReward = 0;\\n\\n        /// @dev send drop\\n        if (pendingReborn != 0) {\\n            vault.reward(msg.sender, pendingReborn);\\n        }\\n\\n        emit ClaimRebornDrop(tokenId, pendingReborn);\\n    }\\n\\n    function _claimPoolNativeDrop(\\n        uint256 tokenId,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        Pool storage pool = _seasonData.pools[tokenId];\\n        Portfolio storage portfolio = _seasonData.portfolios[msg.sender][\\n            tokenId\\n        ];\\n\\n        if (portfolio.accumulativeAmount == 0) {\\n            return;\\n        }\\n\\n        uint256 pendingNative = (portfolio.accumulativeAmount *\\n            pool.accNativePerShare) /\\n            PERSHARE_BASE -\\n            portfolio.nativeRewardDebt +\\n            portfolio.pendingOwnerNativeReward;\\n\\n        // set current amount as debt\\n        portfolio.nativeRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accNativePerShare) /\\n            PERSHARE_BASE;\\n\\n        // clean up reward as owner\\n        portfolio.pendingOwnerNativeReward = 0;\\n\\n        /// @dev send drop\\n        if (pendingNative != 0) {\\n            payable(msg.sender).transfer(pendingNative);\\n\\n            emit ClaimNativeDrop(tokenId, pendingNative);\\n        }\\n    }\\n\\n    function _flattenRewardDebt(\\n        Pool storage pool,\\n        Portfolio storage portfolio\\n    ) external {\\n        // flatten native reward\\n        portfolio.nativeRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accNativePerShare) /\\n            PERSHARE_BASE;\\n\\n        // flatten reborn reward\\n        portfolio.rebornRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accRebornPerShare) /\\n            PERSHARE_BASE;\\n    }\\n\\n    /**\\n     * @dev calculate drop from a pool\\n     */\\n    function _calculatePoolDrop(\\n        uint256 tokenId,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) public view returns (uint256 pendingNative, uint256 pendingReborn) {\\n        Pool storage pool = _seasonData.pools[tokenId];\\n        Portfolio storage portfolio = _seasonData.portfolios[msg.sender][\\n            tokenId\\n        ];\\n\\n        // if no portfolio, no pending reward\\n        if (portfolio.accumulativeAmount == 0) {\\n            return (pendingNative, pendingReborn);\\n        }\\n\\n        pendingNative =\\n            (portfolio.accumulativeAmount * pool.accNativePerShare) /\\n            PERSHARE_BASE -\\n            portfolio.nativeRewardDebt +\\n            portfolio.pendingOwnerNativeReward;\\n\\n        pendingReborn =\\n            (portfolio.accumulativeAmount * pool.accRebornPerShare) /\\n            PERSHARE_BASE -\\n            portfolio.rebornRewardDebt +\\n            portfolio.pendingOwnerRebornReward;\\n    }\\n\\n    /**\\n     * @dev read pending reward from specific pool\\n     * @param tokenIds tokenId array of the pools\\n     */\\n    function _pendingDrop(\\n        IRebornDefination.SeasonData storage _seasonData,\\n        uint256[] memory tokenIds\\n    ) external view returns (uint256 pNative, uint256 pReborn) {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            (uint256 n, uint256 r) = _calculatePoolDrop(\\n                tokenIds[i],\\n                _seasonData\\n            );\\n            pNative += n;\\n            pReborn += r;\\n        }\\n    }\\n\\n    function _directDropNativeToTopTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            // if tokenId is zero , return\\n            if (tokenId == 0) {\\n                return;\\n            }\\n\\n            Pool storage pool = _seasonData.pools[tokenId];\\n\\n            // if no one tribute, return\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            uint256 dropAmount = (_dropConf._nativeTopDropRatio *\\n                _seasonData._jackpot) / PERCENTAGE_BASE;\\n\\n            // 80% to pool\\n            pool.accNativePerShare +=\\n                (4 * dropAmount * PERSHARE_BASE) /\\n                (5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = _seasonData.portfolios[owner][\\n                tokenId\\n            ];\\n            portfolio.pendingOwnerNativeReward += (dropAmount * 1) / 5;\\n\\n            emit DropNative(tokenId);\\n        }\\n    }\\n\\n    function _directDropNativeToRaffleTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            // if tokenId is zero , return\\n            if (tokenId == 0) {\\n                return;\\n            }\\n\\n            Pool storage pool = _seasonData.pools[tokenId];\\n\\n            // if no one tribute, return\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            uint256 dropAmount = (_dropConf._nativeRaffleDropRatio *\\n                _seasonData._jackpot) / PERCENTAGE_BASE;\\n\\n            // 80% to pool\\n            pool.accNativePerShare +=\\n                (4 * dropAmount * PERSHARE_BASE) /\\n                (5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = _seasonData.portfolios[owner][\\n                tokenId\\n            ];\\n            portfolio.pendingOwnerNativeReward += (dropAmount * 1) / 5;\\n\\n            emit DropNative(tokenId);\\n        }\\n    }\\n\\n    function _directDropRebornToTopTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            // if tokenId is zero, continue\\n            if (tokenId == 0) {\\n                return;\\n            }\\n            Pool storage pool = _seasonData.pools[tokenId];\\n\\n            // if no one tribute, continue\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            uint256 dropAmount = uint256(_dropConf._rebornTopEthAmount) *\\n                1 ether;\\n\\n            // 80% to pool\\n            pool.accRebornPerShare +=\\n                (dropAmount * 4 * PortalLib.PERSHARE_BASE) /\\n                (5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = _seasonData.portfolios[owner][\\n                tokenId\\n            ];\\n            portfolio.pendingOwnerRebornReward += (dropAmount * 1) / 5;\\n\\n            emit DropReborn(tokenId);\\n        }\\n    }\\n\\n    function _directDropRebornToRaffleTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            // if tokenId is zero, continue\\n            if (tokenId == 0) {\\n                return;\\n            }\\n            Pool storage pool = _seasonData.pools[tokenId];\\n\\n            // if no one tribute, continue\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            uint256 dropAmount = uint256(_dropConf._rebornRaffleEthAmount) *\\n                1 ether;\\n\\n            // 80% to pool\\n            pool.accRebornPerShare +=\\n                (dropAmount * 4 * PortalLib.PERSHARE_BASE) /\\n                (5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = _seasonData.portfolios[owner][\\n                tokenId\\n            ];\\n            portfolio.pendingOwnerRebornReward += (dropAmount * 1) / 5;\\n\\n            emit DropReborn(tokenId);\\n        }\\n    }\\n\\n    function _toLastHour(uint256 timestamp) internal pure returns (uint256) {\\n        return timestamp - (timestamp % (1 hours));\\n    }\\n\\n    /**\\n     * @dev update signers\\n     * @param toAdd list of to be added signer\\n     * @param toRemove list of to be removed signer\\n     */\\n    function _updateSigners(\\n        mapping(address => bool) storage signers,\\n        address[] calldata toAdd,\\n        address[] calldata toRemove\\n    ) public {\\n        for (uint256 i = 0; i < toAdd.length; i++) {\\n            signers[toAdd[i]] = true;\\n            emit SignerUpdate(toAdd[i], true);\\n        }\\n        for (uint256 i = 0; i < toRemove.length; i++) {\\n            delete signers[toRemove[i]];\\n            emit SignerUpdate(toRemove[i], false);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns referrer and referer reward\\n     * @return ref1  level1 of referrer. direct referrer\\n     * @return ref1Reward  level 1 referrer reward\\n     * @return ref2  level2 of referrer. referrer's referrer\\n     * @return ref2Reward  level 2 referrer reward\\n     */\\n    function _calculateReferReward(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        address account,\\n        uint256 amount,\\n        RewardType rewardType,\\n        uint256 extraReward\\n    )\\n        public\\n        view\\n        returns (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        )\\n    {\\n        ref1 = referrals[account];\\n        ref2 = referrals[ref1];\\n\\n        if (rewardType == RewardType.NativeToken) {\\n            ref1Reward = ref1 == address(0)\\n                ? 0\\n                : (amount * rewardFees.incarnateRef1Fee) /\\n                    PortalLib.PERCENTAGE_BASE;\\n            ref2Reward = ref2 == address(0)\\n                ? 0\\n                : (amount * rewardFees.incarnateRef2Fee) /\\n                    PortalLib.PERCENTAGE_BASE;\\n        }\\n\\n        if (rewardType == RewardType.RebornToken) {\\n            ref1Reward = ref1 == address(0)\\n                ? 0\\n                : extraReward +\\n                    (amount * rewardFees.vaultRef1Fee) /\\n                    PortalLib.PERCENTAGE_BASE;\\n            ref2Reward = ref2 == address(0)\\n                ? 0\\n                : (amount * rewardFees.vaultRef2Fee) /\\n                    PortalLib.PERCENTAGE_BASE;\\n        }\\n    }\\n\\n    /**\\n     * @notice mul 100 when set. eg: 8% -> 800 18%-> 1800\\n     * @dev set percentage of referrer reward\\n     * @param rewardType 0: incarnate reward 1: engrave reward\\n     */\\n    function _setReferrerRewardFee(\\n        ReferrerRewardFees storage rewardFees,\\n        uint16 refL1Fee,\\n        uint16 refL2Fee,\\n        PortalLib.RewardType rewardType\\n    ) external {\\n        if (rewardType == PortalLib.RewardType.NativeToken) {\\n            rewardFees.incarnateRef1Fee = refL1Fee;\\n            rewardFees.incarnateRef2Fee = refL2Fee;\\n        } else if (rewardType == PortalLib.RewardType.RebornToken) {\\n            rewardFees.vaultRef1Fee = refL1Fee;\\n            rewardFees.vaultRef2Fee = refL2Fee;\\n        }\\n    }\\n\\n    /**\\n     * @dev send NativeToken to referrers\\n     */\\n    function _sendRewardToRefs(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        address account,\\n        uint256 amount\\n    ) public {\\n        (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        ) = _calculateReferReward(\\n                referrals,\\n                rewardFees,\\n                account,\\n                amount,\\n                PortalLib.RewardType.NativeToken,\\n                0\\n            );\\n\\n        if (ref1Reward > 0) {\\n            payable(ref1).transfer(ref1Reward);\\n        }\\n\\n        if (ref2Reward > 0) {\\n            payable(ref2).transfer(ref2Reward);\\n        }\\n\\n        emit ReferReward(\\n            account,\\n            ref1,\\n            ref1Reward,\\n            ref2,\\n            ref2Reward,\\n            PortalLib.RewardType.NativeToken\\n        );\\n    }\\n\\n    /**\\n     * @dev vault $REBORN token to referrers\\n     */\\n    function _vaultRewardToRefs(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        RewardVault vault,\\n        address account,\\n        uint256 amount,\\n        uint256 extraReward\\n    ) public {\\n        (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        ) = _calculateReferReward(\\n                referrals,\\n                rewardFees,\\n                account,\\n                amount,\\n                PortalLib.RewardType.RebornToken,\\n                extraReward\\n            );\\n\\n        if (ref1Reward > 0) {\\n            vault.reward(ref1, ref1Reward);\\n        }\\n\\n        if (ref2Reward > 0) {\\n            vault.reward(ref2, ref2Reward);\\n        }\\n\\n        emit ReferReward(\\n            account,\\n            ref1,\\n            ref1Reward,\\n            ref2,\\n            ref2Reward,\\n            PortalLib.RewardType.RebornToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdaa24ce7b33a3707d415a14b9e341ca0c13ec028721edede9cefc04c06c7d251\",\"license\":\"GPL-3.0\"},\"src/RewardVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IRewardVault} from \\\"src/interfaces/IRewardVault.sol\\\";\\n\\ncontract RewardVault is IRewardVault, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable rebornToken;\\n\\n    constructor(address owner_, address rebornToken_) {\\n        if (rebornToken_ == address(0)) revert ZeroAddressSet();\\n        _transferOwnership(owner_);\\n        rebornToken = rebornToken_;\\n    }\\n\\n    /**\\n     * @notice Send reward to user\\n     * @param to The address of awards\\n     * @param amount number of awards\\n     */\\n    function reward(\\n        address to,\\n        uint256 amount\\n    ) external virtual override onlyOwner {\\n        IERC20(rebornToken).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice withdraw token Emergency\\n     */\\n    function withdrawEmergency(address to) external virtual override onlyOwner {\\n        if (to == address(0)) revert ZeroAddressSet();\\n        IERC20(rebornToken).safeTransfer(\\n            to,\\n            IERC20(rebornToken).balanceOf(address(this))\\n        );\\n        emit WithdrawEmergency(\\n            rebornToken,\\n            IERC20(rebornToken).balanceOf(address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x630c746afc9d06768752c0eb57c5084aca185ebe9f22eba1e2a735523006b699\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRebornPortal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {PortalLib} from \\\"src/PortalLib.sol\\\";\\nimport {SingleRanking} from \\\"src/lib/SingleRanking.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\n\\ninterface IRebornDefination {\\n    struct Innate {\\n        uint256 talentPrice;\\n        uint256 propertyPrice;\\n    }\\n\\n    struct LifeDetail {\\n        bytes32 seed;\\n        address creator;\\n        uint16 age;\\n        uint32 round;\\n        uint48 nothing;\\n        uint128 cost;\\n        uint128 reward;\\n        uint256 score;\\n        string creatorName;\\n    }\\n\\n    struct SeasonData {\\n        mapping(uint256 => PortalLib.Pool) pools;\\n        /// @dev user address => pool tokenId => Portfolio\\n        mapping(address => mapping(uint256 => PortalLib.Portfolio)) portfolios;\\n        SingleRanking.Data _tributeRank;\\n        SingleRanking.Data _scoreRank;\\n        mapping(uint256 => uint256) _oldStakeAmounts;\\n        /// tokenId => bool\\n        BitMapsUpgradeable.BitMap _isTopHundredScore;\\n        // the value of minimum score\\n        uint256 _minScore;\\n        // jackpot of this season\\n        uint256 _jackpot;\\n    }\\n\\n    enum AirdropVrfType {\\n        Invalid,\\n        DropReborn,\\n        DropNative\\n    }\\n\\n    struct RequestStatus {\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        bool executed; // whether the airdrop is executed\\n        AirdropVrfType t;\\n        uint256[] randomWords;\\n    }\\n\\n    event Incarnate(\\n        address indexed user,\\n        uint256 indexed talentPrice,\\n        uint256 indexed PropertyPrice,\\n        uint256 soupPrice\\n    );\\n\\n    event Engrave(\\n        bytes32 indexed seed,\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        uint256 score,\\n        uint256 reward\\n    );\\n\\n    event Infuse(address indexed user, uint256 indexed tokenId, uint256 amount);\\n\\n    event Dry(address indexed user, uint256 indexed tokenId, uint256 amount);\\n\\n    event Baptise(address indexed user, uint256 amount);\\n\\n    event NewSoupPrice(uint256 price);\\n\\n    event Refer(address referee, address referrer);\\n\\n    event DecreaseFromPool(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    event IncreaseToPool(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    event Drop(uint256[] tokenIds);\\n\\n    /// @dev event about the vault address is set\\n    event VaultSet(address rewardVault);\\n\\n    event NewSeason(uint256);\\n\\n    event NewExtraReward(uint256 extraReward);\\n\\n    event BetaStageSet(bool);\\n\\n    event NewIncarnationLimit(uint256 limit);\\n\\n    /// @dev revert when msg.value is insufficient\\n    error InsufficientAmount();\\n    /// @dev revert when to caller is not signer\\n    error NotSigner();\\n\\n    /// @dev revert when some address var are set to zero\\n    error ZeroAddressSet();\\n\\n    /// @dev revert when the random seed is duplicated\\n    error SameSeed();\\n\\n    /// @dev revert if burnPool address not set when infuse\\n    error NotSetBurnPoolAddress();\\n\\n    /// @dev revert when the drop is not on\\n    error DropOff();\\n\\n    /// @dev revert when the status is beta\\n    error InBeta();\\n\\n    /// @dev revert when incarnation count exceed limit\\n    error IncarnationExceedLimit();\\n}\\n\\ninterface IRebornPortal is IRebornDefination {\\n    /**\\n     * @dev user buy the innate for the life\\n     * @param innate talent and property choice\\n     * @param referrer the referrer address\\n     */\\n    function incarnate(\\n        Innate memory innate,\\n        address referrer,\\n        uint256 soupPrice\\n    ) external payable;\\n\\n    /**\\n     * @dev engrave the result on chain and reward\\n     * @param seed random seed in bytes32\\n     * @param user user address\\n     * @param reward $REBORN user earns, decimal 10^18\\n     * @param score life score\\n     * @param cost user cost for this life\\n     */\\n    function engrave(\\n        bytes32 seed,\\n        address user,\\n        uint256 reward,\\n        uint256 score,\\n        uint256 age,\\n        uint256 cost,\\n        string calldata creatorName\\n    ) external;\\n\\n    /**\\n     * @dev reward for share the game\\n     * @param user user address\\n     * @param amount amount for reward\\n     */\\n    function baptise(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev stake $REBORN on this tombstone\\n     * @param tokenId tokenId of the life to stake\\n     * @param amount stake amount, decimal 10^18\\n     */\\n    function infuse(uint256 tokenId, uint256 amount) external;\\n\\n    /**\\n     * @dev stake $REBORN with permit\\n     * @param tokenId tokenId of the life to stake\\n     * @param amount amount of $REBORN to stake\\n     * @param permitAmount amount of $REBORN to approve\\n     * @param r r of signature\\n     * @param s v of signature\\n     * @param v v of signature\\n     */\\n    function infuse(\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 permitAmount,\\n        uint256 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external;\\n\\n    /**\\n     * @dev switch stake amount from poolFrom to poolTo\\n     * @param fromTokenId tokenId of from pool\\n     * @param toTokenId tokenId of to pool\\n     * @param amount amount to switch\\n     */\\n    function switchPool(\\n        uint256 fromTokenId,\\n        uint256 toTokenId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev set new airdrop config\\n     */\\n    function setDropConf(PortalLib.AirdropConf calldata conf) external;\\n\\n    /**\\n     * @dev set new chainlink vrf v2 config\\n     */\\n    function setVrfConf(PortalLib.VrfConf calldata conf) external;\\n\\n    /**\\n     * @dev user claim many pools' native token airdrop\\n     * @param tokenIds pools' tokenId array to claim\\n     */\\n    function claimNativeDrops(uint256[] calldata tokenIds) external;\\n\\n    /**\\n     * @dev user claim many pools' reborn token airdrop\\n     * @param tokenIds pools' tokenId array to claim\\n     */\\n    function claimRebornDrops(uint256[] calldata tokenIds) external;\\n\\n    /**\\n     * @dev user claim many pools' airdrop\\n     * @param tokenIds pools' tokenId array to claim\\n     */\\n    function claimDrops(uint256[] calldata tokenIds) external;\\n\\n    /**\\n     * @dev switch to next season, call by owner\\n     */\\n    function toNextSeason() external;\\n\\n    /**\\n     * @dev set the stage to beta to disable some func\\n     */\\n    function setBeta(bool isBeta_) external;\\n}\\n\",\"keccak256\":\"0x72dc95d06bcdbad5495c7ade0215a5ec16bfc6ad35c2bf7861fd8ea2d3eed2eb\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRewardVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IRewardVault {\\n    error ZeroAddressSet();\\n    \\n    function reward(address to, uint256 amount) external; // send reward\\n\\n    function withdrawEmergency(address to) external;\\n\\n    event WithdrawEmergency(address p12Token, uint256 amount);\\n}\\n\",\"keccak256\":\"0x45f05e6c373a4bb604ed8f894b77dd363c40bfb9ec171ec720893bb7e39bd45a\",\"license\":\"GPL-3.0\"},\"src/lib/FastArray.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// A simple array that supports insert and removal.\\n// The values are assumed to be unique and the library is meant to be lightweight.\\n// So when calling insert or remove, the caller is responsible to know whether a value already exists in the array or not.\\nlibrary FastArray {\\n    struct Data {\\n        mapping(uint256 => uint256) array;\\n        mapping(uint256 => uint256) indexMap;\\n        uint256 length;\\n    }\\n\\n    /**\\n     * @notice please confirm no eq item exist before insert\\n     */\\n    function insert(Data storage _fastArray, uint256 _value) internal {\\n        _fastArray.array[_fastArray.length] = _value;\\n        _fastArray.indexMap[_value] = _fastArray.length;\\n        _fastArray.length += 1;\\n    }\\n\\n    /**\\n     * @dev remove item from array,but not keep rest item sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function remove(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        _fastArray.array[index] = _fastArray.array[_fastArray.length - 1];\\n        delete _fastArray.indexMap[_value];\\n        delete _fastArray.array[_fastArray.length - 1];\\n\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @dev remove item and keep rest item in sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function removeKeepSort(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        uint256 tempLastItem = _fastArray.array[_fastArray.length - 1];\\n\\n        for (uint256 i = index; i < _fastArray.length - 1; i++) {\\n            _fastArray.indexMap[_fastArray.array[i + 1]] = i;\\n            _fastArray.array[i] = _fastArray.array[i + 1];\\n        }\\n\\n        delete _fastArray.indexMap[tempLastItem];\\n        delete _fastArray.array[_fastArray.length - 1];\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @notice PLease confirm index is not out of bounds\\n     */\\n    function get(\\n        Data storage _fastArray,\\n        uint256 _index\\n    ) public view returns (uint256) {\\n        return _fastArray.array[_index];\\n    }\\n\\n    function length(Data storage _fastArray) public view returns (uint256) {\\n        return _fastArray.length;\\n    }\\n\\n    function contains(\\n        Data storage _fastArray,\\n        uint256 _value\\n    ) public view returns (bool) {\\n        return _fastArray.indexMap[_value] != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1aafe47d78876fe514a190e95a87f4720f33617712c66cf95ab73c6dc3a19f3d\",\"license\":\"UNLICENSED\"},\"src/lib/RankingRedBlackTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// A red-black tree that holds a \\\"count\\\" variable next to the value in the tree.\\n// This library is used to resolve which values should be skipped to respect the _offset when querying from the rank library.\\n// The focal function is \\\"lastByOffset\\\" which starts from the largest value in the tree and traverses backwards to find the\\n// first value that is included in the offset specified and returns it.\\n// The nodes are accessed by a key and other properties can be queried using the key.\\n// This library is a modification of BokkyPooBah's Red-Black Tree Library which has a MIT licence.\\n// Following is the original description and the license:\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n// Here is the license attached to this library:\\n// ----------------------------------------------------------------------------\\n// MIT License\\n//\\n// Copyright (c) 2018 The Officious BokkyPooBah\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n// ----------------------------------------------------------------------------\\nlibrary RankingRedBlackTree {\\n    struct Node {\\n        uint id;\\n        uint value;\\n        uint count;\\n        uint parent;\\n        uint left;\\n        uint right;\\n        bool red;\\n    }\\n\\n    struct Tree {\\n        uint root;\\n        mapping(uint => Node) nodes;\\n        uint counter;\\n    }\\n\\n    uint private constant EMPTY = 0;\\n\\n    function first(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].left != EMPTY) {\\n                _key = self.nodes[_key].left;\\n            }\\n        }\\n    }\\n\\n    function last(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].right != EMPTY) {\\n                _key = self.nodes[_key].right;\\n            }\\n        }\\n    }\\n\\n    function lastByOffset(\\n        Tree storage self,\\n        uint _offset\\n    ) public view returns (uint, uint) {\\n        uint key = last(self);\\n\\n        while (key != EMPTY && _offset > self.nodes[key].count) {\\n            _offset -= self.nodes[key].count;\\n            key = prev(self, key);\\n        }\\n\\n        return (key, _offset);\\n    }\\n\\n    function next(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function find(Tree storage self, uint _value) public view returns (uint) {\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            if (_value == self.nodes[probe].value) {\\n                return probe;\\n            }\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        return EMPTY;\\n    }\\n\\n    function value(Tree storage self, uint _key) public view returns (uint) {\\n        return self.nodes[_key].value;\\n    }\\n\\n    function addToCount(Tree storage self, uint _value, uint amount) internal {\\n        self.nodes[find(self, _value)].count += amount;\\n    }\\n\\n    function minusFromCount(\\n        Tree storage self,\\n        uint _value,\\n        uint amount\\n    ) internal {\\n        self.nodes[find(self, _value)].count -= amount;\\n    }\\n\\n    function insert(Tree storage self, uint _value) internal returns (uint) {\\n        uint cursor = EMPTY;\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.counter += 1;\\n        self.nodes[self.counter] = Node({\\n            id: self.counter,\\n            value: _value,\\n            count: 1,\\n            parent: cursor,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true\\n        });\\n        if (cursor == EMPTY) {\\n            self.root = self.counter;\\n        } else if (_value < self.nodes[cursor].value) {\\n            self.nodes[cursor].left = self.counter;\\n        } else {\\n            self.nodes[cursor].right = self.counter;\\n        }\\n        insertFixup(self, self.counter);\\n        return self.counter;\\n    }\\n\\n    function remove(Tree storage self, uint _value) internal {\\n        uint key = find(self, _value);\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function removeWithKey(Tree storage self, uint key) internal {\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function treeMinimum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].right;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].left;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(self, self.nodes[keyParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[keyParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(Tree storage self, uint a, uint b) private {\\n        uint bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n\",\"keccak256\":\"0x37e4825ff13d1868ec248d4fd3657e1074456733a82079c424ff0f2fe22f7163\",\"license\":\"MIT\"},\"src/lib/RenderConstant.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary RenderConstant {\\n    string internal constant _P1 =\\n        '<svg width=\\\"1244\\\" height=\\\"704\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><path d=\\\"M2.5 701.5V95.051L97.02 2.5H1241.5v699H2.5z\\\" fill=\\\"url(#prefix__p0)\\\" stroke=\\\"url(#prefix__p1)\\\" stroke-width=\\\"5\\\"/><path d=\\\"M1240 10H86.11v2.346H1240V10zM76.727 19.384H1240v2.346H76.727v-2.346zM4 169.529h1236v2.346H4v-2.346zM1240 56.92H39.19v2.346H1240V56.92zM4 207.066h1236v2.346H4v-2.346zM1240 94.457H4v2.346h1236v-2.346zM4 329.059h1236v2.346H4v-2.346zM1240 244.602H4v2.346h1236v-2.346zM4 131.993h1236v2.346H4v-2.346zM1240 282.138H4v2.346h1236v-2.346zM57.959 38.152H1240v2.346H57.959v-2.346zM1240 188.298H4v2.346h1236v-2.346zM20.422 75.689H1240v2.346H20.422v-2.346zM1240 310.291H4v2.346h1236v-2.346zM4 225.834h1236v2.346H4v-2.346zM1240 113.225H4v2.346h1236v-2.346zM4 263.37h1236v2.346H4v-2.346zM1240 150.761H4v2.346h1236v-2.346zM4 300.907h1236v2.346H4v-2.346zM4 160.145h1236v2.346H4v-2.346zM1240 47.536H48.574v2.346H1240v-2.346zM4 197.682h1236v2.346H4v-2.346zM1240 85.073H11.038v2.346H1240v-2.346zM4 319.675h1236v2.346H4v-2.346zM1240 235.218H4v2.346h1236v-2.346zM4 122.609h1236v2.346H4v-2.346zM1240 272.754H4v2.346h1236v-2.346zM67.343 28.768H1240v2.346H67.343v-2.346zM1240 178.913H4v2.347h1236v-2.347zM29.806 66.305H1240v2.345H29.806v-2.346zM1240 216.45H4v2.346h1236v-2.346zM4 103.841h1236v2.346H4v-2.346zM1240 338.443H4v2.346h1236v-2.346zM4 253.986h1236v2.346H4v-2.346zM1240 141.377H4v2.346h1236v-2.346zM4 291.522h1236v2.346H4v-2.346zM4 347.827h1236v2.346H4v-2.346zM1240 357.211H4v2.346h1236v-2.346zM1240 507.356H4v2.346h1236v-2.346zM4 394.747h1236v2.346H4v-2.346zM1240 544.893H4v2.346h1236v-2.346zM4 432.284h1236v2.346H4v-2.346zM1240 666.886H4v2.346h1236v-2.346zM4 582.429h1236v2.346H4v-2.346zM1240 469.82H4v2.346h1236v-2.346zM4 619.965h1236v2.346H4v-2.346zM1240 375.979H4v2.346h1236v-2.346zM4 526.125h1236v2.346H4v-2.346zM1240 413.516H4v2.346h1236v-2.346zM4 648.118h1236v2.346H4v-2.346zM1240 563.661H4v2.346h1236v-2.346zM4 451.052h1236v2.346H4v-2.346zM1240 601.197H4v2.346h1236v-2.346zM4 488.588h1236v2.346H4v-2.346zM1240 638.734H4v2.346h1236v-2.346zM1240 497.972H4v2.346h1236v-2.346zM4 385.363h1236v2.346H4v-2.346zM1240 535.509H4v2.346h1236v-2.346zM4 422.9h1236v2.346H4V422.9zM1240 657.502H4v2.346h1236v-2.346zM4 573.045h1236v2.346H4v-2.346zM1240 460.436H4v2.346h1236v-2.346zM4 610.581h1236v2.346H4v-2.346zM1240 366.595H4v2.346h1236v-2.346zM4 516.74h1236v2.346H4v-2.346zM1240 404.131H4v2.347h1236v-2.347zM4 554.277h1236v2.346H4v-2.346zM1240 441.668H4v2.346h1236v-2.346zM4 676.27h1236v2.346H4v-2.346zM1240 685.654H4V688h1236v-2.346zM4 591.813h1236v2.346H4v-2.346zM1240 479.204H4v2.346h1236v-2.346zM4 629.349h1236v2.346H4v-2.346z\\\" fill=\\\"url(#prefix__p2)\\\"/><path d=\\\"M1244 12V0H96L0 94v18L102 12h1142z\\\" fill=\\\"#F98701\\\"/><text dx=\\\"76\\\" dy=\\\"605\\\" dominant-baseline=\\\"central\\\" style=\\\"height:100px\\\" font-family=\\\"VT323\\\" textLength=\\\"1075\\\" font-size=\\\"60\\\" fill=\\\"#FF8A01\\\">Seed: ';\\n    string internal constant _P2 =\\n        '</text><text dx=\\\"76\\\" dy=\\\"116\\\" dominant-baseline=\\\"central\\\" font-family=\\\"Black Ops One\\\" textLength=\\\"300\\\" font-weight=\\\"400\\\" font-size=\\\"60\\\" fill=\\\"#FF8A01\\\">LifeScore</text><text dx=\\\"76\\\" dy=\\\"230\\\" dominant-baseline=\\\"central\\\" font-family=\\\"Black Ops One\\\" font-weight=\\\"400\\\" font-size=\\\"120\\\" fill=\\\"#FF8A01\\\">';\\n    string internal constant _P3 =\\n        '</text><text dx=\\\"697\\\" dy=\\\"425\\\" dominant-baseline=\\\"central\\\" font-family=\\\"VT323\\\" font-weight=\\\"100\\\" font-size=\\\"79\\\" fill=\\\"#FFF\\\">Re:';\\n    string internal constant _P4 =\\n        '</text><text dx=\\\"955\\\" dy=\\\"425\\\" dominant-baseline=\\\"central\\\" font-family=\\\"VT323\\\" font-weight=\\\"400\\\" font-size=\\\"78\\\" fill=\\\"#FFF\\\">Age:';\\n    string internal constant _P5 =\\n        '</text><text dx=\\\"200\\\" dy=\\\"425\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"left\\\" font-family=\\\"VT323\\\" font-weight=\\\"400\\\" font-size=\\\"78\\\" fill=\\\"#FFF\\\">';\\n    string internal constant _P6 =\\n        '</text><text dx=\\\"975\\\" dy=\\\"116\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" style=\\\"height:100px\\\" font-family=\\\"Black Ops One\\\" font-size=\\\"56\\\" fill=\\\"#FF8A01\\\">DegenReborn</text><text dx=\\\"1070\\\" dy=\\\"230\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"end\\\" font-family=\\\"VT323\\\" font-weight=\\\"400\\\" font-size=\\\"96\\\" fill=\\\"url(#prefix__p75)\\\">';\\n    string internal constant _P7 =\\n        '</text><svg version=\\\"1.1\\\" id=\\\"prefix__Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"820\\\" y=\\\"180\\\" viewBox=\\\"0 0 18000 18000\\\" xml:space=\\\"preserve\\\"><path d=\\\"M1248 0c689.3 0 1248 558.7 1248 1248s-558.7 1248-1248 1248S0 1937.3 0 1248 558.7 0 1248 0z\\\" fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" fill=\\\"#f0b90b\\\"/><path d=\\\"M685.9 1248l.9 330 280.4 165v193.2l-444.5-260.7v-524l163.2 96.5zm0-330v192.3l-163.3-96.6V821.4l163.3-96.6L850 821.4 685.9 918zm398.4-96.6l163.3-96.6 164.1 96.6-164.1 96.6-163.3-96.6z\\\" fill=\\\"#fff\\\"/><path d=\\\"M803.9 1509.6v-193.2l163.3 96.6v192.3l-163.3-95.7zm280.4 302.6l163.3 96.6 164.1-96.6v192.3l-164.1 96.6-163.3-96.6v-192.3zm561.6-990.8l163.3-96.6 164.1 96.6v192.3l-164.1 96.6V918l-163.3-96.6zm163.3 756.6l.9-330 163.3-96.6v524l-444.5 260.7v-193.2l280.3-164.9z\\\" fill=\\\"#fff\\\"/><path fill=\\\"#fff\\\" d=\\\"M1692.1 1509.6l-163.3 95.7V1413l163.3-96.6v193.2z\\\"/><path d=\\\"M1692.1 986.4l.9 193.2-281.2 165v330.8l-163.3 95.7-163.3-95.7v-330.8l-281.2-165V986.4l164-96.6 279.5 165.8 281.2-165.8 164.1 96.6h-.7zM803.9 656.5l443.7-261.6 444.5 261.6-163.3 96.6-281.2-165.8-280.4 165.8-163.3-96.6z\\\" fill=\\\"#fff\\\"/></svg><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" x=\\\"72\\\" y=\\\"380\\\"><svg width=\\\"120\\\" height=\\\"120\\\"><clipPath id=\\\"prefix__clipCircle\\\"><circle cx=\\\"48\\\" cy=\\\"48\\\" r=\\\"48\\\"/></clipPath><circle cx=\\\"48\\\" cy=\\\"48\\\" r=\\\"48\\\" fill=\\\"#C8145C\\\"/><g clip-path=\\\"url(#prefix__clipCircle)\\\"><path fill=\\\"#FA6000\\\" d=\\\"M29.633 48.617l-86.61-83.057 83.056-86.611 86.611 83.057z\\\"/><path fill=\\\"#F5AF00\\\" d=\\\"M63.4 142.048l-119.678 8.788-8.788-119.677L54.61 22.37z\\\"/><path fill=\\\"#03585E\\\" d=\\\"M21.906-1.682l9.833 119.597-119.596 9.832L-97.69 8.151z\\\"/></g></svg></svg><defs><linearGradient id=\\\"prefix__p0\\\" x1=\\\"622.044\\\" y1=\\\"-2.347\\\" x2=\\\"622.044\\\" y2=\\\"678.332\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#452F16\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1B2023\\\"/></linearGradient><linearGradient id=\\\"prefix__p1\\\" x1=\\\"622.044\\\" y1=\\\"-2.347\\\" x2=\\\"622.044\\\" y2=\\\"668.943\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#FF8A00\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#52391B\\\"/></linearGradient><linearGradient id=\\\"prefix__p2\\\" x1=\\\"622.171\\\" y1=\\\"-1.73\\\" x2=\\\"622.171\\\" y2=\\\"347.827\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#F78602\\\" stop-opacity=\\\".35\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#F78602\\\" stop-opacity=\\\"0\\\"/></linearGradient><linearGradient id=\\\"prefix__p75\\\" x1=\\\"919\\\" y1=\\\"180\\\" x2=\\\"919\\\" y2=\\\"276\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#FFFFDA\\\"/><stop offset=\\\".503\\\" stop-color=\\\"#FFE7B6\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#A87945\\\"/></linearGradient><pattern id=\\\"prefix__pattern0\\\" patternContentUnits=\\\"objectBoundingBox\\\" width=\\\"1\\\" height=\\\"1\\\"><use xlink:href=\\\"#prefix__image0_539_2800\\\" transform=\\\"matrix(.00255 0 0 .00255 -.639 -1.77)\\\"/></pattern></defs><style>@font-face{font-family:&apos;Black Ops One&apos;;font-style:normal;font-weight:400;src:url(data:application/font;base64,d09GMgABAAAAAAe0AAoAAAAAEBwAAAdnAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAhAoKj2CKLws4AAE2AiQDbAQgBYcrB1gbgQxRlG1Si+zngW1MPbihDBOihmC7LZoLmHL+w+L7alc4tb07Sb6TLCvArudVcokgSMYCOeyWnQJyUmK7gOyU2cnT1dpu6AyhbsQlvku/F5GQMzxf3Ojttr80wCYIJIkgMEjkUC//+6v/b63VE2+INR28VC+BkInr7/7NCWLLYOaVTqZEc6lEoqdISZn/938VOLtupE7d8MC/NdYBXGLQbDzgb+4KgKXnNfHPoSp2HgbAWFBlhyuLfAmEjkPNM0jT598+EP161wHmAQDu4usAgIoAMlY5CACgAbLSlOP9LQA0pt5IiJqaaY8kMbhCsVLTjw5RDVZD1FBVr/6lqmp5taJaSa1cIbBC0P8kghh5Xe8incP3Z3Fcbyc3XXTBSUfttMN2xTZf2fvb+8H73vvO+8r7zFvixSM98T72Pnry6clHQDwQINSQALAIAgBMOF7QUCZKxE4Lsk6nhODn/48lIBCCgkMgFAAgLBwgAgjWY2ljSWu/6CkA3gdyLg8DAkylRJjJMS/b2nhai9NqKNVwEvciazRUI4CIUzl/f3E2gj8ncpwgcJwMoIVeEK9aYLzESYzjKCeKHI12OvMLrOZYizXGZIkym+ITRSLjOIXITDILJp1FY5Wxllp5EcUqwjDijyViVXjJjE06XICsMmghHyngz2uRfCw8KlozQoJ3lmdBMshYccqChEUoiHFycRJO5QOxH7ZDDUoCzo3lMkCE1HYikchmyCOYdkrSh3eS2ECsgzynnCdbNpExxEvEEhhKSEiEiHA0kUtN9yeSZitTMI2weFEUTOnrgoQVIhMtwtFEgTkHOOV8JUqjhYLfjkGiIxIJydi/QLZbueSz/AJmx44wNn1avDZh2JFR/InOQqwSVswNddQiJVqWgCE8EkldVVoycybZwvtE04HtEbOQdM4fQuIWW+X8YUiBKJYgocxubuFMlLA5BiltoIG5ggRRTlYe5zGZ+mvyitFCwIa+YBpIOAnKiyAyA8kWMZC4R5Kj8ZpNIPRIGQuzYdo/a9y0eZPmG4uay9RG6zc1Zk4t1hc1XTbMpQXU2cjdaCeFAayHcRelBkq/MiIy+vfuCmFAp5InrgmuwHcLO7EsBoMeRzCpGwC66jd1R79uzCZG734xnuAyx3wp+QI76zZ80zBsF6P8ctfyiTLTtJkXeYvS0oiuJ6XASEqvuD1d9VCGr1PkWEgWHmp//ZDtV3WHUf4qfSMwoN+Trcxwe1W//gk+ibImlN5ldIFnQW0GObW5jVi2ybCJ6SacSV/LIilNr3zqDNvTJMmHyPeWlALpkNR7vKsqK7tI9yTpbz3fHB74POoYglaOXzmOY3QQOy4e9x3XH2ed2RX9Fd8V8QqzUYpXuK7GCqAaUNhGw0YW2/ydffnCWE1Go9mGmj3Esi+MxrvjNzDIZl31Xd+YMgwxqnOpOjyjCPg6bsw49AYrLq2npfQITzfSmT3aPGcXTKnXqM7dzF6h3uVtK9FZTCWwd/ne/6GbgXou6hk7wcwrV8ou3PfMWDZD/VFQ9K01YzUYXXgvA1gnSqWKnsKML4GvXs9oSzxPaaF7ZdevYAPe4wbe09l3tvLZiePGf2c0iFGwURpE6S4jG7XqNMumdNWoUb7The4sevyMOxUdeud+x3IpdYwp8vV3THDBLIOd2VeIf76ytru5BgZMyxhMd7gKM/RFGQonUnGgI/TgtU9nTxgPwvziCE+Efm+x0WOEmoajWfPm//78uckY41FjGWNXY47KDl9n35DKQ1jVg7pgM7qNOAIf9nxM7d0/gQIAAABAAFAJLSP/rVNXLX9RiQIAwNMfu6cCAO/F9yUg/6cLp3IaAIUjuJvicM3j0EDt32DtXr/VgrVdYl4eGTSzzMxBg3KPLcNgmYcG2rwlEBquPH5kj8/OVaOZ0uit6WaHOSM9nSBKDUhNA0hdpjGmJaT2DPb0pBJrxnxkK9lNrwIyAHbpx89ZQJLiIYoQWTzCNCyIMBiMOMGmIl51q5Ag0AXQEenjpmgYAOz2ByMkoooQpqtTiGheNxCnekuIF9WNkMDYU4boNO4dd6KYZxva/sOUSmpczGVxH1K4o87/M4Y+6z+8HG6N96J6546j3jiqT+HM/UV8el92+EFx4s1KCpSJKfyvkxzjcqxbt2GLSJP4OWhGM9MBt/U2Aeefa+Ki0tWsLrivWjqKiw7WOUfeq2nthrWb1GpkejibbEI1+X8uS9o4u8e9E4UWEaFUmTVioUgH1FfXUEJURR1Ifdz33hjMMFzcq2POSKWzQmOxSvjMrthOf2YVKaHFuGo+6IBjtb7qqMMqdpbtOY4yCeQWHAnGaRlgSrHi07LtZTBXkoM+8b03hwpgF1BAQTck1Lt+t3FRW111NdRCJBPhF8cKXvRzwJ3N3h9IYvPbiONe6QvlYbXNJIB7g5SiduHuDOeAoKmRNvTeRC2NmAYhw6Z+7fdob8eIkNaxPiRzJBC6Pr4PmmgBAAD+b+bQvTpG1lEEChLsHiilNMJpy27LqayKOupqpLFOaCwOT6TRWQAAAA==) format(&apos;woff2&apos;);unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}@font-face{font-family:&apos;VT323&apos;;font-style:normal;font-weight:400;src:url(data:application/font;base64,) format(&apos;woff2&apos;)}</style></svg>';\\n\\n    function P1() public pure returns (string memory) {\\n        return _P1;\\n    }\\n\\n    function P2() public pure returns (string memory) {\\n        return _P2;\\n    }\\n\\n    function P3() public pure returns (string memory) {\\n        return _P3;\\n    }\\n\\n    function P4() public pure returns (string memory) {\\n        return _P4;\\n    }\\n\\n    function P5() public pure returns (string memory) {\\n        return _P5;\\n    }\\n\\n    function P6() public pure returns (string memory) {\\n        return _P6;\\n    }\\n\\n    function P7() public pure returns (string memory) {\\n        return _P7;\\n    }\\n}\\n\",\"keccak256\":\"0xd2ea5741e0a9b9189f8c5c4f5d6343c92f744d99b566aed18c8fdd1cba40a93f\",\"license\":\"GPL-3.0\"},\"src/lib/Renderer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {RenderConstant} from \\\"src/lib/RenderConstant.sol\\\";\\nimport {Base64} from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport {IRebornDefination} from \\\"src/interfaces/IRebornPortal.sol\\\";\\n\\nlibrary Renderer {\\n    function renderByTokenId(\\n        mapping(uint256 => IRebornDefination.LifeDetail) storage details,\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        string memory metadata = Base64.encode(\\n            bytes(\\n                string.concat(\\n                    '{\\\"name\\\": \\\"',\\n                    \\\"Degen Tombstone\\\",\\n                    '\\\",\\\"description\\\":\\\"',\\n                    \\\"\\\",\\n                    '\\\",\\\"image\\\":\\\"',\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            renderSvg(\\n                                details[tokenId].seed,\\n                                details[tokenId].score,\\n                                details[tokenId].round,\\n                                details[tokenId].age,\\n                                details[tokenId].creatorName,\\n                                details[tokenId].cost\\n                            )\\n                        )\\n                    ),\\n                    '\\\",\\\"attributes\\\": ',\\n                    renderTrait(\\n                        details[tokenId].seed,\\n                        details[tokenId].score,\\n                        details[tokenId].round,\\n                        details[tokenId].age,\\n                        details[tokenId].creator,\\n                        details[tokenId].creatorName,\\n                        details[tokenId].reward,\\n                        details[tokenId].cost\\n                    ),\\n                    \\\"}\\\"\\n                )\\n            )\\n        );\\n\\n        return string.concat(\\\"data:application/json;base64,\\\", metadata);\\n    }\\n\\n    function renderSvg(\\n        bytes32 seed,\\n        uint256 lifeScore,\\n        uint256 round,\\n        uint256 age,\\n        string memory creator,\\n        uint256 cost\\n    ) public pure returns (string memory) {\\n        string memory Part1 = _renderSvgPart1(seed, lifeScore, round, age);\\n        string memory Part2 = _renderSvgPart2(creator, cost);\\n        return string(abi.encodePacked(Part1, Part2));\\n    }\\n\\n    function renderTrait(\\n        bytes32 seed,\\n        uint256 lifeScore,\\n        uint256 round,\\n        uint256 age,\\n        address creator,\\n        string memory creatorName,\\n        uint256 reward,\\n        uint256 cost\\n    ) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _renderTraitPart1(seed, lifeScore, round, age),\\n                    _renderTraitPart2(creator, creatorName, reward, cost)\\n                )\\n            );\\n    }\\n\\n    function _renderTraitPart1(\\n        bytes32 seed,\\n        uint256 lifeScore,\\n        uint256 round,\\n        uint256 age\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '[{\\\"trait_type\\\": \\\"Seed\\\", \\\"value\\\": \\\"',\\n                    Strings.toHexString(uint256(seed), 32),\\n                    '\\\"},{\\\"trait_type\\\": \\\"Life Score\\\", \\\"value\\\": ',\\n                    Strings.toString(lifeScore),\\n                    '},{\\\"trait_type\\\": \\\"Round\\\", \\\"value\\\": ',\\n                    Strings.toString(round),\\n                    '},{\\\"trait_type\\\": \\\"Age\\\", \\\"value\\\": ',\\n                    Strings.toString(age)\\n                )\\n            );\\n    }\\n\\n    function _renderTraitPart2(\\n        address creator,\\n        string memory creatorName,\\n        uint256 reward,\\n        uint256 cost\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '},{\\\"trait_type\\\": \\\"Creator\\\", \\\"value\\\": \\\"',\\n                    Strings.toHexString(uint160(creator), 20),\\n                    '\\\"},{\\\"trait_type\\\": \\\"CreatorName\\\", \\\"value\\\": \\\"',\\n                    creatorName,\\n                    '\\\"},{\\\"trait_type\\\": \\\"Reward\\\", \\\"value\\\": ',\\n                    Strings.toString(reward),\\n                    '},{\\\"trait_type\\\": \\\"Cost\\\", \\\"value\\\": ',\\n                    Strings.toString(cost),\\n                    \\\"}]\\\"\\n                )\\n            );\\n    }\\n\\n    function _renderSvgPart1(\\n        bytes32 seed,\\n        uint256 lifeScore,\\n        uint256 round,\\n        uint256 age\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    RenderConstant.P1(),\\n                    _transformBytes32Seed(seed),\\n                    RenderConstant.P2(),\\n                    _transformUint256(lifeScore),\\n                    RenderConstant.P3(),\\n                    Strings.toString(round),\\n                    RenderConstant.P4(),\\n                    Strings.toString(age)\\n                )\\n            );\\n    }\\n\\n    function _renderSvgPart2(\\n        string memory creator,\\n        uint256 cost\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    RenderConstant.P5(),\\n                    creator,\\n                    RenderConstant.P6(),\\n                    _tranformWeiToDecimal2(cost),\\n                    RenderConstant.P7()\\n                )\\n            );\\n    }\\n\\n    function _tranformWeiToDecimal2(\\n        uint256 value\\n    ) public pure returns (string memory str) {\\n        if (value > 100 ether) {\\n            return Strings.toString(value / 1 ether);\\n        } else {\\n            uint256 secondFractional = value % (1 ether / 10);\\n            uint256 firstFractional = (value - secondFractional) % (1 ether);\\n            uint256 integer;\\n            if (firstFractional != 0 || secondFractional != 0) {\\n                integer = value - firstFractional - secondFractional;\\n            } else {\\n                integer = value;\\n            }\\n\\n            return\\n                string.concat(\\n                    Strings.toString(integer / 1 ether),\\n                    \\\".\\\",\\n                    Strings.toString(firstFractional / 10 ** 17),\\n                    Strings.toString(secondFractional / 10 ** 16)\\n                );\\n        }\\n    }\\n\\n    function _transformUint256(\\n        uint256 value\\n    ) public pure returns (string memory str) {\\n        if (value < 10 ** 7) {\\n            return _recursiveAddComma(value);\\n        } else if (value < 10 ** 11) {\\n            return\\n                string(\\n                    abi.encodePacked(_recursiveAddComma(value / 10 ** 6), \\\"M\\\")\\n                );\\n        } else if (value < 10 ** 15) {\\n            return\\n                string(\\n                    abi.encodePacked(_recursiveAddComma(value / 10 ** 9), \\\"B\\\")\\n                );\\n        } else {\\n            revert ValueOutOfRange();\\n        }\\n    }\\n\\n    function _recursiveAddComma(\\n        uint256 value\\n    ) internal pure returns (string memory str) {\\n        if (value / 1000 == 0) {\\n            str = string(abi.encodePacked(Strings.toString(value), str));\\n        } else {\\n            str = string(\\n                abi.encodePacked(\\n                    _recursiveAddComma(value / 1000),\\n                    \\\",\\\",\\n                    _numberStringToLengthThree(Strings.toString(value % 1000)),\\n                    str\\n                )\\n            );\\n        }\\n    }\\n\\n    function _transformBytes32Seed(\\n        bytes32 b\\n    ) public pure returns (string memory) {\\n        string memory str = Strings.toHexString(uint256(b), 32);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _substring(str, 0, 14),\\n                    unicode\\\"\\u2026\\\",\\n                    _substring(str, 45, 66)\\n                )\\n            );\\n    }\\n\\n    function _numberStringToLengthThree(\\n        string memory number\\n    ) internal pure returns (string memory) {\\n        if (bytes(number).length == 1) {\\n            return string(abi.encodePacked(\\\"00\\\", number));\\n        } else if (bytes(number).length == 2) {\\n            return string(abi.encodePacked(\\\"0\\\", number));\\n        } else {\\n            return number;\\n        }\\n    }\\n\\n    error ValueOutOfRange();\\n\\n    function _shortenAddr(address addr) private pure returns (string memory) {\\n        uint256 value = uint160(addr);\\n        bytes memory allBytes = bytes(Strings.toHexString(value, 20));\\n\\n        string memory newString = string(allBytes);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _substring(newString, 0, 6),\\n                    unicode\\\"\\u2026\\\",\\n                    _substring(newString, 38, 42)\\n                )\\n            );\\n    }\\n\\n    function _substring(\\n        string memory str,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) private pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0xb3c17bab5efe0becad8c1651024f271f98c76fc8fc7e2d015fe3ff6c823914b4\",\"license\":\"GPL-3.0\"},\"src/lib/SingleRanking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\nimport \\\"./FastArray.sol\\\";\\nimport \\\"./RankingRedBlackTree.sol\\\";\\n\\nlibrary SingleRanking {\\n    using FastArray for FastArray.Data;\\n    using RankingRedBlackTree for RankingRedBlackTree.Tree;\\n\\n    struct Data {\\n        RankingRedBlackTree.Tree tree;\\n        mapping(uint => FastArray.Data) keys;\\n        uint length;\\n    }\\n\\n    function add(Data storage _singleRanking, uint _key, uint _value) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) == 0) {\\n            _singleRanking.tree.insert(_value);\\n        } else {\\n            _singleRanking.tree.addToCount(_value, 1);\\n        }\\n\\n        _singleRanking.keys[_value].insert(_key);\\n\\n        _singleRanking.length += 1;\\n    }\\n\\n    function remove(\\n        Data storage _singleRanking,\\n        uint _key,\\n        uint _value\\n    ) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) > 0) {\\n            keys.remove(_key);\\n\\n            if (FastArray.length(keys) == 0) {\\n                _singleRanking.tree.remove(_value);\\n            } else {\\n                _singleRanking.tree.minusFromCount(_value, 1);\\n            }\\n        }\\n\\n        _singleRanking.length -= 1;\\n    }\\n\\n    function length(Data storage _singleRanking) public view returns (uint) {\\n        return _singleRanking.length;\\n    }\\n\\n    function get(\\n        Data storage _singleRanking,\\n        uint _offset,\\n        uint _count\\n    ) public view returns (uint[] memory) {\\n        require(_offset >= 0, \\\"Offet can not be negative\\\");\\n        require(\\n            _count >= 0 && _count <= 100,\\n            \\\"Count must be between 0 and 100\\\"\\n        );\\n\\n        uint[] memory result = new uint[](_count);\\n        uint size = 0;\\n        uint id;\\n        (id, _offset) = _singleRanking.tree.lastByOffset(_offset);\\n\\n        while (id != 0) {\\n            uint value = _singleRanking.tree.value(id);\\n            FastArray.Data storage keys = _singleRanking.keys[value];\\n\\n            if (_offset >= FastArray.length(keys)) {\\n                _offset -= FastArray.length(keys);\\n            } else if (FastArray.length(keys) < _offset + _count) {\\n                uint index = FastArray.length(keys) - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n\\n                _count -= FastArray.length(keys) - _offset;\\n                _offset = 0;\\n            } else {\\n                uint index = _count - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n                // result[size] = value;\\n                break;\\n            }\\n\\n            id = _singleRanking.tree.prev(id);\\n        }\\n\\n        return result;\\n    }\\n\\n    function getNthValue(\\n        Data storage _singleRanking,\\n        uint n\\n    ) public view returns (uint) {\\n        require(n >= 0, \\\"order can not be negative\\\");\\n        (uint256 id, ) = _singleRanking.tree.lastByOffset(n);\\n        uint value = _singleRanking.tree.value(id);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x829e3a1c656abb979f5fbcbda503fb907ed68771850908a9e65fc46f32795133\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001a576116959081610020823930815050f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c80631846ec151461035957806323f790ed1461033d5780632b8ef8fb146102d85780634a2fc1ed146102bc578063580be978146102925763be0862f41461006357600080fd5b8160031936011261028e5790610280603d8361023761028a9661010260806101566102709935938960243595868352602098818a52828085205460038287200154936101076101026001858a2001546001868b2001549487878c2001916100e48c60026fffffffffffffffffffffffffffffffff9a8b9220015416936104b0565b9161ffff9a8b9863ffffffff9c8d9160a01c169360b01c1691610770565b6105f2565b9a87528c52939094208054600382015460018301546002840154978816978a1c9692956001600160a01b0382169560a083901c9094169460b09290921c169261015091016104b0565b94610b65565b8851693d913730b6b2911d101160b11b878201526e446567656e20546f6d6273746f6e6560881b602a820152701116113232b9b1b934b83a34b7b7111d1160791b60398201526a11161134b6b0b3b2911d1160a91b604a8201527f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000605582015284519094859291906101f0908290606f8601908b01610461565b82016f011161130ba3a3934b13aba32b9911d160851b606f82015261021e825180938a607f85019101610461565b01607d60f81b607f8201520360608101845201826103d7565b845195827f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000889485015282519283918686019101610461565b810103601d8101855201836103d7565b5191829182610484565b0390f35b8280fd5b509160203660031901126102b957506102ae61028a9235611249565b905191829182610484565b80fd5b509160203660031901126102b957506102ae61028a9235611349565b5061010036600319011261028e57608435926001600160a01b03841684036102b95760a4359067ffffffffffffffff82116102b95750926102ae9161032361028a9536908301610415565b60e4359260c4359260643590604435906024359035610b65565b509160203660031901126102b957506102ae61028a92356114c4565b509160c03660031901126102b9576084359067ffffffffffffffff82116102b9575061028a9261038f6102ae9236908301610415565b60a4359160643590604435906024359035610770565b6040810190811067ffffffffffffffff8211176103c157604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176103c157604052565b67ffffffffffffffff81116103c157601f01601f191660200190565b81601f8201121561045c5780359061042c826103f9565b9261043a60405194856103d7565b8284526020838301011161045c57816000926020809301838601378301015290565b600080fd5b60005b8381106104745750506000910152565b8181015183820152602001610464565b604091602082526104a48151809281602086015260208686019101610461565b601f01601f1916010190565b90604051906000835490600182811c90808416968715610577575b602094858410891461056357879884899798995290816000146105415750600114610502575b505050610500925003836103d7565b565b600090815285812095935091905b81831061052957505061050093508201013880806104f1565b85548884018501529485019487945091830191610510565b9250505061050094925060ff191682840152151560051b8201013880806104f1565b634e487b7160e01b85526022600452602485fd5b91607f16916104cb565b6060519060005b8281106105985750016000815290565b608081015182820152602001610588565b906105bc60209282815194859201610461565b0190565b906105ca826103f9565b6105d760405191826103d7565b82815280926105e8601f19916103f9565b0190602036910137565b80511561074b576040516060810181811067ffffffffffffffff8211176103c157604052604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408201528151600292838201809211610735576003918290046001600160fe1b038116810361073557610698908594951b6105c0565b936020850193829183518401925b8381106106e457505050505106806001146106d1576002146106c6575090565b603d90600019015390565b50603d9081600019820153600119015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c16880101518885015316850101518782015301959291906106a6565b634e487b7160e01b600052601160045260246000fd5b506040516020810181811067ffffffffffffffff8211176103c1576040526000815290565b60408051630ef10dbb60e11b8152929693957361A54A447d2071B93928174A23B2C8090462F369959192909160009182866004818b5af4958615610a94578396610b45575b506107bf906114c4565b90845199631819957560e11b8b52838b6004818c5af49a8b15610b3b57849b610b1b575b506107ed90611349565b9085519963a85e9c8360e01b8b52848b6004818d5af49a8b15610b1157859b610aee575b5061081d600491610fa4565b91858b89519384809263ccf8541960e01b82525af4918215610ae4578692610ac4575b5061084a90610fa4565b9187519b8c9460209e8f97888089018e819f51928391019161086b92610461565b8801815191828b80840192019161088192610461565b01815191828a80840192019161089692610461565b0181519182898084019201916108ab92610461565b0181519182888084019201916108c092610461565b0181519182878084019201916108d592610461565b0181519182868084019201916108ea92610461565b0181519182858084019201916108ff92610461565b01038089520161090f90886103d7565b8251636e2a56d560e01b815295818782815a91600492f4968715610aba578297610a9e575b5083516318382d3360e31b8152958287600481855af4968715610a94578397610a6f575b5082610965600492611249565b9286519283809262028a9960e31b82525af4928315610a645799610a309481999794610a3c9b999794610a11948e610a219f93610a3f575b50508551988993856109b88187019d8e815193849201610461565b85016109cc82518093898085019101610461565b016109df82518093888085019101610461565b016109f282518093878085019101610461565b01610a0582518093868085019101610461565b010380875201856103d7565b5197889551809288880190610461565b84019151809386840190610461565b010380845201826103d7565b90565b610a5c9293503d8091833e610a5481836103d7565b8101906111dd565b90388061099d565b8551903d90823e3d90fd5b6004919750610965610a8b85923d8085833e610a5481836103d7565b98925050610958565b85513d85823e3d90fd5b610ab39197503d8084833e610a5481836103d7565b9538610934565b84513d84823e3d90fd5b61084a919250610add903d8089833e610a5481836103d7565b9190610840565b88513d88823e3d90fd5b6004919b50610b0961081d913d8089833e610a5481836103d7565b9b9150610811565b87513d87823e3d90fd5b6107ed919b50610b34903d8087833e610a5481836103d7565b9a906107e3565b86513d86823e3d90fd5b6107bf919650610b5e903d8086833e610a5481836103d7565b95906107b5565b610b77909791979694959392966110f8565b96610b8190610fa4565b95610b8b90610fa4565b91610b9590610fa4565b9460409283519687916020998a84019b7f5b7b2274726169745f74797065223a202253656564222c202276616c7565223a8d5261101160f11b88860152805190818d60428801920191610be792610461565b7f227d2c7b2274726169745f74797065223a20224c6966652053636f7265222c20604291860191820152680113b30b63ab2911d160bd1b6062820152815191610c38908390606b8401908f01610461565b01606b81017f7d2c7b2274726169745f74797065223a2022526f756e64222c202276616c75659052620111d160ed1b608b820152815191828c608e8401920191610c8192610461565b01608e81017f7d2c7b2274726169745f74797065223a2022416765222c202276616c7565223a905260ae8101600160fd1b9052815191828b60af8401920191610cc992610461565b0103608f8101875260af01610cde90876103d7565b8251946001600160a01b039190911691906060860167ffffffffffffffff8111878210176103c1578452602a86528786019284368537865115610f8e57603084538651600190811015610f8e57607860218901536029905b808211610f20575050610ede57610d4c90610fa4565b90610d5690610fa4565b908351948593898501977f7d2c7b2274726169745f74797065223a202243726561746f72222c202276616c8952653ab2911d101160d11b8787015251908160468701610da192610461565b7f227d2c7b2274726169745f74797065223a202243726561746f724e616d65222c6046918601918201526a10113b30b63ab2911d101160a91b6066820152815191610df490839060718401908d01610461565b01607181017f227d2c7b2274726169745f74797065223a2022526577617264222c202276616c90526403ab2911d160dd1b6091820152815191828a60968401920191610e3f92610461565b01609681017f7d2c7b2274726169745f74797065223a2022436f7374222c202276616c756522905260b681016101d160f51b9052815191828960b88401920191610e8892610461565b0160b88101617d5d60f01b905203609a8101835260ba01610ea990836103d7565b51948593519081868601610ebc92610461565b830190519182858301610ece92610461565b010380835201610a3c90826103d7565b60648885519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610f79576f181899199a1a9b1b9c1cb0b131b232b360811b901a610f4f848b6110e7565b5360041c918015610f64576000190190610d36565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b634e487b7160e01b600052603260045260246000fd5b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000808210156110d9575b506d04ee2d6d415b85acef8100000000808310156110ca575b50662386f26fc10000808310156110bb575b506305f5e100808310156110ac575b506127108083101561109d575b50606482101561108d575b600a80921015611083575b60019081602161103b8287016105c0565b95860101905b61104d575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561107e57919082611041565b611046565b916001019161102a565b919060646002910491019161101f565b60049193920491019138611014565b60089193920491019138611007565b60109193920491019138610ff8565b60209193920491019138610fe6565b604093508104915038610fcd565b908151811015610f8e570160200190565b604051906080820182811067ffffffffffffffff8211176103c15760405260428252602082016060368237825115610f8e57603090538151600190811015610f8e57607860218401536041905b8082116111995750506111555790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610f79576f181899199a1a9b1b9c1cb0b131b232b360811b901a6111c884866110e7565b5360041c918015610f64576000190190611145565b60208183031261045c5780519067ffffffffffffffff821161045c570181601f8201121561045c578051611210816103f9565b9261121e60405194856103d7565b8184526020828401011161045c57610a3c9160208085019101610461565b9190820391821161073557565b68056bc75e2d6310000081111561126d57670de0b6b3a7640000610a3c9104610fa4565b610a3c602167016345785d8a0000926112de662386f26fc100006112d7868406966112d0670de0b6b3a7640000806112a58b8961123c565b06968a888015801590611340575b15611339576112c5906112ca9361123c565b61123c565b04610fa4565b9404610fa4565b9504610fa4565b60405194826112f7879451809260208088019101610461565b8301601760f91b60208201526113168251809360208885019101610461565b0161132a8251809360208785019101610461565b010360018101845201826103d7565b50506112ca565b508115156112b3565b6298968081101561135d57610a3c90611416565b64174876e8008110156113af57620f42406113789104611416565b610a3c602160405183611395829551809260208086019101610461565b8101604d60f81b60208201520360018101845201826103d7565b66038d7ea4c6800081101561140457633b9aca006113cd9104611416565b610a3c6021604051836113ea829551809260208086019101610461565b8101602160f91b60208201520360018101845201826103d7565b604051634eb4f9fb60e01b8152600490fd5b60606103e88083048061145d575050610a3c9061144f61143861144994610fa4565b9160405194859360208501906105a9565b906105a9565b03601f1981018352826103d7565b611468919250611416565b61147a610a3c9261147f929406610fa4565b6115de565b9161144f6021604051948361149e879551809260208089019101610461565b8401600b60fa1b60208201526114bd8251809360208685019101610461565b0101610581565b6114cd906110f8565b604051906114da826103a5565b600e808352602090818401908236833760005b8181106115aa57505060405190611503826103a5565b601582528282019383368637602d5b604281106115685750509260239261155961153e9693610a3c9660405198899651809286890190610461565b6271405360e91b908601938401525192839086840190610461565b010360038101845201826103d7565b6001600160f81b031961157b82846110e7565b51602c1983019116828211610735576115989060001a91866110e7565b53600019811461073557600101611512565b6001600160f81b03196115bd82876110e7565b511660001a6115cc82886110e7565b536000198114610735576001016114ed565b8051600181036116215750610a3c6022604051809361030360f41b60208301526116118151809260208686019101610461565b81010360028101845201826103d7565b600203610a3c57610a3c60216040518093600360fc1b602083015261164f8151809260208686019101610461565b81010360018101845201826103d756fea26469706673582212206759aa45be66185a0d5e4ac781ec9aeccfcc77ebfcd8ae4cb83b7b71edfe261964736f6c63430008110033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c80631846ec151461035957806323f790ed1461033d5780632b8ef8fb146102d85780634a2fc1ed146102bc578063580be978146102925763be0862f41461006357600080fd5b8160031936011261028e5790610280603d8361023761028a9661010260806101566102709935938960243595868352602098818a52828085205460038287200154936101076101026001858a2001546001868b2001549487878c2001916100e48c60026fffffffffffffffffffffffffffffffff9a8b9220015416936104b0565b9161ffff9a8b9863ffffffff9c8d9160a01c169360b01c1691610770565b6105f2565b9a87528c52939094208054600382015460018301546002840154978816978a1c9692956001600160a01b0382169560a083901c9094169460b09290921c169261015091016104b0565b94610b65565b8851693d913730b6b2911d101160b11b878201526e446567656e20546f6d6273746f6e6560881b602a820152701116113232b9b1b934b83a34b7b7111d1160791b60398201526a11161134b6b0b3b2911d1160a91b604a8201527f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000605582015284519094859291906101f0908290606f8601908b01610461565b82016f011161130ba3a3934b13aba32b9911d160851b606f82015261021e825180938a607f85019101610461565b01607d60f81b607f8201520360608101845201826103d7565b845195827f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000889485015282519283918686019101610461565b810103601d8101855201836103d7565b5191829182610484565b0390f35b8280fd5b509160203660031901126102b957506102ae61028a9235611249565b905191829182610484565b80fd5b509160203660031901126102b957506102ae61028a9235611349565b5061010036600319011261028e57608435926001600160a01b03841684036102b95760a4359067ffffffffffffffff82116102b95750926102ae9161032361028a9536908301610415565b60e4359260c4359260643590604435906024359035610b65565b509160203660031901126102b957506102ae61028a92356114c4565b509160c03660031901126102b9576084359067ffffffffffffffff82116102b9575061028a9261038f6102ae9236908301610415565b60a4359160643590604435906024359035610770565b6040810190811067ffffffffffffffff8211176103c157604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176103c157604052565b67ffffffffffffffff81116103c157601f01601f191660200190565b81601f8201121561045c5780359061042c826103f9565b9261043a60405194856103d7565b8284526020838301011161045c57816000926020809301838601378301015290565b600080fd5b60005b8381106104745750506000910152565b8181015183820152602001610464565b604091602082526104a48151809281602086015260208686019101610461565b601f01601f1916010190565b90604051906000835490600182811c90808416968715610577575b602094858410891461056357879884899798995290816000146105415750600114610502575b505050610500925003836103d7565b565b600090815285812095935091905b81831061052957505061050093508201013880806104f1565b85548884018501529485019487945091830191610510565b9250505061050094925060ff191682840152151560051b8201013880806104f1565b634e487b7160e01b85526022600452602485fd5b91607f16916104cb565b6060519060005b8281106105985750016000815290565b608081015182820152602001610588565b906105bc60209282815194859201610461565b0190565b906105ca826103f9565b6105d760405191826103d7565b82815280926105e8601f19916103f9565b0190602036910137565b80511561074b576040516060810181811067ffffffffffffffff8211176103c157604052604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408201528151600292838201809211610735576003918290046001600160fe1b038116810361073557610698908594951b6105c0565b936020850193829183518401925b8381106106e457505050505106806001146106d1576002146106c6575090565b603d90600019015390565b50603d9081600019820153600119015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c16880101518885015316850101518782015301959291906106a6565b634e487b7160e01b600052601160045260246000fd5b506040516020810181811067ffffffffffffffff8211176103c1576040526000815290565b60408051630ef10dbb60e11b81529296939573__$6e06dd050095c7919be040ed2350b8ae73$__959192909160009182866004818b5af4958615610a94578396610b45575b506107bf906114c4565b90845199631819957560e11b8b52838b6004818c5af49a8b15610b3b57849b610b1b575b506107ed90611349565b9085519963a85e9c8360e01b8b52848b6004818d5af49a8b15610b1157859b610aee575b5061081d600491610fa4565b91858b89519384809263ccf8541960e01b82525af4918215610ae4578692610ac4575b5061084a90610fa4565b9187519b8c9460209e8f97888089018e819f51928391019161086b92610461565b8801815191828b80840192019161088192610461565b01815191828a80840192019161089692610461565b0181519182898084019201916108ab92610461565b0181519182888084019201916108c092610461565b0181519182878084019201916108d592610461565b0181519182868084019201916108ea92610461565b0181519182858084019201916108ff92610461565b01038089520161090f90886103d7565b8251636e2a56d560e01b815295818782815a91600492f4968715610aba578297610a9e575b5083516318382d3360e31b8152958287600481855af4968715610a94578397610a6f575b5082610965600492611249565b9286519283809262028a9960e31b82525af4928315610a645799610a309481999794610a3c9b999794610a11948e610a219f93610a3f575b50508551988993856109b88187019d8e815193849201610461565b85016109cc82518093898085019101610461565b016109df82518093888085019101610461565b016109f282518093878085019101610461565b01610a0582518093868085019101610461565b010380875201856103d7565b5197889551809288880190610461565b84019151809386840190610461565b010380845201826103d7565b90565b610a5c9293503d8091833e610a5481836103d7565b8101906111dd565b90388061099d565b8551903d90823e3d90fd5b6004919750610965610a8b85923d8085833e610a5481836103d7565b98925050610958565b85513d85823e3d90fd5b610ab39197503d8084833e610a5481836103d7565b9538610934565b84513d84823e3d90fd5b61084a919250610add903d8089833e610a5481836103d7565b9190610840565b88513d88823e3d90fd5b6004919b50610b0961081d913d8089833e610a5481836103d7565b9b9150610811565b87513d87823e3d90fd5b6107ed919b50610b34903d8087833e610a5481836103d7565b9a906107e3565b86513d86823e3d90fd5b6107bf919650610b5e903d8086833e610a5481836103d7565b95906107b5565b610b77909791979694959392966110f8565b96610b8190610fa4565b95610b8b90610fa4565b91610b9590610fa4565b9460409283519687916020998a84019b7f5b7b2274726169745f74797065223a202253656564222c202276616c7565223a8d5261101160f11b88860152805190818d60428801920191610be792610461565b7f227d2c7b2274726169745f74797065223a20224c6966652053636f7265222c20604291860191820152680113b30b63ab2911d160bd1b6062820152815191610c38908390606b8401908f01610461565b01606b81017f7d2c7b2274726169745f74797065223a2022526f756e64222c202276616c75659052620111d160ed1b608b820152815191828c608e8401920191610c8192610461565b01608e81017f7d2c7b2274726169745f74797065223a2022416765222c202276616c7565223a905260ae8101600160fd1b9052815191828b60af8401920191610cc992610461565b0103608f8101875260af01610cde90876103d7565b8251946001600160a01b039190911691906060860167ffffffffffffffff8111878210176103c1578452602a86528786019284368537865115610f8e57603084538651600190811015610f8e57607860218901536029905b808211610f20575050610ede57610d4c90610fa4565b90610d5690610fa4565b908351948593898501977f7d2c7b2274726169745f74797065223a202243726561746f72222c202276616c8952653ab2911d101160d11b8787015251908160468701610da192610461565b7f227d2c7b2274726169745f74797065223a202243726561746f724e616d65222c6046918601918201526a10113b30b63ab2911d101160a91b6066820152815191610df490839060718401908d01610461565b01607181017f227d2c7b2274726169745f74797065223a2022526577617264222c202276616c90526403ab2911d160dd1b6091820152815191828a60968401920191610e3f92610461565b01609681017f7d2c7b2274726169745f74797065223a2022436f7374222c202276616c756522905260b681016101d160f51b9052815191828960b88401920191610e8892610461565b0160b88101617d5d60f01b905203609a8101835260ba01610ea990836103d7565b51948593519081868601610ebc92610461565b830190519182858301610ece92610461565b010380835201610a3c90826103d7565b60648885519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610f79576f181899199a1a9b1b9c1cb0b131b232b360811b901a610f4f848b6110e7565b5360041c918015610f64576000190190610d36565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b634e487b7160e01b600052603260045260246000fd5b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000808210156110d9575b506d04ee2d6d415b85acef8100000000808310156110ca575b50662386f26fc10000808310156110bb575b506305f5e100808310156110ac575b506127108083101561109d575b50606482101561108d575b600a80921015611083575b60019081602161103b8287016105c0565b95860101905b61104d575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561107e57919082611041565b611046565b916001019161102a565b919060646002910491019161101f565b60049193920491019138611014565b60089193920491019138611007565b60109193920491019138610ff8565b60209193920491019138610fe6565b604093508104915038610fcd565b908151811015610f8e570160200190565b604051906080820182811067ffffffffffffffff8211176103c15760405260428252602082016060368237825115610f8e57603090538151600190811015610f8e57607860218401536041905b8082116111995750506111555790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610f79576f181899199a1a9b1b9c1cb0b131b232b360811b901a6111c884866110e7565b5360041c918015610f64576000190190611145565b60208183031261045c5780519067ffffffffffffffff821161045c570181601f8201121561045c578051611210816103f9565b9261121e60405194856103d7565b8184526020828401011161045c57610a3c9160208085019101610461565b9190820391821161073557565b68056bc75e2d6310000081111561126d57670de0b6b3a7640000610a3c9104610fa4565b610a3c602167016345785d8a0000926112de662386f26fc100006112d7868406966112d0670de0b6b3a7640000806112a58b8961123c565b06968a888015801590611340575b15611339576112c5906112ca9361123c565b61123c565b04610fa4565b9404610fa4565b9504610fa4565b60405194826112f7879451809260208088019101610461565b8301601760f91b60208201526113168251809360208885019101610461565b0161132a8251809360208785019101610461565b010360018101845201826103d7565b50506112ca565b508115156112b3565b6298968081101561135d57610a3c90611416565b64174876e8008110156113af57620f42406113789104611416565b610a3c602160405183611395829551809260208086019101610461565b8101604d60f81b60208201520360018101845201826103d7565b66038d7ea4c6800081101561140457633b9aca006113cd9104611416565b610a3c6021604051836113ea829551809260208086019101610461565b8101602160f91b60208201520360018101845201826103d7565b604051634eb4f9fb60e01b8152600490fd5b60606103e88083048061145d575050610a3c9061144f61143861144994610fa4565b9160405194859360208501906105a9565b906105a9565b03601f1981018352826103d7565b611468919250611416565b61147a610a3c9261147f929406610fa4565b6115de565b9161144f6021604051948361149e879551809260208089019101610461565b8401600b60fa1b60208201526114bd8251809360208685019101610461565b0101610581565b6114cd906110f8565b604051906114da826103a5565b600e808352602090818401908236833760005b8181106115aa57505060405190611503826103a5565b601582528282019383368637602d5b604281106115685750509260239261155961153e9693610a3c9660405198899651809286890190610461565b6271405360e91b908601938401525192839086840190610461565b010360038101845201826103d7565b6001600160f81b031961157b82846110e7565b51602c1983019116828211610735576115989060001a91866110e7565b53600019811461073557600101611512565b6001600160f81b03196115bd82876110e7565b511660001a6115cc82886110e7565b536000198114610735576001016114ed565b8051600181036116215750610a3c6022604051809361030360f41b60208301526116118151809260208686019101610461565b81010360028101845201826103d7565b600203610a3c57610a3c60216040518093600360fc1b602083015261164f8151809260208686019101610461565b81010360018101845201826103d756fea26469706673582212206759aa45be66185a0d5e4ac781ec9aeccfcc77ebfcd8ae4cb83b7b71edfe261964736f6c63430008110033",
  "libraries": {
    "RenderConstant": "0x61A54A447d2071B93928174A23B2C8090462F369"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}