{
  "address": "0x13850aef070D3D3f39B611dAfA36517F989f4D6f",
  "abi": [],
  "transactionHash": "0xa76f7c4c260299b1bc0808becfb899363cc0b442ad7f530340ff53acf3ab58c8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xe0B4c9C36f5A5D0Ff3A547FeaBB6BC9Ba65805F2",
    "contractAddress": null,
    "transactionIndex": 15,
    "gasUsed": "224772",
    "logsBloom": "0x
    "blockHash": "0xf82cb4741c49d4b5f4f025c91fbca529bda83340a4dbd097a42a298acc2ce39a",
    "transactionHash": "0xa76f7c4c260299b1bc0808becfb899363cc0b442ad7f530340ff53acf3ab58c8",
    "logs": [],
    "blockNumber": 28918234,
    "cumulativeGasUsed": "8043596",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "1f461bbb41d71e02c1eefc618829ae46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"remove(FastArray.Data storage,uint256)\":{\"details\":\"remove item from array,but not keep rest item sort\"},\"removeKeepSort(FastArray.Data storage,uint256)\":{\"details\":\"remove item and keep rest item in sort\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"get(FastArray.Data storage,uint256)\":{\"notice\":\"PLease confirm index is not out of bounds\"},\"insert(FastArray.Data storage,uint256)\":{\"notice\":\"please confirm no eq item exist before insert\"},\"remove(FastArray.Data storage,uint256)\":{\"notice\":\"Please confirm array is not empty && item is exist && index not out of bounds\"},\"removeKeepSort(FastArray.Data storage,uint256)\":{\"notice\":\"Please confirm array is not empty && item is exist && index not out of bounds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/FastArray.sol\":\"FastArray\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363831343435363133313539\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/lib/FastArray.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// A simple array that supports insert and removal.\\n// The values are assumed to be unique and the library is meant to be lightweight.\\n// So when calling insert or remove, the caller is responsible to know whether a value already exists in the array or not.\\nlibrary FastArray {\\n    struct Data {\\n        mapping(uint256 => uint256) array;\\n        mapping(uint256 => uint256) indexMap;\\n        uint256 length;\\n    }\\n\\n    /**\\n     * @notice please confirm no eq item exist before insert\\n     */\\n    function insert(Data storage _fastArray, uint256 _value) external {\\n        _fastArray.array[_fastArray.length] = _value;\\n        _fastArray.indexMap[_value] = _fastArray.length;\\n        _fastArray.length += 1;\\n    }\\n\\n    /**\\n     * @dev remove item from array,but not keep rest item sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function remove(Data storage _fastArray, uint256 _value) external {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        uint256 oldIndex = _fastArray.length - 1;\\n\\n        _fastArray.array[index] = _fastArray.array[oldIndex];\\n        delete _fastArray.indexMap[_value];\\n        delete _fastArray.array[oldIndex];\\n\\n        _fastArray.length = oldIndex;\\n    }\\n\\n    /**\\n     * @dev remove item and keep rest item in sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function removeKeepSort(Data storage _fastArray, uint256 _value) external {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        uint256 tempLastItem = _fastArray.array[_fastArray.length - 1];\\n\\n        for (uint256 i = index; i < _fastArray.length - 1; i++) {\\n            _fastArray.indexMap[_fastArray.array[i + 1]] = i;\\n            _fastArray.array[i] = _fastArray.array[i + 1];\\n        }\\n\\n        delete _fastArray.indexMap[tempLastItem];\\n        delete _fastArray.array[_fastArray.length - 1];\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @notice PLease confirm index is not out of bounds\\n     */\\n    function get(\\n        Data storage _fastArray,\\n        uint256 _index\\n    ) public view returns (uint256) {\\n        return _fastArray.array[_index];\\n    }\\n\\n    function length(Data storage _fastArray) public view returns (uint256) {\\n        return _fastArray.length;\\n    }\\n\\n    function contains(\\n        Data storage _fastArray,\\n        uint256 _value\\n    ) public view returns (bool) {\\n        return _fastArray.indexMap[_value] != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x172fb063f4edad4edd7fd08af464be38962bb609a093b2489e8c5519ee529848\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c57610317908161002282393081600a0152f35b600080fdfe6080604090808252307f000000000000000000000000000000000000000000000000000000000000000014916004928336101561003b57600080fd5b600092833560e01c90816317dce7e4146102a75750806324f9017a146102875780638b2e5e421461017c578063c9c3102d14610161578063f7155307146101055763f9ff0d851461008b57600080fd5b61010157610098366102c6565b90916001830192828552836020528185205493600282019384549560001987019687116100ee57879850868896979852836020528486205490865284862055845260205282828120558483526020528120555580f35b634e487b7160e01b885260118952602488fd5b5080fd5b5092919261015d57610116366102c6565b6002829492019283548652846020528181872055600184549586938852016020528520556001830180931161014a57505580f35b634e487b7160e01b845260119052602483fd5b8280fd5b602083808661016f366102c6565b8252845220549051908152f35b50839061015d5761018c366102c6565b9190926001938481019386526020848152828720549460028301958654976000199889810190811161025c578a52848452858a205491815b61020c575b505088528152868381205584548681019081116101f9578752528420849055815492830192831161014a57505580f35b634e487b7160e01b885260118552602488fd5b88548a810190811161026f578110156102825781810180821161026f57808c52868652878c20548c5284865281888d20558b52858552868b2054818c52878c205589811461025c578101816101c4565b634e487b7160e01b8b526011885260248bfd5b634e487b7160e01b8c526011895260248cfd5b6101c9565b60208380866001610297366102c6565b8352018452205415159051908152f35b85908560203660031901126102c3575060026020923501548152f35b80fd5b60409060031901126102dc576004359060243590565b600080fdfea26469706673582212203c5d13f03099c4f0f63b608a9eec586edd6872418d41beb9e92ad6349229fa2064736f6c63430008110033",
  "deployedBytecode": "0x6080604090808252307f000000000000000000000000000000000000000000000000000000000000000014916004928336101561003b57600080fd5b600092833560e01c90816317dce7e4146102a75750806324f9017a146102875780638b2e5e421461017c578063c9c3102d14610161578063f7155307146101055763f9ff0d851461008b57600080fd5b61010157610098366102c6565b90916001830192828552836020528185205493600282019384549560001987019687116100ee57879850868896979852836020528486205490865284862055845260205282828120558483526020528120555580f35b634e487b7160e01b885260118952602488fd5b5080fd5b5092919261015d57610116366102c6565b6002829492019283548652846020528181872055600184549586938852016020528520556001830180931161014a57505580f35b634e487b7160e01b845260119052602483fd5b8280fd5b602083808661016f366102c6565b8252845220549051908152f35b50839061015d5761018c366102c6565b9190926001938481019386526020848152828720549460028301958654976000199889810190811161025c578a52848452858a205491815b61020c575b505088528152868381205584548681019081116101f9578752528420849055815492830192831161014a57505580f35b634e487b7160e01b885260118552602488fd5b88548a810190811161026f578110156102825781810180821161026f57808c52868652878c20548c5284865281888d20558b52858552868b2054818c52878c205589811461025c578101816101c4565b634e487b7160e01b8b526011885260248bfd5b634e487b7160e01b8c526011895260248cfd5b6101c9565b60208380866001610297366102c6565b8352018452205415159051908152f35b85908560203660031901126102c3575060026020923501548152f35b80fd5b60409060031901126102dc576004359060243590565b600080fdfea26469706673582212203c5d13f03099c4f0f63b608a9eec586edd6872418d41beb9e92ad6349229fa2064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "remove(FastArray.Data storage,uint256)": {
        "details": "remove item from array,but not keep rest item sort"
      },
      "removeKeepSort(FastArray.Data storage,uint256)": {
        "details": "remove item and keep rest item in sort"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "get(FastArray.Data storage,uint256)": {
        "notice": "PLease confirm index is not out of bounds"
      },
      "insert(FastArray.Data storage,uint256)": {
        "notice": "please confirm no eq item exist before insert"
      },
      "remove(FastArray.Data storage,uint256)": {
        "notice": "Please confirm array is not empty && item is exist && index not out of bounds"
      },
      "removeKeepSort(FastArray.Data storage,uint256)": {
        "notice": "Please confirm array is not empty && item is exist && index not out of bounds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}