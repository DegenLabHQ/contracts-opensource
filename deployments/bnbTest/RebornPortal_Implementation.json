{
  "address": "0xBf98565059Bf45dA9D7e48Ec5c70a4800517323C",
  "abi": [
    {
      "inputs": [],
      "name": "CallerNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DropOff",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncarnationExceedLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSetBurnPoolAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSigner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameSeed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressCoordinatorSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressOwnerSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Baptise",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "BetaStageSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseFromPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "Drop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Dry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Engrave",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "talentPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "PropertyPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "soupPrice",
          "type": "uint256"
        }
      ],
      "name": "Incarnate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseToPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Infuse",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extraReward",
          "type": "uint256"
        }
      ],
      "name": "NewExtraReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "NewIncarnationLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NewSeason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NewSoupPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "Refer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardVault",
          "type": "address"
        }
      ],
      "name": "VaultSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "baptise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFromBurnPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum PortalLib.RewardType",
          "name": "rewardType",
          "type": "uint8"
        }
      ],
      "name": "calculateReferReward",
      "outputs": [
        {
          "internalType": "address",
          "name": "ref1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ref1Reward",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ref2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ref2Reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimDrops",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimNativeDrops",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimRebornDrops",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "age",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "creatorName",
          "type": "string"
        }
      ],
      "name": "engrave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDropConf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "_dropOn",
              "type": "uint8"
            },
            {
              "internalType": "uint40",
              "name": "_rebornDropInterval",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "_nativeDropInterval",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "_rebornDropLastUpdate",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "_nativeDropLastUpdate",
              "type": "uint40"
            },
            {
              "internalType": "uint16",
              "name": "_nativeTopDropRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "_nativeRaffleDropRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "_rebornTopEthAmount",
              "type": "uint16"
            },
            {
              "internalType": "uint40",
              "name": "_rebornRaffleEthAmount",
              "type": "uint40"
            }
          ],
          "internalType": "struct PortalLib.AirdropConf",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getJackPot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accRebornPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accNativePerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct PortalLib.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPortfolio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accumulativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rebornRewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nativeRewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingOwnerRebornReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingOwnerNativeReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct PortalLib.Portfolio",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRerferrers",
      "outputs": [
        {
          "internalType": "address",
          "name": "referrer1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer2",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "talentPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "propertyPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRebornDefination.Innate",
          "name": "innate",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_soupPrice",
          "type": "uint256"
        }
      ],
      "name": "incarnate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permitAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "infuse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "infuse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract RBT",
          "name": "rebornToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "pendingDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pNative",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pReborn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebornToken",
      "outputs": [
        {
          "internalType": "contract RBT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardFees",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "incarnateRef1Fee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "incarnateRef2Fee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "vaultRef1Fee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "vaultRef2Fee",
          "type": "uint16"
        },
        {
          "internalType": "uint192",
          "name": "_slotPlaceholder",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        }
      ],
      "name": "seedExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "burnPool_",
          "type": "address"
        }
      ],
      "name": "setBurnPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "_dropOn",
              "type": "uint8"
            },
            {
              "internalType": "uint40",
              "name": "_rebornDropInterval",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "_nativeDropInterval",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "_rebornDropLastUpdate",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "_nativeDropLastUpdate",
              "type": "uint40"
            },
            {
              "internalType": "uint16",
              "name": "_nativeTopDropRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "_nativeRaffleDropRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "_rebornTopEthAmount",
              "type": "uint16"
            },
            {
              "internalType": "uint40",
              "name": "_rebornRaffleEthAmount",
              "type": "uint40"
            }
          ],
          "internalType": "struct PortalLib.AirdropConf",
          "name": "conf",
          "type": "tuple"
        }
      ],
      "name": "setDropConf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "extraReward",
          "type": "uint256"
        }
      ],
      "name": "setExtraReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "setIncarnationLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "refL1Fee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "refL2Fee",
          "type": "uint16"
        },
        {
          "internalType": "enum PortalLib.RewardType",
          "name": "rewardType",
          "type": "uint8"
        }
      ],
      "name": "setReferrerRewardFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract RewardVault",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "keyHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "s_subscriptionId",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numWords",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "requestConfirmations",
              "type": "uint16"
            }
          ],
          "internalType": "struct PortalLib.VrfConf",
          "name": "conf",
          "type": "tuple"
        }
      ],
      "name": "setVrfConf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "switchPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toNextSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "toAdd",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "toRemove",
          "type": "address[]"
        }
      ],
      "name": "updateSigners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract RewardVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb51bf9b1b086ceb65873c2ae7c7b129acee339dff73c9b719577c2bf28070cb3",
  "receipt": {
    "to": null,
    "from": "0xe0B4c9C36f5A5D0Ff3A547FeaBB6BC9Ba65805F2",
    "contractAddress": "0xBf98565059Bf45dA9D7e48Ec5c70a4800517323C",
    "transactionIndex": 4,
    "gasUsed": "4768949",
    "logsBloom": "0x
    "blockHash": "0xd76c05e5763b06cce1628b764a67d6fbdd41e3ef54efd471d3b4aa3459812558",
    "transactionHash": "0xb51bf9b1b086ceb65873c2ae7c7b129acee339dff73c9b719577c2bf28070cb3",
    "logs": [],
    "blockNumber": 28115506,
    "cumulativeGasUsed": "5310208",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 24,
  "solcInputHash": "f6e6d452782abdad5dd9693be35085b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DropOff\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncarnationExceedLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSetBurnPoolAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameSeed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressCoordinatorSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressOwnerSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Baptise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"BetaStageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecreaseFromPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"Drop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Engrave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"talentPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"PropertyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soupPrice\",\"type\":\"uint256\"}],\"name\":\"Incarnate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Infuse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"name\":\"NewExtraReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"NewIncarnationLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewSoupPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Refer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardVault\",\"type\":\"address\"}],\"name\":\"VaultSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"baptise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFromBurnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum PortalLib.RewardType\",\"name\":\"rewardType\",\"type\":\"uint8\"}],\"name\":\"calculateReferReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ref1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ref1Reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ref2Reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimDrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimNativeDrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRebornDrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"}],\"name\":\"engrave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDropConf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_dropOn\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"_rebornDropInterval\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_nativeDropInterval\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_rebornDropLastUpdate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_nativeDropLastUpdate\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"_nativeTopDropRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_nativeRaffleDropRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_rebornTopEthAmount\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"_rebornRaffleEthAmount\",\"type\":\"uint40\"}],\"internalType\":\"struct PortalLib.AirdropConf\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRebornPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accNativePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct PortalLib.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPortfolio\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accumulativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebornRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingOwnerRebornReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingOwnerNativeReward\",\"type\":\"uint256\"}],\"internalType\":\"struct PortalLib.Portfolio\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRerferrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer2\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"talentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"propertyPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IRebornDefination.Innate\",\"name\":\"innate\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_soupPrice\",\"type\":\"uint256\"}],\"name\":\"incarnate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"infuse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"infuse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract RBT\",\"name\":\"rebornToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"pendingDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pNative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pReborn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebornToken\",\"outputs\":[{\"internalType\":\"contract RBT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFees\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"incarnateRef1Fee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"incarnateRef2Fee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vaultRef1Fee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vaultRef2Fee\",\"type\":\"uint16\"},{\"internalType\":\"uint192\",\"name\":\"_slotPlaceholder\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"seedExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnPool_\",\"type\":\"address\"}],\"name\":\"setBurnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_dropOn\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"_rebornDropInterval\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_nativeDropInterval\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_rebornDropLastUpdate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_nativeDropLastUpdate\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"_nativeTopDropRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_nativeRaffleDropRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_rebornTopEthAmount\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"_rebornRaffleEthAmount\",\"type\":\"uint40\"}],\"internalType\":\"struct PortalLib.AirdropConf\",\"name\":\"conf\",\"type\":\"tuple\"}],\"name\":\"setDropConf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"name\":\"setExtraReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setIncarnationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"refL1Fee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"refL2Fee\",\"type\":\"uint16\"},{\"internalType\":\"enum PortalLib.RewardType\",\"name\":\"rewardType\",\"type\":\"uint8\"}],\"name\":\"setReferrerRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract RewardVault\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"s_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"}],\"internalType\":\"struct PortalLib.VrfConf\",\"name\":\"conf\",\"type\":\"tuple\"}],\"name\":\"setVrfConf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"switchPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toNextSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toRemove\",\"type\":\"address[]\"}],\"name\":\"updateSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract RewardVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"DropOff()\":[{\"details\":\"revert when the drop is not on\"}],\"IncarnationExceedLimit()\":[{\"details\":\"revert when incarnation count exceed limit\"}],\"InsufficientAmount()\":[{\"details\":\"revert when msg.value is insufficient\"}],\"NotSetBurnPoolAddress()\":[{\"details\":\"revert if burnPool address not set when infuse\"}],\"NotSigner()\":[{\"details\":\"revert when to caller is not signer\"}],\"SameSeed()\":[{\"details\":\"revert when the random seed is duplicated\"}],\"ZeroAddressSet()\":[{\"details\":\"revert when some address var are set to zero\"}]},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baptise(address,uint256)\":{\"details\":\"reward for share the game\",\"params\":{\"amount\":\"amount for reward\",\"user\":\"user address\"}},\"burnFromBurnPool(uint256)\":{\"details\":\"burn $REBORN from burn pool\",\"params\":{\"amount\":\"burn from burn pool\"}},\"calculateReferReward(address,uint256,uint8)\":{\"details\":\"returns referrer and referer reward\",\"returns\":{\"ref1\":\" level1 of referrer. direct referrer\",\"ref1Reward\":\" level 1 referrer reward\",\"ref2\":\" level2 of referrer. referrer's referrer\",\"ref2Reward\":\" level 2 referrer reward\"}},\"checkUpkeep(bytes)\":{\"details\":\"checkUpkeep for chainlink automation\"},\"claimDrops(uint256[])\":{\"details\":\"user claim many pools' airdrop\",\"params\":{\"tokenIds\":\"pools' tokenId array to claim\"}},\"claimNativeDrops(uint256[])\":{\"details\":\"user claim many pools' native token airdrop\",\"params\":{\"tokenIds\":\"pools' tokenId array to claim\"}},\"claimOwnership()\":{\"details\":\"pending owner call this function to claim ownership\"},\"claimRebornDrops(uint256[])\":{\"details\":\"user claim many pools' reborn token airdrop\",\"params\":{\"tokenIds\":\"pools' tokenId array to claim\"}},\"engrave(bytes32,address,uint256,uint256,uint256,uint256,string)\":{\"details\":\"engrave the result on chain and reward\",\"params\":{\"cost\":\"user cost for this life\",\"reward\":\"$REBORN user earns, decimal 10^18\",\"score\":\"life score\",\"seed\":\"random seed in bytes32\",\"user\":\"user address\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getJackPot()\":{\"details\":\"return the jackpot amount of current season\"},\"getPool(uint256)\":{\"details\":\"read pool attribute\"},\"getPortfolio(address,uint256)\":{\"details\":\"read pool attribute\"},\"getRerferrers(address)\":{\"details\":\"referrer1: level1 of referrers referrer2: level2 of referrers\"},\"incarnate((uint256,uint256),address,uint256)\":{\"details\":\"user buy the innate for the life\",\"params\":{\"innate\":\"talent and property choice\",\"referrer\":\"the referrer address\"}},\"infuse(uint256,uint256)\":{\"details\":\"stake $REBORN on this tombstone\",\"params\":{\"amount\":\"stake amount, decimal 10^18\",\"tokenId\":\"tokenId of the life to stake\"}},\"infuse(uint256,uint256,uint256,uint256,bytes32,bytes32,uint8)\":{\"details\":\"stake $REBORN with permit\",\"params\":{\"amount\":\"amount of $REBORN to stake\",\"permitAmount\":\"amount of $REBORN to approve\",\"r\":\"r of signature\",\"s\":\"v of signature\",\"tokenId\":\"tokenId of the life to stake\",\"v\":\"v of signature\"}},\"initialize(address,address,string,string,address)\":{\"details\":\"initialize function\",\"params\":{\"name_\":\"ERC712 name\",\"owner_\":\"owner address\",\"rebornToken_\":\"$REBORN token address\",\"symbol_\":\"ERC721 symbol\",\"vrfCoordinator_\":\"chainlink vrf coordinator_ address\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingDrop(uint256[])\":{\"details\":\"read pending reward from specific pool\",\"params\":{\"tokenIds\":\"tokenId array of the pools\"}},\"pendingOwner()\":{\"details\":\"Return the address of the pending owner\"},\"performUpkeep(bytes)\":{\"details\":\"Upkeep perform of chainlink automation\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"seedExists(bytes32)\":{\"details\":\"check whether the seed is used on-chain\",\"params\":{\"seed\":\"random seed in bytes32\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setDropConf((uint8,uint40,uint40,uint40,uint40,uint16,uint16,uint16,uint40))\":{\"details\":\"set new airdrop config\"},\"setIncarnationLimit(uint256)\":{\"details\":\"set incarnation limit\"},\"setReferrerRewardFee(uint16,uint16,uint8)\":{\"details\":\"set percentage of referrer reward\",\"params\":{\"rewardType\":\"0: incarnate reward 1: engrave reward\"}},\"setVault(address)\":{\"details\":\"set vault\",\"params\":{\"vault_\":\"new vault address\"}},\"setVrfConf((bytes32,uint64,uint32,uint32,uint16))\":{\"details\":\"set new chainlink vrf v2 config\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"switchPool(uint256,uint256,uint256)\":{\"details\":\"switch stake amount from poolFrom to poolTo\",\"params\":{\"amount\":\"amount to switch\",\"fromTokenId\":\"tokenId of from pool\",\"toTokenId\":\"tokenId of to pool\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"toNextSeason()\":{\"details\":\"switch to next season, call by owner\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address,bool)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership\"},\"updateSigners(address[],address[])\":{\"details\":\"update signers\",\"params\":{\"toAdd\":\"list of to be added signer\",\"toRemove\":\"list of to be removed signer\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawNativeToken(uint256)\":{\"details\":\"withdraw native token for reward distributionamount how much to withdraw\"},\"withdrawVault(address)\":{\"details\":\"withdraw token from vault\",\"params\":{\"to\":\"the address which owner withdraw token to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRerferrers(address)\":{\"notice\":\"A -> B -> C: B: level1 A: level2\"},\"setReferrerRewardFee(uint16,uint16,uint8)\":{\"notice\":\"mul 100 when set. eg: 8% -> 800 18%-> 1800\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RebornPortal.sol\":\"RebornPortal\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363739303334313737393130\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20CappedUpgradeable is Initializable, ERC20Upgradeable {\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    function __ERC20Capped_init(uint256 cap_) internal onlyInitializing {\\n        __ERC20Capped_init_unchained(cap_);\\n    }\\n\\n    function __ERC20Capped_init_unchained(uint256 cap_) internal onlyInitializing {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20Upgradeable.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc707bc7f15de49a0c4da261822a3075d8c171b3c08543fc8f0d0021b8d227b92\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMapsUpgradeable {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x93282769cdd2804524608a8a23f6d42b888ec0acb36eabd1d5f84b2bf1f374f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@p12/contracts-lib/contracts/access/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Thanks Yos Riady\\n// Refer to https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol\\n// https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/access/OwnableUpgradeable.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ncontract SafeOwnableUpgradeable is Initializable, ContextUpgradeable {\\n    error CallerNotOwner();\\n    error ZeroAddressOwnerSet();\\n    error CallerNotPendingOwner();\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT =\\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address owner_) internal onlyInitializing {\\n        __Ownable_init_unchained(owner_);\\n    }\\n\\n    function __Ownable_init_unchained(\\n        address owner_\\n    ) internal onlyInitializing {\\n        _transferOwnership(owner_);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Return the address of the pending owner\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (owner() != _msgSender()) {\\n            revert CallerNotOwner();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     * Note If direct is false, it will set an pending owner and the OwnerShipTransferring\\n     * only happens when the pending owner claim the ownership\\n     */\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct\\n    ) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert ZeroAddressOwnerSet();\\n        }\\n        if (direct) {\\n            _transferOwnership(newOwner);\\n        } else {\\n            _transferPendingOwnership(newOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev pending owner call this function to claim ownership\\n     */\\n    function claimOwnership() public {\\n        if (msg.sender != _pendingOwner) {\\n            revert CallerNotPendingOwner();\\n        }\\n\\n        _claimOwnership();\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        // compatible with hardhat-deploy, maybe removed later\\n        assembly {\\n            sstore(_ADMIN_SLOT, newOwner)\\n        }\\n\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev set the pending owner address\\n     * Internal function without access restriction.\\n     */\\n    function _transferPendingOwnership(address newOwner) internal virtual {\\n        _pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _claimOwnership() internal virtual {\\n        address oldOwner = _owner;\\n        emit OwnershipTransferred(oldOwner, _pendingOwner);\\n\\n        _owner = _pendingOwner;\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xff44270255d336c4d01e8efbc2692f16c1c6bff86aab4a64251b3cfaa469ad16\",\"license\":\"MIT\"},\"src/DegenRank.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\nimport {SingleRanking} from \\\"src/lib/SingleRanking.sol\\\";\\nimport {IRebornPortal} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\n\\nlibrary DegenRank {\\n    using SingleRanking for SingleRanking.Data;\\n    using BitMapsUpgradeable for BitMapsUpgradeable.BitMap;\\n\\n    function _enterScoreRank(\\n        IRebornPortal.SeasonData storage _seasonData,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external {\\n        if (value == 0) {\\n            return;\\n        }\\n        // only when length is larger than 100, remove\\n        if (SingleRanking.length(_seasonData._scoreRank) >= 100) {\\n            // get the min value and compare, if new value is not larger, nothing happen\\n            if (value <= _seasonData._minScore) {\\n                return;\\n            }\\n            // remove the smallest in the score rank\\n            uint256 tokenIdWithMinmalScore = _seasonData._scoreRank.get(99, 1)[\\n                0\\n            ];\\n            _seasonData._scoreRank.remove(\\n                tokenIdWithMinmalScore,\\n                _seasonData._minScore\\n            );\\n\\n            // also remove it from tvl rank\\n            _seasonData._isTopHundredScore.unset(tokenIdWithMinmalScore);\\n            _exitTvlRank(\\n                _seasonData._tributeRank,\\n                _seasonData._oldStakeAmounts,\\n                tokenIdWithMinmalScore\\n            );\\n\\n            // set min value\\n            _seasonData._minScore = _seasonData._scoreRank.getNthValue(99);\\n        }\\n\\n        // add to score rank\\n        _seasonData._scoreRank.add(tokenId, value);\\n        // can enter the tvl rank\\n        _seasonData._isTopHundredScore.set(tokenId);\\n\\n        // Enter as a very small value, just ensure it's not zero and pass check\\n        // it doesn't matter too much as really stake has decimal with 18.\\n        // General value woule be much larger than 1\\n        _enterTvlRank(\\n            _seasonData._tributeRank,\\n            _seasonData._isTopHundredScore,\\n            _seasonData._oldStakeAmounts,\\n            tokenId,\\n            1\\n        );\\n    }\\n\\n    /**\\n     * @dev set a new value in tree, only save top x largest value\\n     * @param value new value enters in the tree\\n     */\\n    function _enterTvlRank(\\n        SingleRanking.Data storage _tributeRank,\\n        BitMapsUpgradeable.BitMap storage _isTopHundredScore,\\n        mapping(uint256 => uint256) storage _oldStakeAmounts,\\n        uint256 tokenId,\\n        uint256 value\\n    ) public {\\n        // if it's not one hundred score, nothing happens\\n        if (!_isTopHundredScore.get(tokenId)) {\\n            return;\\n        }\\n\\n        // remove old value from the rank, keep one token Id only one value\\n        if (_oldStakeAmounts[tokenId] != 0) {\\n            _tributeRank.remove(tokenId, _oldStakeAmounts[tokenId]);\\n        }\\n        _tributeRank.add(tokenId, value);\\n        _oldStakeAmounts[tokenId] = value;\\n    }\\n\\n    /**\\n     * @dev if the tokenId's value is zero, it exits the ranking\\n     * @dev reduce rank size and release some gas\\n     * @param tokenId pool tokenId\\n     */\\n    function _exitTvlRank(\\n        SingleRanking.Data storage _tributeRank,\\n        mapping(uint256 => uint256) storage _oldStakeAmounts,\\n        uint256 tokenId\\n    ) internal {\\n        if (_oldStakeAmounts[tokenId] != 0) {\\n            _tributeRank.remove(tokenId, _oldStakeAmounts[tokenId]);\\n            delete _oldStakeAmounts[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88bf6b0b7c06426efc3ad9af203b989eb990f561fee6a8030680317ebeb9acd4\",\"license\":\"GPL-3.0\"},\"src/PortalLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\nimport {IRebornDefination} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {RewardVault} from \\\"src/RewardVault.sol\\\";\\n\\nlibrary PortalLib {\\n    uint256 public constant PERSHARE_BASE = 10e18;\\n    // percentage base of refer reward fees\\n    uint256 public constant PERCENTAGE_BASE = 10000;\\n\\n    enum RewardType {\\n        NativeToken,\\n        RebornToken\\n    }\\n\\n    struct ReferrerRewardFees {\\n        uint16 incarnateRef1Fee;\\n        uint16 incarnateRef2Fee;\\n        uint16 vaultRef1Fee;\\n        uint16 vaultRef2Fee;\\n        uint192 _slotPlaceholder;\\n    }\\n\\n    struct Pool {\\n        uint256 totalAmount;\\n        uint256 accRebornPerShare;\\n        uint256 accNativePerShare;\\n        uint256 epoch;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct Portfolio {\\n        uint256 accumulativeAmount;\\n        uint256 rebornRewardDebt;\\n        uint256 nativeRewardDebt;\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (Amount * pool.accPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user infuse or switchPool. Here's what happens:\\n        //   1. The pool's `accPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n\\n        /// @dev reward for holding the NFT when the NFT is selected\\n        uint256 pendingOwnerRebornReward;\\n        uint256 pendingOwnerNativeReward;\\n    }\\n\\n    struct AirdropConf {\\n        uint8 _dropOn; //                  ---\\n        uint40 _rebornDropInterval; //        |\\n        uint40 _nativeDropInterval; //        |\\n        uint40 _rebornDropLastUpdate; //      |\\n        uint40 _nativeDropLastUpdate; //      |\\n        uint16 _nativeTopDropRatio; //        |\\n        uint16 _nativeRaffleDropRatio; //   |\\n        uint16 _rebornTopEthAmount; // |\\n        uint40 _rebornRaffleEthAmount; //    ---\\n    }\\n\\n    struct VrfConf {\\n        bytes32 keyHash;\\n        uint64 s_subscriptionId;\\n        uint32 callbackGasLimit;\\n        uint32 numWords;\\n        uint16 requestConfirmations;\\n    }\\n\\n    event DropNative(uint256 indexed tokenId);\\n    event DropReborn(uint256 indexed tokenId);\\n    event ClaimRebornDrop(uint256 indexed tokenId, uint256 rebornAmount);\\n    event ClaimNativeDrop(uint256 indexed tokenId, uint256 nativeAmount);\\n    event NewDropConf(AirdropConf conf);\\n    event NewVrfConf(VrfConf conf);\\n    event SignerUpdate(address signer, bool valid);\\n    event ReferReward(\\n        address indexed user,\\n        address indexed ref1,\\n        uint256 amount1,\\n        address indexed ref2,\\n        uint256 amount2,\\n        RewardType rewardType\\n    );\\n\\n    function _claimPoolRebornDrop(\\n        uint256 tokenId,\\n        RewardVault vault,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        Pool storage pool = _seasonData.pools[tokenId];\\n        Portfolio storage portfolio = _seasonData.portfolios[msg.sender][\\n            tokenId\\n        ];\\n\\n        if (portfolio.accumulativeAmount == 0) {\\n            return;\\n        }\\n\\n        uint256 pendingReborn = ((portfolio.accumulativeAmount *\\n            pool.accRebornPerShare) / PERSHARE_BASE) -\\n            portfolio.rebornRewardDebt +\\n            portfolio.pendingOwnerRebornReward;\\n\\n        // set current amount as debt\\n        portfolio.rebornRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accRebornPerShare) /\\n            PERSHARE_BASE;\\n\\n        // clean up reward as owner\\n        portfolio.pendingOwnerRebornReward = 0;\\n\\n        /// @dev send drop\\n        if (pendingReborn > 0) {\\n            vault.reward(msg.sender, pendingReborn);\\n            emit ClaimRebornDrop(tokenId, pendingReborn);\\n        }\\n    }\\n\\n    function _claimPoolNativeDrop(\\n        uint256 tokenId,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        Pool storage pool = _seasonData.pools[tokenId];\\n        Portfolio storage portfolio = _seasonData.portfolios[msg.sender][\\n            tokenId\\n        ];\\n\\n        if (portfolio.accumulativeAmount == 0) {\\n            return;\\n        }\\n\\n        uint256 pendingNative = ((portfolio.accumulativeAmount *\\n            pool.accNativePerShare) / PERSHARE_BASE) -\\n            portfolio.nativeRewardDebt +\\n            portfolio.pendingOwnerNativeReward;\\n\\n        // set current amount as debt\\n        portfolio.nativeRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accNativePerShare) /\\n            PERSHARE_BASE;\\n\\n        // clean up reward as owner\\n        portfolio.pendingOwnerNativeReward = 0;\\n\\n        /// @dev send drop\\n        if (pendingNative > 0) {\\n            payable(msg.sender).transfer(pendingNative);\\n\\n            emit ClaimNativeDrop(tokenId, pendingNative);\\n        }\\n    }\\n\\n    function _flattenRewardDebt(\\n        Pool storage pool,\\n        Portfolio storage portfolio\\n    ) external {\\n        // flatten native reward\\n        portfolio.nativeRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accNativePerShare) /\\n            PERSHARE_BASE;\\n\\n        // flatten reborn reward\\n        portfolio.rebornRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accRebornPerShare) /\\n            PERSHARE_BASE;\\n    }\\n\\n    /**\\n     * @dev calculate drop from a pool\\n     */\\n    function _calculatePoolDrop(\\n        uint256 tokenId,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) public view returns (uint256 pendingNative, uint256 pendingReborn) {\\n        Pool storage pool = _seasonData.pools[tokenId];\\n        Portfolio storage portfolio = _seasonData.portfolios[msg.sender][\\n            tokenId\\n        ];\\n\\n        // if no portfolio, no pending reward\\n        if (portfolio.accumulativeAmount == 0) {\\n            return (pendingNative, pendingReborn);\\n        }\\n\\n        pendingNative =\\n            ((portfolio.accumulativeAmount * pool.accNativePerShare) /\\n                PERSHARE_BASE) -\\n            portfolio.nativeRewardDebt +\\n            portfolio.pendingOwnerNativeReward;\\n\\n        pendingReborn =\\n            ((portfolio.accumulativeAmount * pool.accRebornPerShare) /\\n                PERSHARE_BASE) -\\n            portfolio.rebornRewardDebt +\\n            portfolio.pendingOwnerRebornReward;\\n    }\\n\\n    /**\\n     * @dev read pending reward from specific pool\\n     * @param tokenIds tokenId array of the pools\\n     */\\n    function _pendingDrop(\\n        IRebornDefination.SeasonData storage _seasonData,\\n        uint256[] memory tokenIds\\n    ) external view returns (uint256 pNative, uint256 pReborn) {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            (uint256 n, uint256 r) = _calculatePoolDrop(\\n                tokenIds[i],\\n                _seasonData\\n            );\\n            pNative += n;\\n            pReborn += r;\\n        }\\n    }\\n\\n    function _directDropNativeToTopTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        uint256 dropAmount = (_dropConf._nativeTopDropRatio *\\n            _seasonData._jackpot) / PERCENTAGE_BASE;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            // if tokenId is zero , return\\n            if (tokenId == 0) {\\n                return;\\n            }\\n\\n            Pool storage pool = _seasonData.pools[tokenId];\\n\\n            // if no one tribute, return\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            // 80% to pool\\n            pool.accNativePerShare +=\\n                (4 * dropAmount * PERSHARE_BASE) /\\n                (5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = _seasonData.portfolios[owner][\\n                tokenId\\n            ];\\n            portfolio.pendingOwnerNativeReward += (dropAmount * 1) / 5;\\n\\n            emit DropNative(tokenId);\\n        }\\n    }\\n\\n    function _directDropNativeToRaffleTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        uint256 dropAmount = (_dropConf._nativeRaffleDropRatio *\\n            _seasonData._jackpot) / PERCENTAGE_BASE;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            // if tokenId is zero , return\\n            if (tokenId == 0) {\\n                return;\\n            }\\n\\n            Pool storage pool = _seasonData.pools[tokenId];\\n\\n            // if no one tribute, return\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            // 80% to pool\\n            pool.accNativePerShare +=\\n                (4 * dropAmount * PERSHARE_BASE) /\\n                (5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = _seasonData.portfolios[owner][\\n                tokenId\\n            ];\\n            portfolio.pendingOwnerNativeReward += (dropAmount * 1) / 5;\\n\\n            emit DropNative(tokenId);\\n        }\\n    }\\n\\n    function _directDropRebornToTopTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        uint256 dropAmount = uint256(_dropConf._rebornTopEthAmount) * 1 ether;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            // if tokenId is zero, continue\\n            if (tokenId == 0) {\\n                return;\\n            }\\n            Pool storage pool = _seasonData.pools[tokenId];\\n\\n            // if no one tribute, continue\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            // 80% to pool\\n            pool.accRebornPerShare +=\\n                (dropAmount * 4 * PortalLib.PERSHARE_BASE) /\\n                (5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = _seasonData.portfolios[owner][\\n                tokenId\\n            ];\\n            portfolio.pendingOwnerRebornReward += (dropAmount * 1) / 5;\\n\\n            emit DropReborn(tokenId);\\n        }\\n    }\\n\\n    function _directDropRebornToRaffleTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        uint256 dropAmount = uint256(_dropConf._rebornRaffleEthAmount) *\\n            1 ether;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            // if tokenId is zero, continue\\n            if (tokenId == 0) {\\n                return;\\n            }\\n            Pool storage pool = _seasonData.pools[tokenId];\\n\\n            // if no one tribute, continue\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            // 80% to pool\\n            pool.accRebornPerShare +=\\n                (dropAmount * 4 * PortalLib.PERSHARE_BASE) /\\n                (5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = _seasonData.portfolios[owner][\\n                tokenId\\n            ];\\n            portfolio.pendingOwnerRebornReward += (dropAmount * 1) / 5;\\n\\n            emit DropReborn(tokenId);\\n        }\\n    }\\n\\n    function _toLastHour(uint256 timestamp) internal pure returns (uint256) {\\n        return timestamp - (timestamp % (1 hours));\\n    }\\n\\n    /**\\n     * @dev update signers\\n     * @param toAdd list of to be added signer\\n     * @param toRemove list of to be removed signer\\n     */\\n    function _updateSigners(\\n        mapping(address => bool) storage signers,\\n        address[] calldata toAdd,\\n        address[] calldata toRemove\\n    ) public {\\n        for (uint256 i = 0; i < toAdd.length; i++) {\\n            signers[toAdd[i]] = true;\\n            emit SignerUpdate(toAdd[i], true);\\n        }\\n        for (uint256 i = 0; i < toRemove.length; i++) {\\n            delete signers[toRemove[i]];\\n            emit SignerUpdate(toRemove[i], false);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns referrer and referer reward\\n     * @return ref1  level1 of referrer. direct referrer\\n     * @return ref1Reward  level 1 referrer reward\\n     * @return ref2  level2 of referrer. referrer's referrer\\n     * @return ref2Reward  level 2 referrer reward\\n     */\\n    function _calculateReferReward(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        address account,\\n        uint256 amount,\\n        RewardType rewardType,\\n        uint256 extraReward\\n    )\\n        public\\n        view\\n        returns (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        )\\n    {\\n        ref1 = referrals[account];\\n        ref2 = referrals[ref1];\\n\\n        if (rewardType == RewardType.NativeToken) {\\n            ref1Reward = ref1 == address(0)\\n                ? 0\\n                : (amount * rewardFees.incarnateRef1Fee) / PERCENTAGE_BASE;\\n            ref2Reward = ref2 == address(0)\\n                ? 0\\n                : (amount * rewardFees.incarnateRef2Fee) / PERCENTAGE_BASE;\\n        }\\n\\n        if (rewardType == RewardType.RebornToken) {\\n            ref1Reward = ref1 == address(0)\\n                ? 0\\n                : extraReward +\\n                    (amount * rewardFees.vaultRef1Fee) /\\n                    PERCENTAGE_BASE;\\n            ref2Reward = ref2 == address(0)\\n                ? 0\\n                : (amount * rewardFees.vaultRef2Fee) / PERCENTAGE_BASE;\\n        }\\n    }\\n\\n    /**\\n     * @notice mul 10000 when set. eg: 8% -> 800 18%-> 1800\\n     * @dev set percentage of referrer reward\\n     * @param rewardType 0: incarnate reward 1: engrave reward\\n     */\\n    function _setReferrerRewardFee(\\n        ReferrerRewardFees storage rewardFees,\\n        uint16 refL1Fee,\\n        uint16 refL2Fee,\\n        RewardType rewardType\\n    ) external {\\n        if (rewardType == RewardType.NativeToken) {\\n            rewardFees.incarnateRef1Fee = refL1Fee;\\n            rewardFees.incarnateRef2Fee = refL2Fee;\\n        } else if (rewardType == RewardType.RebornToken) {\\n            rewardFees.vaultRef1Fee = refL1Fee;\\n            rewardFees.vaultRef2Fee = refL2Fee;\\n        }\\n    }\\n\\n    /**\\n     * @dev send NativeToken to referrers\\n     */\\n    function _sendRewardToRefs(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        address account,\\n        uint256 amount\\n    ) public returns (uint256 total) {\\n        (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        ) = _calculateReferReward(\\n                referrals,\\n                rewardFees,\\n                account,\\n                amount,\\n                RewardType.NativeToken,\\n                0\\n            );\\n\\n        if (ref1Reward > 0) {\\n            payable(ref1).transfer(ref1Reward);\\n        }\\n\\n        if (ref2Reward > 0) {\\n            payable(ref2).transfer(ref2Reward);\\n        }\\n\\n        total = ref1Reward + ref2Reward;\\n\\n        emit ReferReward(\\n            account,\\n            ref1,\\n            ref1Reward,\\n            ref2,\\n            ref2Reward,\\n            RewardType.NativeToken\\n        );\\n    }\\n\\n    /**\\n     * @dev vault $REBORN token to referrers\\n     */\\n    function _vaultRewardToRefs(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        RewardVault vault,\\n        address account,\\n        uint256 amount,\\n        uint256 extraReward\\n    ) public {\\n        (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        ) = _calculateReferReward(\\n                referrals,\\n                rewardFees,\\n                account,\\n                amount,\\n                RewardType.RebornToken,\\n                extraReward\\n            );\\n\\n        if (ref1Reward > 0) {\\n            vault.reward(ref1, ref1Reward);\\n        }\\n\\n        if (ref2Reward > 0) {\\n            vault.reward(ref2, ref2Reward);\\n        }\\n\\n        emit ReferReward(\\n            account,\\n            ref1,\\n            ref1Reward,\\n            ref2,\\n            ref2Reward,\\n            RewardType.RebornToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3ea565ed5646d2a62956428a28ecac52a4fcf91ac2c207cead981e28f0290e73\",\"license\":\"GPL-3.0\"},\"src/RBT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {ERC20CappedUpgradeable, ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol\\\";\\nimport {SafeOwnableUpgradeable} from \\\"@p12/contracts-lib/contracts/access/SafeOwnableUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport {ERC20BurnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\n\\nimport {IRebornToken} from \\\"src/interfaces/IRebornToken.sol\\\";\\nimport {RBTStorage} from \\\"src/RBTStorage.sol\\\";\\n\\ncontract RBT is\\n    ERC20PermitUpgradeable,\\n    ERC20CappedUpgradeable,\\n    SafeOwnableUpgradeable,\\n    UUPSUpgradeable,\\n    IRebornToken,\\n    RBTStorage,\\n    ERC20BurnableUpgradeable\\n{\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 cap_,\\n        address owner_\\n    ) public initializer {\\n        __ERC20_init_unchained(name_, symbol_);\\n        __ERC20Capped_init(cap_);\\n        __ERC20Permit_init(name_);\\n        __Ownable_init(owner_);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n\\n    /**\\n     * @dev allow minter to mint it\\n     */\\n    function mint(address to, uint256 amount) external override onlyMinter {\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev update minters\\n     */\\n    function updateMinter(\\n        address[] calldata toAdd,\\n        address[] calldata toRemove\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < toAdd.length; i++) {\\n            minters[toAdd[i]] = true;\\n            emit MinterUpdate(toAdd[i], true);\\n        }\\n        for (uint256 i = 0; i < toRemove.length; i++) {\\n            delete minters[toRemove[i]];\\n            emit MinterUpdate(toRemove[i], false);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount\\n    ) internal virtual override(ERC20CappedUpgradeable, ERC20Upgradeable) {\\n        require(\\n            ERC20Upgradeable.totalSupply() + amount <= cap(),\\n            \\\"ERC20Capped: cap exceeded\\\"\\n        );\\n        ERC20Upgradeable._mint(account, amount);\\n    }\\n\\n    modifier onlyMinter() {\\n        if (!minters[msg.sender]) {\\n            revert NotMinter();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc8454b04aeb9eb400889f2db77aa6e7d4f808bfba970d82c42bfd8a8046f2ea4\",\"license\":\"GPL-3.0\"},\"src/RBTStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ncontract RBTStorage {\\n    mapping(address => bool) public minters;\\n\\n    /// @dev gap for potential vairable\\n    uint256[49] private _gap;\\n}\\n\",\"keccak256\":\"0x91132462ef644018b92a6d56499fd4dba932eb91ea89aee7f05743916df09b7b\",\"license\":\"GPL-3.0\"},\"src/RankUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {RankingRedBlackTree} from \\\"src/lib/RankingRedBlackTree.sol\\\";\\nimport {SingleRanking} from \\\"src/lib/SingleRanking.sol\\\";\\nimport {RebornPortalStorage} from \\\"src/RebornPortalStorage.sol\\\";\\n\\nimport {DegenRank} from \\\"src/DegenRank.sol\\\";\\n\\nabstract contract RankUpgradeable is RebornPortalStorage {\\n    using SingleRanking for SingleRanking.Data;\\n\\n    /**\\n     * @dev set tokenId to rank, only top 100 into rank\\n     * @param tokenId incarnation tokenId\\n     * @param value incarnation life score\\n     */\\n    function _enterScoreRank(uint256 tokenId, uint256 value) internal {\\n        DegenRank._enterScoreRank(_seasonData[_season], tokenId, value);\\n    }\\n\\n    /**\\n     * @dev set a new value in tree, only save top x largest value\\n     * @param value new value enters in the tree\\n     */\\n    function _enterTvlRank(uint256 tokenId, uint256 value) internal {\\n        DegenRank._enterTvlRank(\\n            _seasonData[_season]._tributeRank,\\n            _seasonData[_season]._isTopHundredScore,\\n            _seasonData[_season]._oldStakeAmounts,\\n            tokenId,\\n            value\\n        );\\n    }\\n\\n    /**\\n     * TODO: old data should have higher priority when value is the same\\n     */\\n    function _getTopNTokenId(\\n        uint256 n\\n    ) internal view returns (uint256[] memory values) {\\n        return _seasonData[_season]._tributeRank.get(0, n);\\n    }\\n\\n    /**\\n     * TODO: old data should have higher priority when value is the same\\n     */\\n    function _getFirstNTokenIdByOffSet(\\n        uint256 offSet,\\n        uint256 n\\n    ) internal view returns (uint256[] memory values) {\\n        return _seasonData[_season]._tributeRank.get(offSet, n);\\n    }\\n}\\n\",\"keccak256\":\"0x7efa8de3b3bf8b571eec8adceff0566c2a94fc35c254a6f59e23f01caf6dfa1c\",\"license\":\"GPL-3.0\"},\"src/RebornPortal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\nimport {AutomationCompatible} from \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2Upgradeable} from \\\"src/modified/VRFConsumerBaseV2Upgradeable.sol\\\";\\nimport {SafeOwnableUpgradeable} from \\\"@p12/contracts-lib/contracts/access/SafeOwnableUpgradeable.sol\\\";\\nimport {IRebornPortal} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {IBurnPool} from \\\"src/interfaces/IBurnPool.sol\\\";\\nimport {RebornPortalStorage} from \\\"src/RebornPortalStorage.sol\\\";\\nimport {RBT} from \\\"src/RBT.sol\\\";\\nimport {RewardVault} from \\\"src/RewardVault.sol\\\";\\nimport {RankUpgradeable} from \\\"src/RankUpgradeable.sol\\\";\\nimport {Renderer} from \\\"src/lib/Renderer.sol\\\";\\n\\nimport {PortalLib} from \\\"src/PortalLib.sol\\\";\\nimport {FastArray} from \\\"src/lib/FastArray.sol\\\";\\n\\ncontract RebornPortal is\\n    IRebornPortal,\\n    SafeOwnableUpgradeable,\\n    UUPSUpgradeable,\\n    RebornPortalStorage,\\n    ERC721Upgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    AutomationCompatible,\\n    RankUpgradeable,\\n    VRFConsumerBaseV2Upgradeable\\n{\\n    using BitMapsUpgradeable for BitMapsUpgradeable.BitMap;\\n    using FastArray for FastArray.Data;\\n\\n    /**\\n     * @dev initialize function\\n     * @param rebornToken_ $REBORN token address\\n     * @param owner_ owner address\\n     * @param name_ ERC712 name\\n     * @param symbol_ ERC721 symbol\\n     * @param vrfCoordinator_ chainlink vrf coordinator_ address\\n     */\\n    function initialize(\\n        RBT rebornToken_,\\n        address owner_,\\n        string memory name_,\\n        string memory symbol_,\\n        address vrfCoordinator_\\n    ) public initializer {\\n        if (address(rebornToken_) == address(0)) {\\n            revert ZeroAddressSet();\\n        }\\n        rebornToken = rebornToken_;\\n        __Ownable_init(owner_);\\n        __ERC721_init(name_, symbol_);\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        __VRFConsumerBaseV2_init(vrfCoordinator_);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function incarnate(\\n        Innate calldata innate,\\n        address referrer,\\n        uint256 _soupPrice\\n    )\\n        external\\n        payable\\n        override\\n        checkIncarnationCount\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _refer(referrer);\\n        _incarnate(innate, _soupPrice);\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function engrave(\\n        bytes32 seed,\\n        address user,\\n        uint256 reward,\\n        uint256 score,\\n        uint256 age,\\n        uint256 cost,\\n        string calldata creatorName\\n    ) external override onlySigner whenNotPaused {\\n        if (_seeds.get(uint256(seed))) {\\n            revert SameSeed();\\n        }\\n        _seeds.set(uint256(seed));\\n\\n        // tokenId auto increment\\n        uint256 tokenId = ++idx + (block.chainid * 1e18);\\n\\n        details[tokenId] = LifeDetail(\\n            seed,\\n            user,\\n            uint16(age),\\n            ++rounds[user],\\n            0,\\n            uint128(cost),\\n            uint128(reward),\\n            score,\\n            creatorName\\n        );\\n        // mint erc721\\n        _safeMint(user, tokenId);\\n        // send $REBORN reward\\n        vault.reward(user, reward);\\n\\n        // let tokenId enter the score rank\\n        _enterScoreRank(tokenId, score);\\n\\n        // mint to referrer\\n        _vaultRewardToRefs(user, reward);\\n\\n        emit Engrave(seed, user, tokenId, score, reward);\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function baptise(\\n        address user,\\n        uint256 amount\\n    ) external override onlySigner whenNotPaused {\\n        vault.reward(user, amount);\\n\\n        emit Baptise(user, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function infuse(\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external override whenNotPaused {\\n        _claimPoolDrop(tokenId);\\n        _infuse(tokenId, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function infuse(\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 permitAmount,\\n        uint256 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external override whenNotPaused {\\n        _claimPoolDrop(tokenId);\\n        _permit(permitAmount, deadline, r, s, v);\\n        _infuse(tokenId, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function switchPool(\\n        uint256 fromTokenId,\\n        uint256 toTokenId,\\n        uint256 amount\\n    ) external override whenNotPaused {\\n        _claimPoolDrop(fromTokenId);\\n        _claimPoolDrop(toTokenId);\\n        _decreaseFromPool(fromTokenId, amount);\\n        _increaseToPool(toTokenId, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function claimDrops(\\n        uint256[] calldata tokenIds\\n    ) external override whenNotPaused {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _claimPoolDrop(tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function claimNativeDrops(\\n        uint256[] calldata tokenIds\\n    ) external override whenNotPaused {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            PortalLib._claimPoolNativeDrop(tokenIds[i], _seasonData[_season]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function claimRebornDrops(\\n        uint256[] calldata tokenIds\\n    ) external override whenNotPaused {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            PortalLib._claimPoolRebornDrop(\\n                tokenIds[i],\\n                vault,\\n                _seasonData[_season]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Upkeep perform of chainlink automation\\n     */\\n    function performUpkeep(\\n        bytes calldata performData\\n    ) external override whenNotPaused {\\n        (uint256 t, uint256 id) = abi.decode(performData, (uint256, uint256));\\n\\n        if (t == 1) {\\n            _requestDropReborn();\\n        } else if (t == 2) {\\n            _requestDropNative();\\n        } else if (t == 3) {\\n            _fulfillDropReborn(id);\\n        } else if (t == 4) {\\n            _fulfillDropNative(id);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function toNextSeason() external onlyOwner {\\n        _season += 1;\\n\\n        // pause the contract\\n        _pause();\\n\\n        // 16% jackpot to next season\\n        _seasonData[_season]._jackpot =\\n            (_seasonData[_season - 1]._jackpot * 16) /\\n            100;\\n\\n        emit NewSeason(_season);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unPause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function setDropConf(\\n        PortalLib.AirdropConf calldata conf\\n    ) external override onlyOwner {\\n        _dropConf = conf;\\n        emit PortalLib.NewDropConf(conf);\\n    }\\n\\n    /**\\n     * @inheritdoc IRebornPortal\\n     */\\n    function setVrfConf(\\n        PortalLib.VrfConf calldata conf\\n    ) external override onlyOwner {\\n        _vrfConf = conf;\\n        emit PortalLib.NewVrfConf(conf);\\n    }\\n\\n    /**\\n     * @dev set vault\\n     * @param vault_ new vault address\\n     */\\n    function setVault(RewardVault vault_) external onlyOwner {\\n        vault = vault_;\\n        emit VaultSet(address(vault_));\\n    }\\n\\n    /**\\n     * @dev set incarnation limit\\n     */\\n    function setIncarnationLimit(uint256 limit) external onlyOwner {\\n        _incarnateCountLimit = limit;\\n        emit NewIncarnationLimit(limit);\\n    }\\n\\n    /**\\n     * @dev withdraw token from vault\\n     * @param to the address which owner withdraw token to\\n     */\\n    function withdrawVault(address to) external whenPaused onlyOwner {\\n        vault.withdrawEmergency(to);\\n    }\\n\\n    /**\\n     * @dev burn $REBORN from burn pool\\n     * @param amount burn from burn pool\\n     */\\n    function burnFromBurnPool(uint256 amount) external onlyOwner {\\n        IBurnPool(burnPool).burn(amount);\\n    }\\n\\n    /**\\n     * @dev update signers\\n     * @param toAdd list of to be added signer\\n     * @param toRemove list of to be removed signer\\n     */\\n    function updateSigners(\\n        address[] calldata toAdd,\\n        address[] calldata toRemove\\n    ) external onlyOwner {\\n        PortalLib._updateSigners(signers, toAdd, toRemove);\\n    }\\n\\n    /**\\n     * @notice mul 100 when set. eg: 8% -> 800 18%-> 1800\\n     * @dev set percentage of referrer reward\\n     * @param rewardType 0: incarnate reward 1: engrave reward\\n     */\\n    function setReferrerRewardFee(\\n        uint16 refL1Fee,\\n        uint16 refL2Fee,\\n        PortalLib.RewardType rewardType\\n    ) external onlyOwner {\\n        PortalLib._setReferrerRewardFee(\\n            rewardFees,\\n            refL1Fee,\\n            refL2Fee,\\n            rewardType\\n        );\\n    }\\n\\n    function setExtraReward(uint256 extraReward) external onlyOwner {\\n        _extraReward = extraReward;\\n\\n        emit NewExtraReward(_extraReward);\\n    }\\n\\n    // set burnPool address for pre burn $REBORN\\n    function setBurnPool(address burnPool_) external onlyOwner {\\n        if (burnPool_ == address(0)) {\\n            revert ZeroAddressSet();\\n        }\\n        burnPool = burnPool_;\\n    }\\n\\n    /**\\n     * @dev withdraw native token for reward distribution\\n     * @dev amount how much to withdraw\\n     */\\n    function withdrawNativeToken(uint256 amount) external whenPaused onlyOwner {\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    /**\\n     * @dev read pending reward from specific pool\\n     * @param tokenIds tokenId array of the pools\\n     */\\n    function pendingDrop(\\n        uint256[] memory tokenIds\\n    ) external view returns (uint256 pNative, uint256 pReborn) {\\n        return PortalLib._pendingDrop(_seasonData[_season], tokenIds);\\n    }\\n\\n    /**\\n     * @dev checkUpkeep for chainlink automation\\n     */\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    )\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        if (_dropConf._dropOn == 1) {\\n            // first, check whether airdrop is ready and send vrf request\\n            if (\\n                block.timestamp >\\n                _dropConf._rebornDropLastUpdate + _dropConf._rebornDropInterval\\n            ) {\\n                upkeepNeeded = true;\\n                performData = abi.encode(1, 0);\\n                return (upkeepNeeded, performData);\\n            } else if (\\n                block.timestamp >\\n                _dropConf._nativeDropLastUpdate + _dropConf._nativeDropInterval\\n            ) {\\n                upkeepNeeded = true;\\n                performData = abi.encode(2, 0);\\n                return (upkeepNeeded, performData);\\n            }\\n            // second, check pending drop and execute\\n            if (FastArray.length(_pendingDrops) > 0) {\\n                uint256 id = _pendingDrops.get(0);\\n                upkeepNeeded = true;\\n                if (_vrfRequests[id].t == AirdropVrfType.DropReborn) {\\n                    performData = abi.encode(3, id);\\n                } else if (_vrfRequests[id].t == AirdropVrfType.DropNative) {\\n                    performData = abi.encode(4, id);\\n                }\\n                return (upkeepNeeded, performData);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        return Renderer.renderByTokenId(details, tokenId);\\n    }\\n\\n    /**\\n     * @dev check whether the seed is used on-chain\\n     * @param seed random seed in bytes32\\n     */\\n    function seedExists(bytes32 seed) external view returns (bool) {\\n        return _seeds.get(uint256(seed));\\n    }\\n\\n    /**\\n     * @dev run erc20 permit to approve\\n     */\\n    function _permit(\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal {\\n        rebornToken.permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function _infuse(uint256 tokenId, uint256 amount) internal {\\n        // it's not necessary to check the whether the address of burnPool is zero\\n        // as function tranferFrom does not allow transfer to zero address by default\\n        rebornToken.transferFrom(msg.sender, burnPool, amount);\\n\\n        _increasePool(tokenId, amount);\\n\\n        emit Infuse(msg.sender, tokenId, amount);\\n    }\\n\\n    /**\\n     * @dev implementation of incarnate\\n     */\\n    function _incarnate(Innate calldata innate, uint256 _soupPrice) internal {\\n        uint256 totalFee = _soupPrice +\\n            innate.talentPrice +\\n            innate.propertyPrice;\\n        if (msg.value < totalFee) {\\n            revert InsufficientAmount();\\n        }\\n        // transfer redundant native token back\\n        payable(msg.sender).transfer(msg.value - totalFee);\\n\\n        // reward referrers\\n        uint256 referAmount = _sendRewardToRefs(msg.sender, totalFee);\\n\\n        // rest native token to to jackpot\\n        _seasonData[_season]._jackpot += totalFee - referAmount;\\n\\n        emit Incarnate(\\n            msg.sender,\\n            innate.talentPrice,\\n            innate.propertyPrice,\\n            _soupPrice\\n        );\\n    }\\n\\n    /**\\n     * @dev record referrer relationship\\n     */\\n    function _refer(address referrer) internal {\\n        if (\\n            referrals[msg.sender] == address(0) &&\\n            referrer != address(0) &&\\n            referrer != msg.sender\\n        ) {\\n            referrals[msg.sender] = referrer;\\n            emit Refer(msg.sender, referrer);\\n        }\\n    }\\n\\n    /**\\n     * @dev airdrop to top 100 tvl pool\\n     * @dev directly drop to top 10\\n     * @dev raffle 10 from top 11 - top 100\\n     */\\n    function _fulfillDropReborn(uint256 requestId) internal onlyDropOn {\\n        uint256[] memory topTens = _getTopNTokenId(10);\\n        uint256[] memory topTenToHundreds = _getFirstNTokenIdByOffSet(10, 90);\\n\\n        PortalLib._directDropRebornToTopTokenIds(\\n            topTens,\\n            _dropConf,\\n            _seasonData[_season]\\n        );\\n\\n        uint256[] memory selectedTokenIds = new uint256[](10);\\n\\n        RequestStatus storage rs = _vrfRequests[requestId];\\n        rs.executed = true;\\n\\n        for (uint256 i = 0; i < 10; i++) {\\n            selectedTokenIds[i] = topTenToHundreds[rs.randomWords[i] % 90];\\n        }\\n\\n        PortalLib._directDropRebornToRaffleTokenIds(\\n            selectedTokenIds,\\n            _dropConf,\\n            _seasonData[_season]\\n        );\\n\\n        _pendingDrops.remove(requestId);\\n    }\\n\\n    /**\\n     * @dev airdrop to top 100 tvl pool\\n     * @dev directly drop to top 10\\n     * @dev raffle 10 from top 11 - top 100\\n     */\\n    function _fulfillDropNative(uint256 requestId) internal onlyDropOn {\\n        uint256[] memory topTens = _getTopNTokenId(10);\\n        uint256[] memory topTenToHundreds = _getFirstNTokenIdByOffSet(10, 90);\\n\\n        PortalLib._directDropNativeToTopTokenIds(\\n            topTens,\\n            _dropConf,\\n            _seasonData[_season]\\n        );\\n\\n        uint256[] memory selectedTokenIds = new uint256[](10);\\n\\n        RequestStatus storage rs = _vrfRequests[requestId];\\n        rs.executed = true;\\n\\n        for (uint256 i = 0; i < 10; i++) {\\n            selectedTokenIds[i] = topTenToHundreds[rs.randomWords[i] % 90];\\n        }\\n\\n        PortalLib._directDropNativeToRaffleTokenIds(\\n            selectedTokenIds,\\n            _dropConf,\\n            _seasonData[_season]\\n        );\\n\\n        // remove the amount from jackpot\\n        uint256 totalDropAmount = (((uint256(_dropConf._nativeTopDropRatio) *\\n            10) + (uint256(_dropConf._nativeRaffleDropRatio) * 10)) *\\n            _seasonData[_season]._jackpot) / PortalLib.PERCENTAGE_BASE;\\n        _seasonData[_season]._jackpot -= totalDropAmount;\\n\\n        _pendingDrops.remove(requestId);\\n    }\\n\\n    function _requestDropReborn() internal onlyDropOn {\\n        // update last drop timestamp to specific hour\\n        _dropConf._rebornDropLastUpdate = uint40(\\n            PortalLib._toLastHour(block.timestamp)\\n        );\\n\\n        // raffle\\n        uint256 requestId = VRFCoordinatorV2Interface(vrfCoordinator)\\n            .requestRandomWords(\\n                _vrfConf.keyHash,\\n                _vrfConf.s_subscriptionId,\\n                _vrfConf.requestConfirmations,\\n                _vrfConf.callbackGasLimit,\\n                _vrfConf.numWords\\n            );\\n\\n        _vrfRequests[requestId].exists = true;\\n        _vrfRequests[requestId].t = AirdropVrfType.DropReborn;\\n    }\\n\\n    function _requestDropNative() internal onlyDropOn {\\n        // update last drop timestamp to specific hour\\n        _dropConf._nativeDropLastUpdate = uint40(\\n            PortalLib._toLastHour(block.timestamp)\\n        );\\n\\n        // raffle\\n        uint256 requestId = VRFCoordinatorV2Interface(vrfCoordinator)\\n            .requestRandomWords(\\n                _vrfConf.keyHash,\\n                _vrfConf.s_subscriptionId,\\n                _vrfConf.requestConfirmations,\\n                _vrfConf.callbackGasLimit,\\n                _vrfConf.numWords\\n            );\\n\\n        _vrfRequests[requestId].exists = true;\\n        _vrfRequests[requestId].t = AirdropVrfType.DropNative;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        if (\\n            !_vrfRequests[requestId].fulfilled && _vrfRequests[requestId].exists\\n        ) {\\n            _vrfRequests[requestId].randomWords = randomWords;\\n            _vrfRequests[requestId].fulfilled = true;\\n\\n            _pendingDrops.insert(requestId);\\n        }\\n    }\\n\\n    /**\\n     * @dev user claim a drop from a pool\\n     */\\n    function _claimPoolDrop(uint256 tokenId) internal nonReentrant {\\n        PortalLib._claimPoolNativeDrop(tokenId, _seasonData[_season]);\\n        PortalLib._claimPoolRebornDrop(tokenId, vault, _seasonData[_season]);\\n    }\\n\\n    /**\\n     * @dev vault $REBORN token to referrers\\n     */\\n    function _vaultRewardToRefs(address account, uint256 amount) internal {\\n        PortalLib._vaultRewardToRefs(\\n            referrals,\\n            rewardFees,\\n            vault,\\n            account,\\n            amount,\\n            _extraReward\\n        );\\n    }\\n\\n    /**\\n     * @dev send NativeToken to referrers\\n     */\\n    function _sendRewardToRefs(\\n        address account,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        return\\n            PortalLib._sendRewardToRefs(referrals, rewardFees, account, amount);\\n    }\\n\\n    /**\\n     * @dev decrease amount from pool of switch from\\n     */\\n    function _decreaseFromPool(uint256 tokenId, uint256 amount) internal {\\n        PortalLib.Portfolio storage portfolio = _seasonData[_season].portfolios[\\n            msg.sender\\n        ][tokenId];\\n        PortalLib.Pool storage pool = _seasonData[_season].pools[tokenId];\\n\\n        // don't need to check accumulativeAmount, as it would revert if accumulativeAmount is less\\n        portfolio.accumulativeAmount -= amount;\\n        pool.totalAmount -= amount;\\n\\n        PortalLib._flattenRewardDebt(pool, portfolio);\\n\\n        _enterTvlRank(tokenId, pool.totalAmount);\\n\\n        emit DecreaseFromPool(msg.sender, tokenId, amount);\\n    }\\n\\n    /**\\n     * @dev increase amount to pool of switch to\\n     */\\n    function _increaseToPool(uint256 tokenId, uint256 amount) internal {\\n        uint256 restakeAmount = (amount * 95) / 100;\\n\\n        _increasePool(tokenId, restakeAmount);\\n\\n        emit IncreaseToPool(msg.sender, tokenId, restakeAmount);\\n    }\\n\\n    function _increasePool(uint256 tokenId, uint256 amount) internal {\\n        PortalLib.Portfolio storage portfolio = _seasonData[_season].portfolios[\\n            msg.sender\\n        ][tokenId];\\n        portfolio.accumulativeAmount += amount;\\n\\n        PortalLib.Pool storage pool = _seasonData[_season].pools[tokenId];\\n        pool.totalAmount += amount;\\n\\n        PortalLib._flattenRewardDebt(pool, portfolio);\\n\\n        _enterTvlRank(tokenId, pool.totalAmount);\\n    }\\n\\n    /**\\n     * @dev returns referrer and referer reward\\n     * @return ref1  level1 of referrer. direct referrer\\n     * @return ref1Reward  level 1 referrer reward\\n     * @return ref2  level2 of referrer. referrer's referrer\\n     * @return ref2Reward  level 2 referrer reward\\n     */\\n    function calculateReferReward(\\n        address account,\\n        uint256 amount,\\n        PortalLib.RewardType rewardType\\n    )\\n        public\\n        view\\n        returns (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        )\\n    {\\n        return\\n            PortalLib._calculateReferReward(\\n                referrals,\\n                rewardFees,\\n                account,\\n                amount,\\n                rewardType,\\n                _extraReward\\n            );\\n    }\\n\\n    /**\\n     * @dev read pool attribute\\n     */\\n    function getPool(\\n        uint256 tokenId\\n    ) public view returns (PortalLib.Pool memory) {\\n        return _seasonData[_season].pools[tokenId];\\n    }\\n\\n    /**\\n     * @dev read pool attribute\\n     */\\n    function getPortfolio(\\n        address user,\\n        uint256 tokenId\\n    ) public view returns (PortalLib.Portfolio memory) {\\n        return _seasonData[_season].portfolios[user][tokenId];\\n    }\\n\\n    function getDropConf() public view returns (PortalLib.AirdropConf memory) {\\n        return _dropConf;\\n    }\\n\\n    /**\\n     * A -> B -> C: B: level1 A: level2\\n     * @dev referrer1: level1 of referrers referrer2: level2 of referrers\\n     */\\n    function getRerferrers(\\n        address account\\n    ) public view returns (address referrer1, address referrer2) {\\n        referrer1 = referrals[account];\\n        referrer2 = referrals[referrer1];\\n    }\\n\\n    /**\\n     * @dev return the jackpot amount of current season\\n     */\\n    function getJackPot() public view returns (uint256) {\\n        return _seasonData[_season]._jackpot;\\n    }\\n\\n    /**\\n     * @dev check signer implementation\\n     */\\n    function _checkSigner() internal view {\\n        if (!signers[msg.sender]) {\\n            revert NotSigner();\\n        }\\n    }\\n\\n    /**\\n     * @dev check incarnation Count and auto increment if it meets\\n     */\\n    modifier checkIncarnationCount() {\\n        if (_incarnateCounts[msg.sender] >= _incarnateCountLimit) {\\n            revert IncarnationExceedLimit();\\n        }\\n        _incarnateCounts[msg.sender] += 1;\\n        _;\\n    }\\n\\n    /**\\n     * @dev only allowed signer address can do something\\n     */\\n    modifier onlySigner() {\\n        _checkSigner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev only allowed when drop is on\\n     */\\n    modifier onlyDropOn() {\\n        if (_dropConf._dropOn == 0) {\\n            revert DropOff();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdd9ba731026f2fa3aef2b67fc56e887595004d822973307dd4b0262a97979e60\",\"license\":\"GPL-3.0\"},\"src/RebornPortalStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IRebornDefination} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {RBT} from \\\"src/RBT.sol\\\";\\nimport {RewardVault} from \\\"src/RewardVault.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\nimport {SingleRanking} from \\\"src/lib/SingleRanking.sol\\\";\\nimport {PortalLib} from \\\"src/PortalLib.sol\\\";\\nimport {FastArray} from \\\"src/lib/FastArray.sol\\\";\\n\\ncontract RebornPortalStorage is IRebornDefination {\\n    uint256 internal _season;\\n\\n    RBT public rebornToken;\\n\\n    mapping(address => bool) public signers;\\n\\n    mapping(address => uint32) internal rounds;\\n\\n    uint256 internal idx;\\n\\n    mapping(uint256 => LifeDetail) internal details;\\n\\n    mapping(uint256 => SeasonData) internal _seasonData;\\n\\n    mapping(address => address) internal referrals;\\n    PortalLib.ReferrerRewardFees public rewardFees;\\n\\n    RewardVault public vault;\\n\\n    BitMapsUpgradeable.BitMap internal _seeds;\\n\\n    // airdrop config\\n    PortalLib.AirdropConf internal _dropConf;\\n\\n    address public burnPool;\\n\\n    PortalLib.VrfConf internal _vrfConf;\\n\\n    // requestId =>\\n    mapping(uint256 => RequestStatus) internal _vrfRequests;\\n\\n    FastArray.Data internal _pendingDrops;\\n\\n    // extra reward to parent referrer\\n    uint256 internal _extraReward;\\n\\n    // uesless var for backward compatibility\\n    bool internal _g;\\n\\n    // user address => count\\n    mapping(address => uint256) internal _incarnateCounts;\\n\\n    // max incarnation count\\n    uint256 internal _incarnateCountLimit;\\n\\n    /// @dev gap for potential variable\\n    uint256[30] private _gap;\\n}\\n\",\"keccak256\":\"0x62f8ab51835ede472d7297d3a77fe098a8ef705ed0e3c3a8ea24a727fc337f33\",\"license\":\"GPL-3.0\"},\"src/RewardVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IRewardVault} from \\\"src/interfaces/IRewardVault.sol\\\";\\n\\ncontract RewardVault is IRewardVault, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable rebornToken;\\n\\n    constructor(address owner_, address rebornToken_) {\\n        if (rebornToken_ == address(0)) revert ZeroAddressSet();\\n        _transferOwnership(owner_);\\n        rebornToken = rebornToken_;\\n    }\\n\\n    /**\\n     * @notice Send reward to user\\n     * @param to The address of awards\\n     * @param amount number of awards\\n     */\\n    function reward(\\n        address to,\\n        uint256 amount\\n    ) external virtual override onlyOwner {\\n        IERC20(rebornToken).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice withdraw token Emergency\\n     */\\n    function withdrawEmergency(address to) external virtual override onlyOwner {\\n        if (to == address(0)) revert ZeroAddressSet();\\n        IERC20(rebornToken).safeTransfer(\\n            to,\\n            IERC20(rebornToken).balanceOf(address(this))\\n        );\\n        emit WithdrawEmergency(\\n            rebornToken,\\n            IERC20(rebornToken).balanceOf(address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x630c746afc9d06768752c0eb57c5084aca185ebe9f22eba1e2a735523006b699\",\"license\":\"GPL-3.0\"},\"src/interfaces/IBurnPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IBurnPool {\\n    error ZeroRebornTokenSet();\\n    error ZeroOwnerSet();\\n\\n    event Burn(uint256 amount);\\n\\n    // burn expect amount of $REBORN\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xbe7f26507e66da03e64467b6d332a719b042bccf2596b4488fe6999ab58f63d5\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRebornPortal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {PortalLib} from \\\"src/PortalLib.sol\\\";\\nimport {SingleRanking} from \\\"src/lib/SingleRanking.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\n\\ninterface IRebornDefination {\\n    struct Innate {\\n        uint256 talentPrice;\\n        uint256 propertyPrice;\\n    }\\n\\n    struct LifeDetail {\\n        bytes32 seed;\\n        address creator;\\n        uint16 age;\\n        uint32 round;\\n        uint48 nothing;\\n        uint128 cost;\\n        uint128 reward;\\n        uint256 score;\\n        string creatorName;\\n    }\\n\\n    struct SeasonData {\\n        mapping(uint256 => PortalLib.Pool) pools;\\n        /// @dev user address => pool tokenId => Portfolio\\n        mapping(address => mapping(uint256 => PortalLib.Portfolio)) portfolios;\\n        SingleRanking.Data _tributeRank;\\n        SingleRanking.Data _scoreRank;\\n        mapping(uint256 => uint256) _oldStakeAmounts;\\n        /// tokenId => bool\\n        BitMapsUpgradeable.BitMap _isTopHundredScore;\\n        // the value of minimum score\\n        uint256 _minScore;\\n        // jackpot of this season\\n        uint256 _jackpot;\\n    }\\n\\n    enum AirdropVrfType {\\n        Invalid,\\n        DropReborn,\\n        DropNative\\n    }\\n\\n    struct RequestStatus {\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        bool executed; // whether the airdrop is executed\\n        AirdropVrfType t;\\n        uint256[] randomWords;\\n    }\\n\\n    event Incarnate(\\n        address indexed user,\\n        uint256 indexed talentPrice,\\n        uint256 indexed PropertyPrice,\\n        uint256 soupPrice\\n    );\\n\\n    event Engrave(\\n        bytes32 indexed seed,\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        uint256 score,\\n        uint256 reward\\n    );\\n\\n    event Infuse(address indexed user, uint256 indexed tokenId, uint256 amount);\\n\\n    event Dry(address indexed user, uint256 indexed tokenId, uint256 amount);\\n\\n    event Baptise(address indexed user, uint256 amount);\\n\\n    event NewSoupPrice(uint256 price);\\n\\n    event Refer(address referee, address referrer);\\n\\n    event DecreaseFromPool(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    event IncreaseToPool(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    event Drop(uint256[] tokenIds);\\n\\n    /// @dev event about the vault address is set\\n    event VaultSet(address rewardVault);\\n\\n    event NewSeason(uint256);\\n\\n    event NewExtraReward(uint256 extraReward);\\n\\n    event BetaStageSet(bool);\\n\\n    event NewIncarnationLimit(uint256 limit);\\n\\n    /// @dev revert when msg.value is insufficient\\n    error InsufficientAmount();\\n    /// @dev revert when to caller is not signer\\n    error NotSigner();\\n\\n    /// @dev revert when some address var are set to zero\\n    error ZeroAddressSet();\\n\\n    /// @dev revert when the random seed is duplicated\\n    error SameSeed();\\n\\n    /// @dev revert if burnPool address not set when infuse\\n    error NotSetBurnPoolAddress();\\n\\n    /// @dev revert when the drop is not on\\n    error DropOff();\\n\\n    /// @dev revert when incarnation count exceed limit\\n    error IncarnationExceedLimit();\\n}\\n\\ninterface IRebornPortal is IRebornDefination {\\n    /**\\n     * @dev user buy the innate for the life\\n     * @param innate talent and property choice\\n     * @param referrer the referrer address\\n     */\\n    function incarnate(\\n        Innate memory innate,\\n        address referrer,\\n        uint256 soupPrice\\n    ) external payable;\\n\\n    /**\\n     * @dev engrave the result on chain and reward\\n     * @param seed random seed in bytes32\\n     * @param user user address\\n     * @param reward $REBORN user earns, decimal 10^18\\n     * @param score life score\\n     * @param cost user cost for this life\\n     */\\n    function engrave(\\n        bytes32 seed,\\n        address user,\\n        uint256 reward,\\n        uint256 score,\\n        uint256 age,\\n        uint256 cost,\\n        string calldata creatorName\\n    ) external;\\n\\n    /**\\n     * @dev reward for share the game\\n     * @param user user address\\n     * @param amount amount for reward\\n     */\\n    function baptise(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev stake $REBORN on this tombstone\\n     * @param tokenId tokenId of the life to stake\\n     * @param amount stake amount, decimal 10^18\\n     */\\n    function infuse(uint256 tokenId, uint256 amount) external;\\n\\n    /**\\n     * @dev stake $REBORN with permit\\n     * @param tokenId tokenId of the life to stake\\n     * @param amount amount of $REBORN to stake\\n     * @param permitAmount amount of $REBORN to approve\\n     * @param r r of signature\\n     * @param s v of signature\\n     * @param v v of signature\\n     */\\n    function infuse(\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 permitAmount,\\n        uint256 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external;\\n\\n    /**\\n     * @dev switch stake amount from poolFrom to poolTo\\n     * @param fromTokenId tokenId of from pool\\n     * @param toTokenId tokenId of to pool\\n     * @param amount amount to switch\\n     */\\n    function switchPool(\\n        uint256 fromTokenId,\\n        uint256 toTokenId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev set new airdrop config\\n     */\\n    function setDropConf(PortalLib.AirdropConf calldata conf) external;\\n\\n    /**\\n     * @dev set new chainlink vrf v2 config\\n     */\\n    function setVrfConf(PortalLib.VrfConf calldata conf) external;\\n\\n    /**\\n     * @dev user claim many pools' native token airdrop\\n     * @param tokenIds pools' tokenId array to claim\\n     */\\n    function claimNativeDrops(uint256[] calldata tokenIds) external;\\n\\n    /**\\n     * @dev user claim many pools' reborn token airdrop\\n     * @param tokenIds pools' tokenId array to claim\\n     */\\n    function claimRebornDrops(uint256[] calldata tokenIds) external;\\n\\n    /**\\n     * @dev user claim many pools' airdrop\\n     * @param tokenIds pools' tokenId array to claim\\n     */\\n    function claimDrops(uint256[] calldata tokenIds) external;\\n\\n    /**\\n     * @dev switch to next season, call by owner\\n     */\\n    function toNextSeason() external;\\n}\\n\",\"keccak256\":\"0xe0c79ac11f9ca265b9ae48e36ae67624126c3bd0910f69339fbef7f883baa0d6\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRebornToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n\\ninterface IRebornTokenDef {\\n    /// @dev revert when the caller is not minter \\n    error NotMinter();\\n    /// @dev emit when minter is updated\\n    event MinterUpdate(address minter, bool valid);\\n}\\n\\ninterface IRebornToken is\\n    IERC20Upgradeable,\\n    IERC20PermitUpgradeable,\\n    IRebornTokenDef\\n{\\n    function mint(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd75b40437b67e78c77852d16c8b216232745ad7189736ad5d5b041b81bb2ad30\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRewardVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IRewardVault {\\n    error ZeroAddressSet();\\n    \\n    function reward(address to, uint256 amount) external; // send reward\\n\\n    function withdrawEmergency(address to) external;\\n\\n    event WithdrawEmergency(address p12Token, uint256 amount);\\n}\\n\",\"keccak256\":\"0x45f05e6c373a4bb604ed8f894b77dd363c40bfb9ec171ec720893bb7e39bd45a\",\"license\":\"GPL-3.0\"},\"src/lib/FastArray.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// A simple array that supports insert and removal.\\n// The values are assumed to be unique and the library is meant to be lightweight.\\n// So when calling insert or remove, the caller is responsible to know whether a value already exists in the array or not.\\nlibrary FastArray {\\n    struct Data {\\n        mapping(uint256 => uint256) array;\\n        mapping(uint256 => uint256) indexMap;\\n        uint256 length;\\n    }\\n\\n    /**\\n     * @notice please confirm no eq item exist before insert\\n     */\\n    function insert(Data storage _fastArray, uint256 _value) internal {\\n        _fastArray.array[_fastArray.length] = _value;\\n        _fastArray.indexMap[_value] = _fastArray.length;\\n        _fastArray.length += 1;\\n    }\\n\\n    /**\\n     * @dev remove item from array,but not keep rest item sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function remove(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        _fastArray.array[index] = _fastArray.array[_fastArray.length - 1];\\n        delete _fastArray.indexMap[_value];\\n        delete _fastArray.array[_fastArray.length - 1];\\n\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @dev remove item and keep rest item in sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function removeKeepSort(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        uint256 tempLastItem = _fastArray.array[_fastArray.length - 1];\\n\\n        for (uint256 i = index; i < _fastArray.length - 1; i++) {\\n            _fastArray.indexMap[_fastArray.array[i + 1]] = i;\\n            _fastArray.array[i] = _fastArray.array[i + 1];\\n        }\\n\\n        delete _fastArray.indexMap[tempLastItem];\\n        delete _fastArray.array[_fastArray.length - 1];\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @notice PLease confirm index is not out of bounds\\n     */\\n    function get(\\n        Data storage _fastArray,\\n        uint256 _index\\n    ) public view returns (uint256) {\\n        return _fastArray.array[_index];\\n    }\\n\\n    function length(Data storage _fastArray) public view returns (uint256) {\\n        return _fastArray.length;\\n    }\\n\\n    function contains(\\n        Data storage _fastArray,\\n        uint256 _value\\n    ) public view returns (bool) {\\n        return _fastArray.indexMap[_value] != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1aafe47d78876fe514a190e95a87f4720f33617712c66cf95ab73c6dc3a19f3d\",\"license\":\"UNLICENSED\"},\"src/lib/RankingRedBlackTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// A red-black tree that holds a \\\"count\\\" variable next to the value in the tree.\\n// This library is used to resolve which values should be skipped to respect the _offset when querying from the rank library.\\n// The focal function is \\\"lastByOffset\\\" which starts from the largest value in the tree and traverses backwards to find the\\n// first value that is included in the offset specified and returns it.\\n// The nodes are accessed by a key and other properties can be queried using the key.\\n// This library is a modification of BokkyPooBah's Red-Black Tree Library which has a MIT licence.\\n// Following is the original description and the license:\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n// Here is the license attached to this library:\\n// ----------------------------------------------------------------------------\\n// MIT License\\n//\\n// Copyright (c) 2018 The Officious BokkyPooBah\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n// ----------------------------------------------------------------------------\\nlibrary RankingRedBlackTree {\\n    struct Node {\\n        uint id;\\n        uint value;\\n        uint count;\\n        uint parent;\\n        uint left;\\n        uint right;\\n        bool red;\\n    }\\n\\n    struct Tree {\\n        uint root;\\n        mapping(uint => Node) nodes;\\n        uint counter;\\n    }\\n\\n    uint private constant EMPTY = 0;\\n\\n    function first(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].left != EMPTY) {\\n                _key = self.nodes[_key].left;\\n            }\\n        }\\n    }\\n\\n    function last(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].right != EMPTY) {\\n                _key = self.nodes[_key].right;\\n            }\\n        }\\n    }\\n\\n    function lastByOffset(\\n        Tree storage self,\\n        uint _offset\\n    ) public view returns (uint, uint) {\\n        uint key = last(self);\\n\\n        while (key != EMPTY && _offset > self.nodes[key].count) {\\n            _offset -= self.nodes[key].count;\\n            key = prev(self, key);\\n        }\\n\\n        return (key, _offset);\\n    }\\n\\n    function next(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function find(Tree storage self, uint _value) public view returns (uint) {\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            if (_value == self.nodes[probe].value) {\\n                return probe;\\n            }\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        return EMPTY;\\n    }\\n\\n    function value(Tree storage self, uint _key) public view returns (uint) {\\n        return self.nodes[_key].value;\\n    }\\n\\n    function addToCount(Tree storage self, uint _value, uint amount) internal {\\n        self.nodes[find(self, _value)].count += amount;\\n    }\\n\\n    function minusFromCount(\\n        Tree storage self,\\n        uint _value,\\n        uint amount\\n    ) internal {\\n        self.nodes[find(self, _value)].count -= amount;\\n    }\\n\\n    function insert(Tree storage self, uint _value) internal returns (uint) {\\n        uint cursor = EMPTY;\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.counter += 1;\\n        self.nodes[self.counter] = Node({\\n            id: self.counter,\\n            value: _value,\\n            count: 1,\\n            parent: cursor,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true\\n        });\\n        if (cursor == EMPTY) {\\n            self.root = self.counter;\\n        } else if (_value < self.nodes[cursor].value) {\\n            self.nodes[cursor].left = self.counter;\\n        } else {\\n            self.nodes[cursor].right = self.counter;\\n        }\\n        insertFixup(self, self.counter);\\n        return self.counter;\\n    }\\n\\n    function remove(Tree storage self, uint _value) internal {\\n        uint key = find(self, _value);\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function removeWithKey(Tree storage self, uint key) internal {\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function treeMinimum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].right;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].left;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(self, self.nodes[keyParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[keyParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(Tree storage self, uint a, uint b) private {\\n        uint bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n\",\"keccak256\":\"0x37e4825ff13d1868ec248d4fd3657e1074456733a82079c424ff0f2fe22f7163\",\"license\":\"MIT\"},\"src/lib/RenderConstant.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary RenderConstant {\\n    string internal constant _P1 =\\n        '<svg width=\\\"1244\\\" height=\\\"704\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><path d=\\\"M2.5 701.5V95.051L97.02 2.5H1241.5v699H2.5z\\\" fill=\\\"url(#prefix__p0)\\\" stroke=\\\"url(#prefix__p1)\\\" stroke-width=\\\"5\\\"/><path d=\\\"M1240 10H86.11v2.346H1240V10zM76.727 19.384H1240v2.346H76.727v-2.346zM4 169.529h1236v2.346H4v-2.346zM1240 56.92H39.19v2.346H1240V56.92zM4 207.066h1236v2.346H4v-2.346zM1240 94.457H4v2.346h1236v-2.346zM4 329.059h1236v2.346H4v-2.346zM1240 244.602H4v2.346h1236v-2.346zM4 131.993h1236v2.346H4v-2.346zM1240 282.138H4v2.346h1236v-2.346zM57.959 38.152H1240v2.346H57.959v-2.346zM1240 188.298H4v2.346h1236v-2.346zM20.422 75.689H1240v2.346H20.422v-2.346zM1240 310.291H4v2.346h1236v-2.346zM4 225.834h1236v2.346H4v-2.346zM1240 113.225H4v2.346h1236v-2.346zM4 263.37h1236v2.346H4v-2.346zM1240 150.761H4v2.346h1236v-2.346zM4 300.907h1236v2.346H4v-2.346zM4 160.145h1236v2.346H4v-2.346zM1240 47.536H48.574v2.346H1240v-2.346zM4 197.682h1236v2.346H4v-2.346zM1240 85.073H11.038v2.346H1240v-2.346zM4 319.675h1236v2.346H4v-2.346zM1240 235.218H4v2.346h1236v-2.346zM4 122.609h1236v2.346H4v-2.346zM1240 272.754H4v2.346h1236v-2.346zM67.343 28.768H1240v2.346H67.343v-2.346zM1240 178.913H4v2.347h1236v-2.347zM29.806 66.305H1240v2.345H29.806v-2.346zM1240 216.45H4v2.346h1236v-2.346zM4 103.841h1236v2.346H4v-2.346zM1240 338.443H4v2.346h1236v-2.346zM4 253.986h1236v2.346H4v-2.346zM1240 141.377H4v2.346h1236v-2.346zM4 291.522h1236v2.346H4v-2.346zM4 347.827h1236v2.346H4v-2.346zM1240 357.211H4v2.346h1236v-2.346zM1240 507.356H4v2.346h1236v-2.346zM4 394.747h1236v2.346H4v-2.346zM1240 544.893H4v2.346h1236v-2.346zM4 432.284h1236v2.346H4v-2.346zM1240 666.886H4v2.346h1236v-2.346zM4 582.429h1236v2.346H4v-2.346zM1240 469.82H4v2.346h1236v-2.346zM4 619.965h1236v2.346H4v-2.346zM1240 375.979H4v2.346h1236v-2.346zM4 526.125h1236v2.346H4v-2.346zM1240 413.516H4v2.346h1236v-2.346zM4 648.118h1236v2.346H4v-2.346zM1240 563.661H4v2.346h1236v-2.346zM4 451.052h1236v2.346H4v-2.346zM1240 601.197H4v2.346h1236v-2.346zM4 488.588h1236v2.346H4v-2.346zM1240 638.734H4v2.346h1236v-2.346zM1240 497.972H4v2.346h1236v-2.346zM4 385.363h1236v2.346H4v-2.346zM1240 535.509H4v2.346h1236v-2.346zM4 422.9h1236v2.346H4V422.9zM1240 657.502H4v2.346h1236v-2.346zM4 573.045h1236v2.346H4v-2.346zM1240 460.436H4v2.346h1236v-2.346zM4 610.581h1236v2.346H4v-2.346zM1240 366.595H4v2.346h1236v-2.346zM4 516.74h1236v2.346H4v-2.346zM1240 404.131H4v2.347h1236v-2.347zM4 554.277h1236v2.346H4v-2.346zM1240 441.668H4v2.346h1236v-2.346zM4 676.27h1236v2.346H4v-2.346zM1240 685.654H4V688h1236v-2.346zM4 591.813h1236v2.346H4v-2.346zM1240 479.204H4v2.346h1236v-2.346zM4 629.349h1236v2.346H4v-2.346z\\\" fill=\\\"url(#prefix__p2)\\\"/><path d=\\\"M1244 12V0H96L0 94v18L102 12h1142z\\\" fill=\\\"#F98701\\\"/><text dx=\\\"76\\\" dy=\\\"605\\\" dominant-baseline=\\\"central\\\" style=\\\"height:100px\\\" font-family=\\\"VT323\\\" textLength=\\\"1075\\\" font-size=\\\"60\\\" fill=\\\"#FF8A01\\\">Seed: ';\\n    string internal constant _P2 =\\n        '</text><text dx=\\\"76\\\" dy=\\\"116\\\" dominant-baseline=\\\"central\\\" font-family=\\\"Black Ops One\\\" textLength=\\\"300\\\" font-weight=\\\"400\\\" font-size=\\\"60\\\" fill=\\\"#FF8A01\\\">LifeScore</text><text dx=\\\"76\\\" dy=\\\"230\\\" dominant-baseline=\\\"central\\\" font-family=\\\"Black Ops One\\\" font-weight=\\\"400\\\" font-size=\\\"120\\\" fill=\\\"#FF8A01\\\">';\\n    string internal constant _P3 =\\n        '</text><text dx=\\\"697\\\" dy=\\\"425\\\" dominant-baseline=\\\"central\\\" font-family=\\\"VT323\\\" font-weight=\\\"100\\\" font-size=\\\"79\\\" fill=\\\"#FFF\\\">Re:';\\n    string internal constant _P4 =\\n        '</text><text dx=\\\"955\\\" dy=\\\"425\\\" dominant-baseline=\\\"central\\\" font-family=\\\"VT323\\\" font-weight=\\\"400\\\" font-size=\\\"78\\\" fill=\\\"#FFF\\\">Age:';\\n    string internal constant _P5 =\\n        '</text><text dx=\\\"200\\\" dy=\\\"425\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"left\\\" font-family=\\\"VT323\\\" font-weight=\\\"400\\\" font-size=\\\"60\\\" fill=\\\"#FFF\\\">';\\n    string internal constant _P6 =\\n        '</text><text dx=\\\"975\\\" dy=\\\"116\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" style=\\\"height:100px\\\" font-family=\\\"Black Ops One\\\" font-size=\\\"56\\\" fill=\\\"#FF8A01\\\">DegenReborn</text><text dx=\\\"1070\\\" dy=\\\"230\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"end\\\" font-family=\\\"VT323\\\" font-weight=\\\"400\\\" font-size=\\\"96\\\" fill=\\\"url(#prefix__p75)\\\">';\\n    string internal constant _P7 =\\n        '</text><svg version=\\\"1.1\\\" id=\\\"prefix__Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"820\\\" y=\\\"180\\\" viewBox=\\\"0 0 18000 18000\\\" xml:space=\\\"preserve\\\"><path d=\\\"M1248 0c689.3 0 1248 558.7 1248 1248s-558.7 1248-1248 1248S0 1937.3 0 1248 558.7 0 1248 0z\\\" fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" fill=\\\"#f0b90b\\\"/><path d=\\\"M685.9 1248l.9 330 280.4 165v193.2l-444.5-260.7v-524l163.2 96.5zm0-330v192.3l-163.3-96.6V821.4l163.3-96.6L850 821.4 685.9 918zm398.4-96.6l163.3-96.6 164.1 96.6-164.1 96.6-163.3-96.6z\\\" fill=\\\"#fff\\\"/><path d=\\\"M803.9 1509.6v-193.2l163.3 96.6v192.3l-163.3-95.7zm280.4 302.6l163.3 96.6 164.1-96.6v192.3l-164.1 96.6-163.3-96.6v-192.3zm561.6-990.8l163.3-96.6 164.1 96.6v192.3l-164.1 96.6V918l-163.3-96.6zm163.3 756.6l.9-330 163.3-96.6v524l-444.5 260.7v-193.2l280.3-164.9z\\\" fill=\\\"#fff\\\"/><path fill=\\\"#fff\\\" d=\\\"M1692.1 1509.6l-163.3 95.7V1413l163.3-96.6v193.2z\\\"/><path d=\\\"M1692.1 986.4l.9 193.2-281.2 165v330.8l-163.3 95.7-163.3-95.7v-330.8l-281.2-165V986.4l164-96.6 279.5 165.8 281.2-165.8 164.1 96.6h-.7zM803.9 656.5l443.7-261.6 444.5 261.6-163.3 96.6-281.2-165.8-280.4 165.8-163.3-96.6z\\\" fill=\\\"#fff\\\"/></svg><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" x=\\\"72\\\" y=\\\"380\\\"><svg width=\\\"120\\\" height=\\\"120\\\"><clipPath id=\\\"prefix__clipCircle\\\"><circle cx=\\\"48\\\" cy=\\\"48\\\" r=\\\"48\\\"/></clipPath><circle cx=\\\"48\\\" cy=\\\"48\\\" r=\\\"48\\\" fill=\\\"#C8145C\\\"/><g clip-path=\\\"url(#prefix__clipCircle)\\\"><path fill=\\\"#FA6000\\\" d=\\\"M29.633 48.617l-86.61-83.057 83.056-86.611 86.611 83.057z\\\"/><path fill=\\\"#F5AF00\\\" d=\\\"M63.4 142.048l-119.678 8.788-8.788-119.677L54.61 22.37z\\\"/><path fill=\\\"#03585E\\\" d=\\\"M21.906-1.682l9.833 119.597-119.596 9.832L-97.69 8.151z\\\"/></g></svg></svg><defs><linearGradient id=\\\"prefix__p0\\\" x1=\\\"622.044\\\" y1=\\\"-2.347\\\" x2=\\\"622.044\\\" y2=\\\"678.332\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#452F16\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1B2023\\\"/></linearGradient><linearGradient id=\\\"prefix__p1\\\" x1=\\\"622.044\\\" y1=\\\"-2.347\\\" x2=\\\"622.044\\\" y2=\\\"668.943\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#FF8A00\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#52391B\\\"/></linearGradient><linearGradient id=\\\"prefix__p2\\\" x1=\\\"622.171\\\" y1=\\\"-1.73\\\" x2=\\\"622.171\\\" y2=\\\"347.827\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#F78602\\\" stop-opacity=\\\".35\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#F78602\\\" stop-opacity=\\\"0\\\"/></linearGradient><linearGradient id=\\\"prefix__p75\\\" x1=\\\"919\\\" y1=\\\"180\\\" x2=\\\"919\\\" y2=\\\"276\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#FFFFDA\\\"/><stop offset=\\\".503\\\" stop-color=\\\"#FFE7B6\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#A87945\\\"/></linearGradient><pattern id=\\\"prefix__pattern0\\\" patternContentUnits=\\\"objectBoundingBox\\\" width=\\\"1\\\" height=\\\"1\\\"><use xlink:href=\\\"#prefix__image0_539_2800\\\" transform=\\\"matrix(.00255 0 0 .00255 -.639 -1.77)\\\"/></pattern></defs><style>@font-face{font-family:&apos;Black Ops One&apos;;font-style:normal;font-weight:400;src:url(data:application/font;base64,d09GMgABAAAAAAe0AAoAAAAAEBwAAAdnAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAhAoKj2CKLws4AAE2AiQDbAQgBYcrB1gbgQxRlG1Si+zngW1MPbihDBOihmC7LZoLmHL+w+L7alc4tb07Sb6TLCvArudVcokgSMYCOeyWnQJyUmK7gOyU2cnT1dpu6AyhbsQlvku/F5GQMzxf3Ojttr80wCYIJIkgMEjkUC//+6v/b63VE2+INR28VC+BkInr7/7NCWLLYOaVTqZEc6lEoqdISZn/938VOLtupE7d8MC/NdYBXGLQbDzgb+4KgKXnNfHPoSp2HgbAWFBlhyuLfAmEjkPNM0jT598+EP161wHmAQDu4usAgIoAMlY5CACgAbLSlOP9LQA0pt5IiJqaaY8kMbhCsVLTjw5RDVZD1FBVr/6lqmp5taJaSa1cIbBC0P8kghh5Xe8incP3Z3Fcbyc3XXTBSUfttMN2xTZf2fvb+8H73vvO+8r7zFvixSM98T72Pnry6clHQDwQINSQALAIAgBMOF7QUCZKxE4Lsk6nhODn/48lIBCCgkMgFAAgLBwgAgjWY2ljSWu/6CkA3gdyLg8DAkylRJjJMS/b2nhai9NqKNVwEvciazRUI4CIUzl/f3E2gj8ncpwgcJwMoIVeEK9aYLzESYzjKCeKHI12OvMLrOZYizXGZIkym+ITRSLjOIXITDILJp1FY5Wxllp5EcUqwjDijyViVXjJjE06XICsMmghHyngz2uRfCw8KlozQoJ3lmdBMshYccqChEUoiHFycRJO5QOxH7ZDDUoCzo3lMkCE1HYikchmyCOYdkrSh3eS2ECsgzynnCdbNpExxEvEEhhKSEiEiHA0kUtN9yeSZitTMI2weFEUTOnrgoQVIhMtwtFEgTkHOOV8JUqjhYLfjkGiIxIJydi/QLZbueSz/AJmx44wNn1avDZh2JFR/InOQqwSVswNddQiJVqWgCE8EkldVVoycybZwvtE04HtEbOQdM4fQuIWW+X8YUiBKJYgocxubuFMlLA5BiltoIG5ggRRTlYe5zGZ+mvyitFCwIa+YBpIOAnKiyAyA8kWMZC4R5Kj8ZpNIPRIGQuzYdo/a9y0eZPmG4uay9RG6zc1Zk4t1hc1XTbMpQXU2cjdaCeFAayHcRelBkq/MiIy+vfuCmFAp5InrgmuwHcLO7EsBoMeRzCpGwC66jd1R79uzCZG734xnuAyx3wp+QI76zZ80zBsF6P8ctfyiTLTtJkXeYvS0oiuJ6XASEqvuD1d9VCGr1PkWEgWHmp//ZDtV3WHUf4qfSMwoN+Trcxwe1W//gk+ibImlN5ldIFnQW0GObW5jVi2ybCJ6SacSV/LIilNr3zqDNvTJMmHyPeWlALpkNR7vKsqK7tI9yTpbz3fHB74POoYglaOXzmOY3QQOy4e9x3XH2ed2RX9Fd8V8QqzUYpXuK7GCqAaUNhGw0YW2/ydffnCWE1Go9mGmj3Esi+MxrvjNzDIZl31Xd+YMgwxqnOpOjyjCPg6bsw49AYrLq2npfQITzfSmT3aPGcXTKnXqM7dzF6h3uVtK9FZTCWwd/ne/6GbgXou6hk7wcwrV8ou3PfMWDZD/VFQ9K01YzUYXXgvA1gnSqWKnsKML4GvXs9oSzxPaaF7ZdevYAPe4wbe09l3tvLZiePGf2c0iFGwURpE6S4jG7XqNMumdNWoUb7The4sevyMOxUdeud+x3IpdYwp8vV3THDBLIOd2VeIf76ytru5BgZMyxhMd7gKM/RFGQonUnGgI/TgtU9nTxgPwvziCE+Efm+x0WOEmoajWfPm//78uckY41FjGWNXY47KDl9n35DKQ1jVg7pgM7qNOAIf9nxM7d0/gQIAAABAAFAJLSP/rVNXLX9RiQIAwNMfu6cCAO/F9yUg/6cLp3IaAIUjuJvicM3j0EDt32DtXr/VgrVdYl4eGTSzzMxBg3KPLcNgmYcG2rwlEBquPH5kj8/OVaOZ0uit6WaHOSM9nSBKDUhNA0hdpjGmJaT2DPb0pBJrxnxkK9lNrwIyAHbpx89ZQJLiIYoQWTzCNCyIMBiMOMGmIl51q5Ag0AXQEenjpmgYAOz2ByMkoooQpqtTiGheNxCnekuIF9WNkMDYU4boNO4dd6KYZxva/sOUSmpczGVxH1K4o87/M4Y+6z+8HG6N96J6546j3jiqT+HM/UV8el92+EFx4s1KCpSJKfyvkxzjcqxbt2GLSJP4OWhGM9MBt/U2Aeefa+Ki0tWsLrivWjqKiw7WOUfeq2nthrWb1GpkejibbEI1+X8uS9o4u8e9E4UWEaFUmTVioUgH1FfXUEJURR1Ifdz33hjMMFzcq2POSKWzQmOxSvjMrthOf2YVKaHFuGo+6IBjtb7qqMMqdpbtOY4yCeQWHAnGaRlgSrHi07LtZTBXkoM+8b03hwpgF1BAQTck1Lt+t3FRW111NdRCJBPhF8cKXvRzwJ3N3h9IYvPbiONe6QvlYbXNJIB7g5SiduHuDOeAoKmRNvTeRC2NmAYhw6Z+7fdob8eIkNaxPiRzJBC6Pr4PmmgBAAD+b+bQvTpG1lEEChLsHiilNMJpy27LqayKOupqpLFOaCwOT6TRWQAAAA==) format(&apos;woff2&apos;);unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD}@font-face{font-family:&apos;VT323&apos;;font-style:normal;font-weight:400;src:url(data:application/font;base64,) format(&apos;woff2&apos;)}</style></svg>';\\n\\n    function P1() public pure returns (string memory) {\\n        return _P1;\\n    }\\n\\n    function P2() public pure returns (string memory) {\\n        return _P2;\\n    }\\n\\n    function P3() public pure returns (string memory) {\\n        return _P3;\\n    }\\n\\n    function P4() public pure returns (string memory) {\\n        return _P4;\\n    }\\n\\n    function P5() public pure returns (string memory) {\\n        return _P5;\\n    }\\n\\n    function P6() public pure returns (string memory) {\\n        return _P6;\\n    }\\n\\n    function P7() public pure returns (string memory) {\\n        return _P7;\\n    }\\n}\\n\",\"keccak256\":\"0x9ba2253e91638f4506aa4541d8ee1db9db9d9bb313ca11535e57ea94161bd2e3\",\"license\":\"GPL-3.0\"},\"src/lib/Renderer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {RenderConstant} from \\\"src/lib/RenderConstant.sol\\\";\\nimport {Base64} from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport {IRebornDefination} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {strings} from \\\"src/lib/strings.sol\\\";\\n\\nlibrary Renderer {\\n    using strings for *;\\n\\n    function renderByTokenId(\\n        mapping(uint256 => IRebornDefination.LifeDetail) storage details,\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        string memory metadata = Base64.encode(\\n            bytes(\\n                string.concat(\\n                    '{\\\"name\\\": \\\"',\\n                    \\\"Degen Tombstone\\\",\\n                    '\\\",\\\"description\\\":\\\"',\\n                    \\\"\\\",\\n                    '\\\",\\\"image\\\":\\\"',\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            renderSvg(\\n                                details[tokenId].seed,\\n                                details[tokenId].score,\\n                                details[tokenId].round,\\n                                details[tokenId].age,\\n                                details[tokenId].creatorName,\\n                                details[tokenId].cost\\n                            )\\n                        )\\n                    ),\\n                    '\\\",\\\"attributes\\\": ',\\n                    renderTrait(\\n                        details[tokenId].seed,\\n                        details[tokenId].score,\\n                        details[tokenId].round,\\n                        details[tokenId].age,\\n                        details[tokenId].creator,\\n                        details[tokenId].creatorName,\\n                        details[tokenId].reward,\\n                        details[tokenId].cost\\n                    ),\\n                    \\\"}\\\"\\n                )\\n            )\\n        );\\n\\n        return string.concat(\\\"data:application/json;base64,\\\", metadata);\\n    }\\n\\n    function renderSvg(\\n        bytes32 seed,\\n        uint256 lifeScore,\\n        uint256 round,\\n        uint256 age,\\n        string memory creatorName,\\n        uint256 cost\\n    ) public pure returns (string memory) {\\n        string memory Part1 = _renderSvgPart1(seed, lifeScore, round, age);\\n        string memory Part2 = _renderSvgPart2(creatorName, cost);\\n        return string(abi.encodePacked(Part1, Part2));\\n    }\\n\\n    function renderTrait(\\n        bytes32 seed,\\n        uint256 lifeScore,\\n        uint256 round,\\n        uint256 age,\\n        address creator,\\n        string memory creatorName,\\n        uint256 reward,\\n        uint256 cost\\n    ) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _renderTraitPart1(seed, lifeScore, round, age),\\n                    _renderTraitPart2(creator, creatorName, reward, cost)\\n                )\\n            );\\n    }\\n\\n    function _renderTraitPart1(\\n        bytes32 seed,\\n        uint256 lifeScore,\\n        uint256 round,\\n        uint256 age\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '[{\\\"trait_type\\\": \\\"Seed\\\", \\\"value\\\": \\\"',\\n                    Strings.toHexString(uint256(seed), 32),\\n                    '\\\"},{\\\"trait_type\\\": \\\"Life Score\\\", \\\"value\\\": ',\\n                    Strings.toString(lifeScore),\\n                    '},{\\\"trait_type\\\": \\\"Round\\\", \\\"value\\\": ',\\n                    Strings.toString(round),\\n                    '},{\\\"trait_type\\\": \\\"Age\\\", \\\"value\\\": ',\\n                    Strings.toString(age)\\n                )\\n            );\\n    }\\n\\n    function _renderTraitPart2(\\n        address creator,\\n        string memory creatorName,\\n        uint256 reward,\\n        uint256 cost\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '},{\\\"trait_type\\\": \\\"Creator\\\", \\\"value\\\": \\\"',\\n                    Strings.toHexString(uint160(creator), 20),\\n                    '\\\"},{\\\"trait_type\\\": \\\"CreatorName\\\", \\\"value\\\": \\\"',\\n                    creatorName,\\n                    '\\\"},{\\\"trait_type\\\": \\\"Reward\\\", \\\"value\\\": ',\\n                    Strings.toString(reward),\\n                    '},{\\\"trait_type\\\": \\\"Cost\\\", \\\"value\\\": ',\\n                    Strings.toString(cost),\\n                    \\\"}]\\\"\\n                )\\n            );\\n    }\\n\\n    function _renderSvgPart1(\\n        bytes32 seed,\\n        uint256 lifeScore,\\n        uint256 round,\\n        uint256 age\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    RenderConstant.P1(),\\n                    _transformBytes32Seed(seed),\\n                    RenderConstant.P2(),\\n                    _transformUint256(lifeScore),\\n                    RenderConstant.P3(),\\n                    Strings.toString(round),\\n                    RenderConstant.P4(),\\n                    Strings.toString(age)\\n                )\\n            );\\n    }\\n\\n    function _renderSvgPart2(\\n        string memory creator,\\n        uint256 cost\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    RenderConstant.P5(),\\n                    _compressUtf8(creator),\\n                    RenderConstant.P6(),\\n                    _tranformWeiToDecimal2(cost),\\n                    RenderConstant.P7()\\n                )\\n            );\\n    }\\n\\n    function _tranformWeiToDecimal2(\\n        uint256 value\\n    ) public pure returns (string memory str) {\\n        if (value > 100 ether) {\\n            return Strings.toString(value / 1 ether);\\n        } else {\\n            uint256 secondFractional = value % (1 ether / 10);\\n            uint256 firstFractional = (value - secondFractional) % (1 ether);\\n            uint256 integer;\\n            if (firstFractional != 0 || secondFractional != 0) {\\n                integer = value - firstFractional - secondFractional;\\n            } else {\\n                integer = value;\\n            }\\n\\n            return\\n                string.concat(\\n                    Strings.toString(integer / 1 ether),\\n                    \\\".\\\",\\n                    Strings.toString(firstFractional / 10 ** 17),\\n                    Strings.toString(secondFractional / 10 ** 16)\\n                );\\n        }\\n    }\\n\\n    function _transformUint256(\\n        uint256 value\\n    ) public pure returns (string memory str) {\\n        if (value < 10 ** 7) {\\n            return _recursiveAddComma(value);\\n        } else if (value < 10 ** 11) {\\n            return\\n                string(\\n                    abi.encodePacked(_recursiveAddComma(value / 10 ** 6), \\\"M\\\")\\n                );\\n        } else if (value < 10 ** 15) {\\n            return\\n                string(\\n                    abi.encodePacked(_recursiveAddComma(value / 10 ** 9), \\\"B\\\")\\n                );\\n        } else {\\n            revert ValueOutOfRange();\\n        }\\n    }\\n\\n    function _recursiveAddComma(\\n        uint256 value\\n    ) internal pure returns (string memory str) {\\n        if (value / 1000 == 0) {\\n            str = string(abi.encodePacked(Strings.toString(value), str));\\n        } else {\\n            str = string(\\n                abi.encodePacked(\\n                    _recursiveAddComma(value / 1000),\\n                    \\\",\\\",\\n                    _numberStringToLengthThree(Strings.toString(value % 1000)),\\n                    str\\n                )\\n            );\\n        }\\n    }\\n\\n    function _transformBytes32Seed(\\n        bytes32 b\\n    ) public pure returns (string memory) {\\n        string memory str = Strings.toHexString(uint256(b), 32);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _substring(str, 0, 14),\\n                    unicode\\\"\\u2026\\\",\\n                    _substring(str, 45, 66)\\n                )\\n            );\\n    }\\n\\n    function _numberStringToLengthThree(\\n        string memory number\\n    ) internal pure returns (string memory) {\\n        if (bytes(number).length == 1) {\\n            return string(abi.encodePacked(\\\"00\\\", number));\\n        } else if (bytes(number).length == 2) {\\n            return string(abi.encodePacked(\\\"0\\\", number));\\n        } else {\\n            return number;\\n        }\\n    }\\n\\n    error ValueOutOfRange();\\n\\n    function _shortenAddr(address addr) private pure returns (string memory) {\\n        uint256 value = uint160(addr);\\n        bytes memory allBytes = bytes(Strings.toHexString(value, 20));\\n\\n        string memory newString = string(allBytes);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _substring(newString, 0, 6),\\n                    unicode\\\"\\u2026\\\",\\n                    _substring(newString, 38, 42)\\n                )\\n            );\\n    }\\n\\n    function _substring(\\n        string memory str,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) private pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    function _compressUtf8(\\n        string memory str\\n    ) public pure returns (string memory res) {\\n        strings.slice memory sl = str.toSlice();\\n        strings.slice memory resl = res.toSlice();\\n\\n        uint256 length = sl.len();\\n        if (length > 12) {\\n            for (uint256 i = 0; i < 5; i++) {\\n                resl = resl.concat(sl.nextRune()).toSlice();\\n            }\\n            for (uint256 i = 5; i < length - 7; i++) {\\n                sl.nextRune().toString();\\n            }\\n\\n            resl = resl.concat(unicode\\\"\\u2026\\\".toSlice()).toSlice();\\n            for (uint256 i = length - 7; i < length; i++) {\\n                resl = resl.concat(sl.nextRune()).toSlice();\\n            }\\n            return resl.toString();\\n        }\\n        return str;\\n    }\\n}\\n\",\"keccak256\":\"0x1d16f74cf0a5b6c81df344872868d47f557896fee39d1500ea01c403b89308ee\",\"license\":\"GPL-3.0\"},\"src/lib/SingleRanking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\nimport \\\"./FastArray.sol\\\";\\nimport \\\"./RankingRedBlackTree.sol\\\";\\n\\nlibrary SingleRanking {\\n    using FastArray for FastArray.Data;\\n    using RankingRedBlackTree for RankingRedBlackTree.Tree;\\n\\n    struct Data {\\n        RankingRedBlackTree.Tree tree;\\n        mapping(uint => FastArray.Data) keys;\\n        uint length;\\n    }\\n\\n    function add(Data storage _singleRanking, uint _key, uint _value) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) == 0) {\\n            _singleRanking.tree.insert(_value);\\n        } else {\\n            _singleRanking.tree.addToCount(_value, 1);\\n        }\\n\\n        _singleRanking.keys[_value].insert(_key);\\n\\n        _singleRanking.length += 1;\\n    }\\n\\n    function remove(\\n        Data storage _singleRanking,\\n        uint _key,\\n        uint _value\\n    ) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) > 0) {\\n            keys.remove(_key);\\n\\n            if (FastArray.length(keys) == 0) {\\n                _singleRanking.tree.remove(_value);\\n            } else {\\n                _singleRanking.tree.minusFromCount(_value, 1);\\n            }\\n        }\\n\\n        _singleRanking.length -= 1;\\n    }\\n\\n    function length(Data storage _singleRanking) public view returns (uint) {\\n        return _singleRanking.length;\\n    }\\n\\n    function get(\\n        Data storage _singleRanking,\\n        uint _offset,\\n        uint _count\\n    ) public view returns (uint[] memory) {\\n        require(_count > 0 && _count <= 100, \\\"Count must be between 0 and 100\\\");\\n\\n        uint[] memory result = new uint[](_count);\\n        uint size = 0;\\n        uint id;\\n        (id, _offset) = _singleRanking.tree.lastByOffset(_offset);\\n\\n        while (id != 0) {\\n            uint value = _singleRanking.tree.value(id);\\n            FastArray.Data storage keys = _singleRanking.keys[value];\\n\\n            if (_offset >= FastArray.length(keys)) {\\n                _offset -= FastArray.length(keys);\\n            } else if (FastArray.length(keys) < _offset + _count) {\\n                uint index = FastArray.length(keys) - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n\\n                _count -= FastArray.length(keys) - _offset;\\n                _offset = 0;\\n            } else {\\n                uint index = _offset + _count - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n                // result[size] = value;\\n                break;\\n            }\\n\\n            id = _singleRanking.tree.prev(id);\\n        }\\n\\n        return result;\\n    }\\n\\n    function getNthValue(\\n        Data storage _singleRanking,\\n        uint n\\n    ) public view returns (uint) {\\n        require(n >= 0, \\\"order can not be negative\\\");\\n        (uint256 id, ) = _singleRanking.tree.lastByOffset(n);\\n        uint value = _singleRanking.tree.value(id);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0xd52df0ed7cd8e464f4d174ec44fc86fd157213bdb1f6f029c50966138a018ea0\",\"license\":\"UNLICENSED\"},\"src/lib/strings.sol\":{\"content\":\"/*\\n * @title String & slice utility library for Solidity contracts.\\n * @author Nick Johnson <arachnid@notdot.net>\\n *\\n * @dev Functionality in this library is largely implemented using an\\n *      abstraction called a 'slice'. A slice represents a part of a string -\\n *      anything from the entire string to a single character, or even no\\n *      characters at all (a 0-length slice). Since a slice only has to specify\\n *      an offset and a length, copying and manipulating slices is a lot less\\n *      expensive than copying and manipulating the strings they reference.\\n *\\n *      To further reduce gas costs, most functions on slice that need to return\\n *      a slice modify the original one instead of allocating a new one; for\\n *      instance, `s.split(\\\".\\\")` will return the text up to the first '.',\\n *      modifying s to only contain the remainder of the string after the '.'.\\n *      In situations where you do not want to modify the original slice, you\\n *      can make a copy first with `.copy()`, for example:\\n *      `s.copy().split(\\\".\\\")`. Try and avoid using this idiom in loops; since\\n *      Solidity has no memory management, it will result in allocating many\\n *      short-lived slices that are later discarded.\\n *\\n *      Functions that return two slices come in two versions: a non-allocating\\n *      version that takes the second slice as an argument, modifying it in\\n *      place, and an allocating version that allocates and returns the second\\n *      slice; see `nextRune` for example.\\n *\\n *      Functions that have to copy string data will return strings rather than\\n *      slices; these can be cast back to slices for further processing if\\n *      required.\\n *\\n *      For convenience, some functions are provided with non-modifying\\n *      variants that create a new slice and return both; for instance,\\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\\n *      corresponding to the left and right parts of the string.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary strings {\\n    struct slice {\\n        uint _len;\\n        uint _ptr;\\n    }\\n\\n    function memcpy(uint dest, uint src, uint len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = type(uint).max;\\n        if (len > 0) {\\n            mask = 256 ** (32 - len) - 1;\\n        }\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire string.\\n     * @param self The string to make a slice from.\\n     * @return A newly allocated slice containing the entire string.\\n     */\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\n        uint ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns the length of a null-terminated bytes32 string.\\n     * @param self The value to find the length of.\\n     * @return The length of the string, from 0 to 32.\\n     */\\n    function len(bytes32 self) internal pure returns (uint) {\\n        uint ret;\\n        if (self == 0) return 0;\\n        if (uint(self) & type(uint128).max == 0) {\\n            ret += 16;\\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\\n        }\\n        if (uint(self) & type(uint64).max == 0) {\\n            ret += 8;\\n            self = bytes32(uint(self) / 0x10000000000000000);\\n        }\\n        if (uint(self) & type(uint32).max == 0) {\\n            ret += 4;\\n            self = bytes32(uint(self) / 0x100000000);\\n        }\\n        if (uint(self) & type(uint16).max == 0) {\\n            ret += 2;\\n            self = bytes32(uint(self) / 0x10000);\\n        }\\n        if (uint(self) & type(uint8).max == 0) {\\n            ret += 1;\\n        }\\n        return 32 - ret;\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\\n     *      null-terminated utf-8 string.\\n     * @param self The bytes32 value to convert to a slice.\\n     * @return A new slice containing the value of the input argument up to the\\n     *         first null.\\n     */\\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\\n        // Allocate space for `self` in memory, copy it there, and point ret at it\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(0x40, add(ptr, 0x20))\\n            mstore(ptr, self)\\n            mstore(add(ret, 0x20), ptr)\\n        }\\n        ret._len = len(self);\\n    }\\n\\n    /*\\n     * @dev Returns a new slice containing the same data as the current slice.\\n     * @param self The slice to copy.\\n     * @return A new slice containing the same data as `self`.\\n     */\\n    function copy(slice memory self) internal pure returns (slice memory) {\\n        return slice(self._len, self._ptr);\\n    }\\n\\n    /*\\n     * @dev Copies a slice to a new string.\\n     * @param self The slice to copy.\\n     * @return A newly allocated string containing the slice's text.\\n     */\\n    function toString(slice memory self) internal pure returns (string memory) {\\n        string memory ret = new string(self._len);\\n        uint retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n\\n        memcpy(retptr, self._ptr, self._len);\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Returns the length in runes of the slice. Note that this operation\\n     *      takes time proportional to the length of the slice; avoid using it\\n     *      in loops, and call `slice.empty()` if you only need to know whether\\n     *      the slice is empty or not.\\n     * @param self The slice to operate on.\\n     * @return The length of the slice in runes.\\n     */\\n    function len(slice memory self) internal pure returns (uint l) {\\n        // Starting at ptr-31 means the LSB will be the byte we care about\\n        uint ptr = self._ptr - 31;\\n        uint end = ptr + self._len;\\n        for (l = 0; ptr < end; l++) {\\n            uint8 b;\\n            assembly {\\n                b := and(mload(ptr), 0xFF)\\n            }\\n            if (b < 0x80) {\\n                ptr += 1;\\n            } else if (b < 0xE0) {\\n                ptr += 2;\\n            } else if (b < 0xF0) {\\n                ptr += 3;\\n            } else if (b < 0xF8) {\\n                ptr += 4;\\n            } else if (b < 0xFC) {\\n                ptr += 5;\\n            } else {\\n                ptr += 6;\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice is empty (has a length of 0).\\n     * @param self The slice to operate on.\\n     * @return True if the slice is empty, False otherwise.\\n     */\\n    function empty(slice memory self) internal pure returns (bool) {\\n        return self._len == 0;\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two slices are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first slice to compare.\\n     * @param other The second slice to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        slice memory self,\\n        slice memory other\\n    ) internal pure returns (int) {\\n        uint shortest = self._len;\\n        if (other._len < self._len) shortest = other._len;\\n\\n        uint selfptr = self._ptr;\\n        uint otherptr = other._ptr;\\n        for (uint idx = 0; idx < shortest; idx += 32) {\\n            uint a;\\n            uint b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint mask = type(uint).max; // 0xffff...\\n                if (shortest < 32) {\\n                    mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\\n                }\\n                unchecked {\\n                    uint diff = (a & mask) - (b & mask);\\n                    if (diff != 0) return int(diff);\\n                }\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n        return int(self._len) - int(other._len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two slices contain the same text.\\n     * @param self The first slice to compare.\\n     * @param self The second slice to compare.\\n     * @return True if the slices are equal, false otherwise.\\n     */\\n    function equals(\\n        slice memory self,\\n        slice memory other\\n    ) internal pure returns (bool) {\\n        return compare(self, other) == 0;\\n    }\\n\\n    /*\\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\\n     *      slice to point to the next rune and returning `self`.\\n     * @param self The slice to operate on.\\n     * @param rune The slice that will contain the first rune.\\n     * @return `rune`.\\n     */\\n    function nextRune(\\n        slice memory self,\\n        slice memory rune\\n    ) internal pure returns (slice memory) {\\n        rune._ptr = self._ptr;\\n\\n        if (self._len == 0) {\\n            rune._len = 0;\\n            return rune;\\n        }\\n\\n        uint l;\\n        uint b;\\n        // Load the first byte of the rune into the LSBs of b\\n        assembly {\\n            b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF)\\n        }\\n        if (b < 0x80) {\\n            l = 1;\\n        } else if (b < 0xE0) {\\n            l = 2;\\n        } else if (b < 0xF0) {\\n            l = 3;\\n        } else {\\n            l = 4;\\n        }\\n\\n        // Check for truncated codepoints\\n        if (l > self._len) {\\n            rune._len = self._len;\\n            self._ptr += self._len;\\n            self._len = 0;\\n            return rune;\\n        }\\n\\n        self._ptr += l;\\n        self._len -= l;\\n        rune._len = l;\\n        return rune;\\n    }\\n\\n    /*\\n     * @dev Returns the first rune in the slice, advancing the slice to point\\n     *      to the next rune.\\n     * @param self The slice to operate on.\\n     * @return A slice containing only the first rune from `self`.\\n     */\\n    function nextRune(\\n        slice memory self\\n    ) internal pure returns (slice memory ret) {\\n        nextRune(self, ret);\\n    }\\n\\n    /*\\n     * @dev Returns the number of the first codepoint in the slice.\\n     * @param self The slice to operate on.\\n     * @return The number of the first codepoint in the slice.\\n     */\\n    function ord(slice memory self) internal pure returns (uint ret) {\\n        if (self._len == 0) {\\n            return 0;\\n        }\\n\\n        uint word;\\n        uint length;\\n        uint divisor = 2 ** 248;\\n\\n        // Load the rune into the MSBs of b\\n        assembly {\\n            word := mload(mload(add(self, 32)))\\n        }\\n        uint b = word / divisor;\\n        if (b < 0x80) {\\n            ret = b;\\n            length = 1;\\n        } else if (b < 0xE0) {\\n            ret = b & 0x1F;\\n            length = 2;\\n        } else if (b < 0xF0) {\\n            ret = b & 0x0F;\\n            length = 3;\\n        } else {\\n            ret = b & 0x07;\\n            length = 4;\\n        }\\n\\n        // Check for truncated codepoints\\n        if (length > self._len) {\\n            return 0;\\n        }\\n\\n        for (uint i = 1; i < length; i++) {\\n            divisor = divisor / 256;\\n            b = (word / divisor) & 0xFF;\\n            if (b & 0xC0 != 0x80) {\\n                // Invalid UTF-8 sequence\\n                return 0;\\n            }\\n            ret = (ret * 64) | (b & 0x3F);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of the slice.\\n     * @param self The slice to hash.\\n     * @return The hash of the slice.\\n     */\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\n        assembly {\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if `self` starts with `needle`.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return True if the slice starts with the provided text, false otherwise.\\n     */\\n    function startsWith(\\n        slice memory self,\\n        slice memory needle\\n    ) internal pure returns (bool) {\\n        if (self._len < needle._len) {\\n            return false;\\n        }\\n\\n        if (self._ptr == needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(needle)\\n            let selfptr := mload(add(self, 0x20))\\n            let needleptr := mload(add(needle, 0x20))\\n            equal := eq(\\n                keccak256(selfptr, length),\\n                keccak256(needleptr, length)\\n            )\\n        }\\n        return equal;\\n    }\\n\\n    /*\\n     * @dev If `self` starts with `needle`, `needle` is removed from the\\n     *      beginning of `self`. Otherwise, `self` is unmodified.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return `self`\\n     */\\n    function beyond(\\n        slice memory self,\\n        slice memory needle\\n    ) internal pure returns (slice memory) {\\n        if (self._len < needle._len) {\\n            return self;\\n        }\\n\\n        bool equal = true;\\n        if (self._ptr != needle._ptr) {\\n            assembly {\\n                let length := mload(needle)\\n                let selfptr := mload(add(self, 0x20))\\n                let needleptr := mload(add(needle, 0x20))\\n                equal := eq(\\n                    keccak256(selfptr, length),\\n                    keccak256(needleptr, length)\\n                )\\n            }\\n        }\\n\\n        if (equal) {\\n            self._len -= needle._len;\\n            self._ptr += needle._len;\\n        }\\n\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice ends with `needle`.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return True if the slice starts with the provided text, false otherwise.\\n     */\\n    function endsWith(\\n        slice memory self,\\n        slice memory needle\\n    ) internal pure returns (bool) {\\n        if (self._len < needle._len) {\\n            return false;\\n        }\\n\\n        uint selfptr = self._ptr + self._len - needle._len;\\n\\n        if (selfptr == needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(needle)\\n            let needleptr := mload(add(needle, 0x20))\\n            equal := eq(\\n                keccak256(selfptr, length),\\n                keccak256(needleptr, length)\\n            )\\n        }\\n\\n        return equal;\\n    }\\n\\n    /*\\n     * @dev If `self` ends with `needle`, `needle` is removed from the\\n     *      end of `self`. Otherwise, `self` is unmodified.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return `self`\\n     */\\n    function until(\\n        slice memory self,\\n        slice memory needle\\n    ) internal pure returns (slice memory) {\\n        if (self._len < needle._len) {\\n            return self;\\n        }\\n\\n        uint selfptr = self._ptr + self._len - needle._len;\\n        bool equal = true;\\n        if (selfptr != needle._ptr) {\\n            assembly {\\n                let length := mload(needle)\\n                let needleptr := mload(add(needle, 0x20))\\n                equal := eq(\\n                    keccak256(selfptr, length),\\n                    keccak256(needleptr, length)\\n                )\\n            }\\n        }\\n\\n        if (equal) {\\n            self._len -= needle._len;\\n        }\\n\\n        return self;\\n    }\\n\\n    // Returns the memory address of the first byte of the first occurrence of\\n    // `needle` in `self`, or the first byte after `self` if not found.\\n    function findPtr(\\n        uint selflen,\\n        uint selfptr,\\n        uint needlelen,\\n        uint needleptr\\n    ) private pure returns (uint) {\\n        uint ptr = selfptr;\\n        uint idx;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask;\\n                if (needlelen > 0) {\\n                    mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n                }\\n\\n                bytes32 needledata;\\n                assembly {\\n                    needledata := and(mload(needleptr), mask)\\n                }\\n\\n                uint end = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly {\\n                    ptrdata := and(mload(ptr), mask)\\n                }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr >= end) return selfptr + selflen;\\n                    ptr++;\\n                    assembly {\\n                        ptrdata := and(mload(ptr), mask)\\n                    }\\n                }\\n                return ptr;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly {\\n                    hash := keccak256(needleptr, needlelen)\\n                }\\n\\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\\n                    bytes32 testHash;\\n                    assembly {\\n                        testHash := keccak256(ptr, needlelen)\\n                    }\\n                    if (hash == testHash) return ptr;\\n                    ptr += 1;\\n                }\\n            }\\n        }\\n        return selfptr + selflen;\\n    }\\n\\n    // Returns the memory address of the first byte after the last occurrence of\\n    // `needle` in `self`, or the address of `self` if not found.\\n    function rfindPtr(\\n        uint selflen,\\n        uint selfptr,\\n        uint needlelen,\\n        uint needleptr\\n    ) private pure returns (uint) {\\n        uint ptr;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask;\\n                if (needlelen > 0) {\\n                    mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n                }\\n\\n                bytes32 needledata;\\n                assembly {\\n                    needledata := and(mload(needleptr), mask)\\n                }\\n\\n                ptr = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly {\\n                    ptrdata := and(mload(ptr), mask)\\n                }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr <= selfptr) return selfptr;\\n                    ptr--;\\n                    assembly {\\n                        ptrdata := and(mload(ptr), mask)\\n                    }\\n                }\\n                return ptr + needlelen;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly {\\n                    hash := keccak256(needleptr, needlelen)\\n                }\\n                ptr = selfptr + (selflen - needlelen);\\n                while (ptr >= selfptr) {\\n                    bytes32 testHash;\\n                    assembly {\\n                        testHash := keccak256(ptr, needlelen)\\n                    }\\n                    if (hash == testHash) return ptr + needlelen;\\n                    ptr -= 1;\\n                }\\n            }\\n        }\\n        return selfptr;\\n    }\\n\\n    /*\\n     * @dev Modifies `self` to contain everything from the first occurrence of\\n     *      `needle` to the end of the slice. `self` is set to the empty slice\\n     *      if `needle` is not found.\\n     * @param self The slice to search and modify.\\n     * @param needle The text to search for.\\n     * @return `self`.\\n     */\\n    function find(\\n        slice memory self,\\n        slice memory needle\\n    ) internal pure returns (slice memory) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        self._len -= ptr - self._ptr;\\n        self._ptr = ptr;\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Modifies `self` to contain the part of the string from the start of\\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\\n     *      is not found, `self` is set to the empty slice.\\n     * @param self The slice to search and modify.\\n     * @param needle The text to search for.\\n     * @return `self`.\\n     */\\n    function rfind(\\n        slice memory self,\\n        slice memory needle\\n    ) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        self._len = ptr - self._ptr;\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything after the first\\n     *      occurrence of `needle`, and `token` to everything before it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function split(\\n        slice memory self,\\n        slice memory needle,\\n        slice memory token\\n    ) internal pure returns (slice memory) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = self._ptr;\\n        token._len = ptr - self._ptr;\\n        if (ptr == self._ptr + self._len) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n            self._ptr = ptr + needle._len;\\n        }\\n        return token;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything after the first\\n     *      occurrence of `needle`, and returning everything before it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and the entirety of `self` is returned.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @return The part of `self` up to the first occurrence of `delim`.\\n     */\\n    function split(\\n        slice memory self,\\n        slice memory needle\\n    ) internal pure returns (slice memory token) {\\n        split(self, needle, token);\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and `token` to everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function rsplit(\\n        slice memory self,\\n        slice memory needle,\\n        slice memory token\\n    ) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = ptr;\\n        token._len = self._len - (ptr - self._ptr);\\n        if (ptr == self._ptr) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n        }\\n        return token;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and returning everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and the entirety of `self` is returned.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @return The part of `self` after the last occurrence of `delim`.\\n     */\\n    function rsplit(\\n        slice memory self,\\n        slice memory needle\\n    ) internal pure returns (slice memory token) {\\n        rsplit(self, needle, token);\\n    }\\n\\n    /*\\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\\n     * @param self The slice to search.\\n     * @param needle The text to search for in `self`.\\n     * @return The number of occurrences of `needle` found in `self`.\\n     */\\n    function count(\\n        slice memory self,\\n        slice memory needle\\n    ) internal pure returns (uint cnt) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) +\\n            needle._len;\\n        while (ptr <= self._ptr + self._len) {\\n            cnt++;\\n            ptr =\\n                findPtr(\\n                    self._len - (ptr - self._ptr),\\n                    ptr,\\n                    needle._len,\\n                    needle._ptr\\n                ) +\\n                needle._len;\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns True if `self` contains `needle`.\\n     * @param self The slice to search.\\n     * @param needle The text to search for in `self`.\\n     * @return True if `needle` is found in `self`, false otherwise.\\n     */\\n    function contains(\\n        slice memory self,\\n        slice memory needle\\n    ) internal pure returns (bool) {\\n        return\\n            rfindPtr(self._len, self._ptr, needle._len, needle._ptr) !=\\n            self._ptr;\\n    }\\n\\n    /*\\n     * @dev Returns a newly allocated string containing the concatenation of\\n     *      `self` and `other`.\\n     * @param self The first slice to concatenate.\\n     * @param other The second slice to concatenate.\\n     * @return The concatenation of the two strings.\\n     */\\n    function concat(\\n        slice memory self,\\n        slice memory other\\n    ) internal pure returns (string memory) {\\n        string memory ret = new string(self._len + other._len);\\n        uint retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n        memcpy(retptr, self._ptr, self._len);\\n        memcpy(retptr + self._len, other._ptr, other._len);\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\\n     *      newly allocated string.\\n     * @param self The delimiter to use.\\n     * @param parts A list of slices to join.\\n     * @return A newly allocated string containing all the slices in `parts`,\\n     *         joined with `self`.\\n     */\\n    function join(\\n        slice memory self,\\n        slice[] memory parts\\n    ) internal pure returns (string memory) {\\n        if (parts.length == 0) return \\\"\\\";\\n\\n        uint length = self._len * (parts.length - 1);\\n        for (uint i = 0; i < parts.length; i++) length += parts[i]._len;\\n\\n        string memory ret = new string(length);\\n        uint retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n\\n        for (uint i = 0; i < parts.length; i++) {\\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\\n            retptr += parts[i]._len;\\n            if (i < parts.length - 1) {\\n                memcpy(retptr, self._ptr, self._len);\\n                retptr += self._len;\\n            }\\n        }\\n\\n        return ret;\\n    }\\n}\\n\",\"keccak256\":\"0xe5f86ae6fafd7cd08370ceec9f344a69b14ecc6a22812773307589f65a48fd26\"},\"src/modified/VRFConsumerBaseV2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their respective initializer as\\n * @dev shown:\\n *\\n * @dev   import \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n * @dev   contract VRFConsumer is Initializable, VRFConsumerBaseV2Upgradeable {\\n * @dev     initialize(<other arguments>, address _vrfCoordinator) public initializer {\\n * @dev         __VRFConsumerBaseV2_init(_vrfCoordinator);\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev The VRFConsumerBaseV2Upgradable is an upgradable variant of VRFConsumerBaseV2\\n * @dev (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable).\\n * @dev It's semantics are identical to VRFConsumerBaseV2 and can be inherited from\\n * @dev to create an upgradeable VRF consumer contract.\\n */\\nabstract contract VRFConsumerBaseV2Upgradeable is Initializable {\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    error ZeroAddressCoordinatorSet();\\n    address internal vrfCoordinator;\\n\\n    // See https://github.com/OpenZeppelin/openzeppelin-sdk/issues/37.\\n    // Each uint256 covers a single storage slot, see https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html.\\n    uint256[49] private __gap;\\n\\n    /**\\n     * @param _vrfCoordinator the VRFCoordinatorV2 address.\\n     * @dev See https://docs.chain.link/docs/vrf/v2/supported-networks/ for coordinator\\n     * @dev addresses on your preferred network.\\n     */\\n    function __VRFConsumerBaseV2_init(\\n        address _vrfCoordinator\\n    ) internal onlyInitializing {\\n        if (_vrfCoordinator == address(0)) {\\n            revert ZeroAddressCoordinatorSet();\\n        }\\n\\n        vrfCoordinator = _vrfCoordinator;\\n    }\\n\\n    /**\\n     * @notice fulfillRandomness handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomness\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomness, below.)\\n     *\\n     * @param requestId The Id initially returned by requestRandomness\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal virtual;\\n\\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    // the origin of the call\\n    function rawFulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n}\\n\",\"keccak256\":\"0xaab20463de66439df1942c9dd02f3f1905f3e808d4628f09cecd140c26dd2137\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a08060405234610031573060805261553e90816100378239608051818181611d2d01528181611e1e0152612a470152f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a71461407457508063068bcd8d1461403557806306fdde0314613f8c578063081812fc14613f6d578063095ea7b314613df65780630aaef80214613d175780630e357a6e14613c8657806316a065c614613c5d57806317e0f25214613c0d5780631fe543e314613a9057806320dfe3c61461347057806323b872dd1461344b57806328275338146132ee5780632bf8e8f6146132a157806332eb808a1461317e578063350b2369146130a4578063362925c214612bf05780633659cfe614612a2057806339c17502146128e557806342842e0e1461288a57806343f0e9931461282f5780634585e33b146121575780634e71e0c8146120db5780634f1ef28614611dde57806352d1902d14611d1a57806358c7a06314611c505780635c975abb14611c2c578063603d080014611bcd5780636352211e14611b9c5780636817031b14611b285780636e04ff0d14611ace57806370a0823114611a37578063715018a6146119b6578063736c0d5b1461197757806376f7a9fc14611799578063802e9cfa146117225780638456cb59146116bc5780638d47a30d146115c15780638da5cb5b14611598578063918c49e4146113e85780639208b21e1461133657806395d89b411461124b5780639aab85e5146111d75780639d215042146110d1578063a22cb46514611011578063a54b2a7314610fe7578063afd5f74714610ee1578063b242e53414610e7a578063b88d4fde14610e01578063b9e53a9f14610b77578063c3b82b8d14610838578063c417db69146107e0578063c87b56dd146106e4578063db640081146105ff578063e30c3978146105d6578063e4421be21461048d578063e985e9c514610438578063f1bd4c041461040b578063f7b188a5146103a8578063fbd7823514610364578063fbfa77cf1461033a5763ff9c7543146102cb57600080fd5b3461033757602036600319011261033757603354600435906001600160a01b03163303610325576020817f39feb9fafd10c5355c86cdccca7884a183c4dd524ca37b0761575ce0974cdb069261011155604051908152a180f35b604051632e6c18c960e11b8152600490fd5b80fd5b5034610337578060031936011261033757610104546040516001600160a01b039091168152602090f35b503461033757602036600319011261033757602061039e60043560ff6001918060081c600052610105602052161b60406000205416151590565b6040519015158152f35b50346103375780600319360112610337576033546001600160a01b03163303610325576103d3614ca0565b61019460ff1981541690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b5034610337578060031936011261033757600f604060209260fb5481526101018452200154604051908152f35b503461033757604036600319011261033757610452614129565b604061045c61413f565b9260018060a01b038093168152610135602052209116600052602052602060ff604060002054166040519015158152f35b50346103375760403660031901126105d1576004356104aa614b83565b6104b2614bc8565b8173605B6900CB9c632000312Cd116B3e1e82985aF7460fb5482526101018060205260408320823b156105aa57604051906329caab3960e11b825285600483015260248201528381604481865af49081156105c65784916105ae575b505060018060a01b0361010454169060fb54845260205260408320823b156105aa57604051630b06bff360e21b8152600481018690526001600160a01b039290921660248301526044820152908290829060649082905af4801561059f57610587575b506001610162556105846024358361500c565b80f35b61059090614171565b61059b578138610571565b5080fd5b6040513d84823e3d90fd5b8380fd5b6105b790614171565b6105c257823861050e565b8280fd5b6040513d86823e3d90fd5b600080fd5b50346103375780600319360112610337576034546040516001600160a01b039091168152602090f35b50346103375760208060031936011261059b57816004356001600160401b03811161059b5791610634829336906004016142e9565b92909161063f614b83565b73605B6900CB9c632000312Cd116B3e1e82985aF7492825b858110610662578380f35b61066d818784614c7a565b3560fb548552610101845260408520863b156106e057604051916329caab3960e11b8352600483015260248201528481604481895af49081156106d55785916106c1575b50506106bc90614c1f565b610657565b6106ca90614171565b6105aa5783886106b1565b6040513d87823e3d90fd5b8580fd5b50346103375760208060031936011261059b57604051632f8218bd60e21b815261010060048201526004356024820152828160448173F4415A0f02255B9dd5FfF6bE3F4E514F2E18DDfa5af49283156107d4578093610758575b5050610754604051928284938452830190614104565b0390f35b909192503d8082843e61076b81846141f1565b820191838184031261059b578051906001600160401b0382116105c2570182601f8201121561059b578051916107a083614319565b936107ae60405195866141f1565b8385528584840101116103375750906107cc918480850191016140e1565b90388061073e565b604051903d90823e3d90fd5b5034610337576020366003190112610337576001600160a01b0380610803614129565b16825261010260209081526040808420548316808552938190205481516001600160a01b039586168152931690931690820152f35b50346103375760603660031901126103375760243560043560443561085b614b83565b610863614bc8565b73605B6900CB9c632000312Cd116B3e1e82985aF749160fb5485526101018560209482865260408220813b156105c2576040516329caab3960e11b9182825286600483015260248201528381604481865af49081156105c6578491610b63575b5050610104805460fb548552858952604085206001600160a01b039182169290853b15610b5f57604051630b06bff360e21b808252600482018b90526001600160a01b0395909516602482015260448101919091528681606481895af4908115610b3c578791610b4b575b50506101629360018555610940614bc8565b60fb548752878b5260408720863b15610b47576040519182528c600483015260248201528681604481895af4908115610b3c578791610b28575b505054169060fb54855285895260408520843b156106e057604051918252600482018b90526001600160a01b0392909216602482015260448101919091528381606481865af49081156105c6578491610b14575b50506001905560fb549283835280875260016040842001336000528752604060002085845287526040832093835286526040822084835286526040822092610a17868254614a45565b8155610a24868554614a45565b8455813b156105c2578290604460405180948193636496053360e01b835288600484015260248301525af4801561059f57610b00575b5050610a6790548261524e565b60405190815281838201527fe6907eb8ffc12ac27891b5560db15647cae89e2b344f0c34c63bb6f1d4249cff60403392a2605f810290808204605f1490151715610aec576064900490610aba82846152de565b6040519283528201527f7e9ecb928e58cb1d1c8cda62ae789939f9f184616eb26ef72e801f98b6ef556a60403392a280f35b634e487b7160e01b84526011600452602484fd5b610b0990614171565b6106e0578538610a5a565b610b1d90614171565b6105c25782386109ce565b610b3190614171565b6106e057853861097a565b6040513d89823e3d90fd5b8780fd5b610b5490614171565b6106e057853861092e565b8680fd5b610b6c90614171565b6105c25782386108c3565b5036600319016080811261059b57604013610337576044356001600160a01b03818116918281036105d15760643590338552610110936020948086526040872054610111541115610def5733875285526040862080549060018201809211610ddb5755610be2614b83565b610bea614bc8565b338652610102938486526040872054161580610dd2575b80610dc8575b610d70575b505060043591610c1c8383614a52565b93610c2a6024358096614a52565b91823410610d5e5786808080610c408734614a45565b818115610d55575b3390f115610d4a5760405190633039061160e01b825260048201526101036024820152336044820152826064820152818160848173605B6900CB9c632000312Cd116B3e1e82985aF745af4908115610b3c578791610cfd575b50610ccd907f617b1a2bf0533cea0c5dd46104e1d48f8b290fc7d7360dba0182dbf07a00e46a93614a45565b60fb5487526101018252610ce9600f6040892001918254614a52565b90556040519283523392a460016101625580f35b90508181813d8311610d43575b610d1481836141f1565b810103126105d157517f617b1a2bf0533cea0c5dd46104e1d48f8b290fc7d7360dba0182dbf07a00e46a610ca1565b503d610d0a565b6040513d88823e3d90fd5b506108fc610c48565b604051632ca2f52b60e11b8152600490fd5b604080872080546001600160a01b0319169290921790915580513381526001600160a01b039290921660208301527f677cd8c8ce12dc7827579d65be5e6efa74b6ac9ab04ac43d4648dc85d328c2ae91a13880610c0c565b5033811415610c07565b50801515610c01565b634e487b7160e01b88526011600452602488fd5b60405163d92de14f60e01b8152600490fd5b503461033757608036600319011261033757610e1b614129565b610e2361413f565b90606435906044356001600160401b038311610e765761058493610e4e610e7194369060040161436b565b92610e61610e5c84336146f9565b614624565b610e6c8383836147c2565b6149ca565b6146d9565b8480fd5b503461033757610e8936614389565b6033549091906001600160a01b039081163303610325578116918215610ecf5715610eb8576105849150614a9f565b506001600160601b0360a01b603454161760345580f35b604051633aafecb360e21b8152600490fd5b50346103375780600319360112610337576033546001600160a01b031633036103255760fb54906001820191828111610fd3578260fb55610f20614b83565b610194600160ff198254161790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1815261010180602052600f604083200154908160041b9180830460101490151715610fbf5782936064935260205204600f6040832001557f3bf8992b1ca7018d446bcf1d45dc7a62e50decf5248434be4194aef154463380602060fb54604051908152a180f35b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b82526011600452602482fd5b5034610337578060031936011261033757610107546040516001600160a01b039091168152602090f35b50346103375761102036614389565b6001600160a01b039091169033821461108c57338352610135602052604083208260005260205260406000209015159060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b50346103375760a0366003190112610337576033546001600160a01b031633036103255760043580610108556024356001600160401b0381168091036105c257610109918254916044359363ffffffff91828616908187036105d157606435938416928385036105d1576084359661ffff8816958689036105d1577f3510c45fb24ce728b56d5136c57163ff69e25ab31ac04a1264387c7acff6c41e996bffffffff00000000000000008560a09b61ffff60801b9060801b169471ffffffffffffffffffffffffffffffffffff1916179160401b16179063ffffffff60601b9060601b16171790556040519485526020850152604084015260608301526080820152a180f35b5034610337576020366003190112610337576033546001600160a01b0390811633036103255781906101075416803b1561124857818091602460405180948193630852cd8d60e31b835260043560048401525af1801561059f576112385750f35b61124190614171565b6103375780f35b50fd5b5034610337578060031936011261033757604051908061013190815490611271826145aa565b8086529260019280841690811561130957506001146112af575b6107548661129b818803826141f1565b604051918291602083526020830190614104565b815292507fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db735b8284106112f157505050810160200161129b826107543861128b565b805460208587018101919091529093019281016112d5565b90508695506107549693506020925061129b94915060ff191682840152151560051b82010192933861128b565b50346103375760603660031901126103375760043561ffff908181168091036105d1576024359182168092036105d1576044359060028210156105aa576033546001600160a01b0316330361032557839273605B6900CB9c632000312Cd116B3e1e82985aF74803b15610e765784926084916113d96040519687958694631747e07760e01b86526101036004870152602486015260448501526064840190614d33565b5af4801561059f576112385750f35b50346103375760e03660031901126103375760043560c43560ff81168091036105d1578290611415614b83565b61141d614bc8565b73605B6900CB9c632000312Cd116B3e1e82985aF7460fb548352610101908160205260408420813b15610e7657604051906329caab3960e11b825286600483015260248201528481604481855af49081156106d5578591611584575b50506101045460fb548552602092909252604084206001600160a01b0392831690823b156106e057604051630b06bff360e21b8152600481018890526001600160a01b039290921660248301526044820152908490829060649082905af49081156105c6578491611570575b505060016101625560fc541690813b156105c257829160e48392604051948593849263d505accf60e01b845233600485015230602485015260443560448501526064356064850152608484015260843560a484015260a43560c48401525af1801561059f5761155c575b506105846024358361500c565b61156590614171565b61059b57813861154f565b61157990614171565b6105c25782386114e5565b61158d90614171565b6105aa578338611479565b50346103375780600319360112610337576033546040516001600160a01b039091168152602090f35b50346103375780602080600319360112611248576004356001600160401b0381116116b8576115f5839136906004016142e9565b919092611600614b83565b73605B6900CB9c632000312Cd116B3e1e82985aF7492825b818110611623578380f35b61162e818388614c7a565b6101045460fb5486526101018552604086209135906001600160a01b0316873b15610b5f57604051630b06bff360e21b815260048101929092526001600160a01b0316602482015260448101919091528481606481895af49081156106d55785916116a4575b505061169f90614c1f565b611618565b6116ad90614171565b6105aa578388611694565b5050fd5b50346103375780600319360112610337576033546001600160a01b03163303610325576116e7614b83565b610194600160ff198254161790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b50346103375760203660031901126103375761173c614129565b611744614ca0565b6033546001600160a01b03908116330361032557829181610104541691823b1561179457602484928360405195869485936350e0278760e11b85521660048401525af1801561059f576112385750f35b505050fd5b503461033757610120366003190112610337576033546001600160a01b031633036103255760043560ff8116810361059b5764ffffffffff60243516602435036105d15764ffffffffff60443516604435036105d15764ffffffffff60643516606435036105d15764ffffffffff60843516608435036105d15761ffff8060a4351660a435036105d1578060c4351660c435036105d1578060e4351660e435036105d15764ffffffffff610104351661010435036105d1577f75dab8e449fbbb96e7a6aba10424f40cd398bf158f0be1270be90389a3eeef7e916101209164ffffffffff60d81b6101043560d81b1660ff831665ffffffffff0060243560081b16176affffffffff00000000000060443560301b161764ffffffffff60581b60643560581b161764ffffffffff60801b60843560801b161761ffff60a81b60a43560a81b161761ffff60b81b60c43560b81b161761ffff60c81b60e43560c81b1617176101065560ff6040519216825264ffffffffff60243516602083015264ffffffffff60443516604083015264ffffffffff60643516606083015264ffffffffff6084351660808301528060a4351660a08301528060c4351660c083015260e4351660e082015264ffffffffff6101043516610100820152a180f35b50346103375760203660031901126103375760209060ff906040906001600160a01b036119a2614129565b16815260fd84522054166040519015158152f35b50346103375780600319360112610337576033546001600160a01b03811633810361032557600091827fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556001600160601b0360a01b166033557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610337576020366003190112610337576001600160a01b03611a59614129565b168015611a7757816040916020935261013383522054604051908152f35b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b5034610337576020366003190112610337576004356001600160401b03811161059b57611aff903690600401614287565b5050611b09614da3565b9061075460405192839215158352604060208401526040830190614104565b5034610337576020366003190112610337576004356001600160a01b03818116918290036105c2576033541633036103255761010480546001600160a01b031916821790556040519081527fe7ae49f883c825b05681b3e00e8be6fdea9ed2a8a45e4c6ecb9390fc44cce61590602090a180f35b5034610337576020366003190112610337576020611bbb600435614586565b6040516001600160a01b039091168152f35b503461033757602036600319011261033757611be7614129565b6033546001600160a01b0391908216330361032557168015611c1a5761010780546001600160a01b031916909117905580f35b604051630ae8f22360e21b8152600490fd5b5034610337578060031936011261033757602060ff61019454166040519015158152f35b503461033757604036600319011261033757611c6a614129565b60243590611c76615425565b611c7e614b83565b610104546001600160a01b03919084908316803b1561059b576040516310b3879160e11b81526001600160a01b0384166004820152602481018690529082908290604490829084905af1801561059f57611d06575b50507f7a0984e898d33e4bf6ad9f851bfab5517683d3dae5b57ed58fa8c7152d822e32916020916040519485521692a280f35b611d0f90614171565b6105aa578338611cd3565b50346103375780600319360112610337577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003611d735760206040516000805160206154e98339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b50604036600319011261033757611df3614129565b906024356001600160401b03811161059b57611e1390369060040161436b565b916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690611e4c308314156143b8565b611e696000805160206154e9833981519152928284541614614419565b80603354163303610325577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611eab57505061058491925061447a565b6040516352d1902d60e01b8152602094939291831691908581600481865afa600091816120ac575b50611f345760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9493940361205557611f458261447a565b604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a284511580159061204d575b611f86575b505050905080f35b813b15611ffc5750600084819284611ff29697519201905af4611fa761450a565b907f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60405193611fd6856141ba565b60278552840152660819985a5b195960ca1b6040840152614a5f565b5080388080611f7e565b62461bcd60e51b815260048101839052602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506001611f79565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918782813d83116120d4575b6120c381836141f1565b810103126103375750519038611ed3565b503d6120b9565b50346103375780600319360112610337576034546001600160a01b03908181163381900361214557806033549384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a01b0319928316176033551660345580f35b6040516305e05b4b60e31b8152600490fd5b50346103375760208060031936011261059b576001600160401b03906004358281116105aa5761218d6040913690600401614287565b90809291612199614b83565b810103126105d157808201359035600181036122e75750506101069182549060ff8216156122d55761226a93839264ffffffffff60581b6121de610e10420642614a45565b60581b1664ffffffffff60581b19919091161790556101c6546101085461010954604080516305d3b1d360e41b815260048101939093529381166001600160401b0316602483015261ffff608082901c16604483015263ffffffff9381901c8416606483015260601c9092166084830152909384916001600160a01b03169082908790829060a4820190565b03925af180156122ca57839061229b575b835261010a90525060408120805463ff00ff001916630100010017905580f35b508082813d83116122c3575b6122b181836141f1565b810103126105d15761010a915161227b565b503d6122a7565b6040513d85823e3d90fd5b60405163a397eb4760e01b8152600490fd5b600281036124155750506101069182549060ff8216156122d5576123b593839264ffffffffff60801b61231e610e10420642614a45565b64ffffffffff60801b19909216608092831b91909116179091556101c6546101085461010954604080516305d3b1d360e41b815260048101939093526001600160401b039582169590951660248301529283901c61ffff1660448201529282901c63ffffffff908116606485015260609290921c9091166084830152909384916001600160a01b03169082908790829060a4820190565b03925af180156122ca5783906123e6575b835261010a90525060408120805463ff00ff001916630200010017905580f35b508082813d831161240e575b6123fc81836141f1565b810103126105d15761010a91516123c6565b503d6123f2565b91939250906003908181036125da57506101069060ff825416156122d55761243b61516b565b946124446151ea565b9573605B6900CB9c632000312Cd116B3e1e82985aF749160fb548752610101918282526040882090843b156125d65760405163df8fd62160e01b8152606060048201529189918391829161249c906064840190614d56565b908a602484015260448301520381875af480156125cb579088916125b7575b505060405193976124cb856141d5565b600a90818652610140368488013787895261010a835260408920805462ff000019166201000017815560010199895b838110612580575050505086975060fb969596548652526040842090803b15610e765761254785936040519586948593849363b2bdfd6b60e01b8552606060048601526064850190614d56565b916024840152604483015203915af4801561059f5761256c575b505061058490615450565b61257590614171565b61059b578138612561565b806125a1605a6125948f946125b2956150c6565b905490861b1c06856150de565b516125ac828b6150de565b52614c1f565b6124fa565b6125c090614171565b610b5f5786386124bb565b6040513d8a823e3d90fd5b8880fd5b9293926004146125eb575b50505080f35b6101069060ff825416156122d55761260161516b565b9161260a6151ea565b9173605B6900CB9c632000312Cd116B3e1e82985aF7460fb54885287610101958689526040822090833b156105c25760405163069381c360e51b81526060600482015291839183918291612662906064840190614d56565b9089602484015260448301520381865af4801561059f5761281b575b5091906040519161268e836141d5565b600a95868452610140368b86013788855261010a8a5260408520805462ff000019166201000017815560010191855b8881106127eb575050505060fb5483528588526040832091813b156105aa578391612706916040518095819482936353ce4e5160e11b8452606060048501526064840190614d56565b90896024840152604483015203915af4801561059f576127d7575b50505461ffff808260a81c169183830292808404851490151715610ddb5760b81c168281029281840414901517156127c3579061275d91614a52565b9060fb5493848652818152600f604087200154928381029381850414901517156127ad576127a59486525261279e612710600f604087200192048254614a45565b9055615450565b3880806125e5565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b86526011600452602486fd5b6127e090614171565b6106e0578538612721565b8394959650612804605a6125948361280f9596976150c6565b516125ac82896150de565b908b95949392916126bd565b61282490614171565b610b4757873861267e565b503461033757602036600319011261033757603354600435906001600160a01b03163303610325576020817f895ece2457e03622f6eab9f28377343eca29710870eb9636d6794049860e53fc9261010e55604051908152a180f35b503461033757612899366142b4565b6040519060208201928284106001600160401b038511176128cf5761058494610e7194604052868452610e61610e5c84336146f9565b634e487b7160e01b600052604160045260246000fd5b503461033757806003193601126103375761010060405161290581614155565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152015261012060405161294381614155565b64ffffffffff610100610106549260ff84168152828460081c166020820152828460301c166040820152828460581c166060820152828460801c16608082015261ffff8460a81c1660a082015261ffff8460b81c1660c082015261ffff8460c81c1660e08201528360d81c8282015260ff6040519416845282602082015116602085015282604082015116604085015282606082015116606085015282608082015116608085015261ffff60a08201511660a085015261ffff60c08201511660c085015261ffff60e08201511660e0850152015116610100820152f35b5034610337576020908160031936011261033757612a3c614129565b6001600160a01b03927f00000000000000000000000000000000000000000000000000000000000000008416612a74308214156143b8565b612a916000805160206154e9833981519152918683541614614419565b846033541633036103255760405194612aa98661419f565b8486527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612ae45750505061058491925061447a565b8392949316906040516352d1902d60e01b81528581600481865afa60009181612bc1575b50612b695760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9493940361205557612b7a8261447a565b604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2845115801590612bb957611f8657505050905080f35b506000611f79565b90918782813d8311612be9575b612bd881836141f1565b810103126103375750519038612b08565b503d612bce565b50346103375760a0366003190112610337576001600160a01b03600435818116908190036105c257612c2061413f565b916001600160401b03916044358381116106e057612c4290369060040161436b565b91606435848111610b5f57612c5b90369060040161436b565b6084359182168092036105d15786549060ff95868360081c161595868097613098575b8015613082575b156130265760019860ff1994888b878316178d55613015575b508615611c1a57612cdb906001600160601b0360a01b978860fc54161760fc55612cd68a8d5460081c16612cd181614b0c565b614b0c565b614a9f565b612cee888b5460081c16612cd181614b0c565b80518281116130015761013090808c612d0784546145aa565b94601f95868111612fb6575b50602091868411600114612f2f5792612f24575b5050600019600383901b1c1916908b1b1790555b8251918211612f105761013192612d5284546145aa565b828111612ebb575b506020918311600114612e3857612dca949392918b9183612e2d575b5050600019600383901b1c191690891b1790555b8754958660081c1690612d9c82614b0c565b612da582614b0c565b8761016255612db382614b0c565b612dbc82614b0c565b610194908154169055614b0c565b8015612e1b576101c691825416179055612de2578280f35b61ff00191682556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b604051630cee34c560e11b8152600490fd5b015190503880612d76565b838b5293929189917fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7390601f1983168d5b818110612ea357509683612dca9810612e8a575b505050811b019055612d8a565b015160001960f88460031b161c19169055388080612e7d565b8289015184558d959093019260209283019201612e69565b612f0190858d527fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db738480870160051c82019260208810612f07575b0160051c0190614b6c565b38612d5a565b92508192612ef6565b634e487b7160e01b8a52604160045260248afd5b015190503880612d27565b91908e9450601f1984168684527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf34935b818110612f9457508411612f7b575b505050811b019055612d3b565b015160001960f88460031b161c19169055388080612f6e565b93839596602092939491839286015181550195019301908f9594939291612f5f565b612ffb908684527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf348880870160051c82019260208810612f07570160051c0190614b6c565b38612d13565b634e487b7160e01b8b52604160045260248bfd5b61ffff1916610101178b5538612c9e565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015612c855750600188851614612c85565b50600188851610612c7e565b50346103375760031960403682011261059b576001600160401b03906004358281116105aa576130d89036906004016142e9565b919092602435908111610e76576130f39036906004016142e9565b60335491939092916001600160a01b0316330361032557859473605B6900CB9c632000312Cd116B3e1e82985aF7491823b15610b5f5761316d61315e94889660405198899788968796631bd4474f60e31b885260fd6004890152606060248901526064880191614cea565b92858403016044860152614cea565b03915af4801561059f576112385750f35b503461033757606036600319011261033757613198614129565b6044359060028210156105c25761010e54604051631b7fc0f360e11b815261010260048201526101036024808301919091526001600160a01b039384166044830152356064820152926131ef906084850190614d33565b60a483015260808260c48173605B6900CB9c632000312Cd116B3e1e82985aF745af49081156122ca5783928485918694613243575b5060809550826040519516855260208501521660408301526060820152f35b9350505091506080813d8211613299575b81613261608093836141f1565b810103126105c25760809250613276816153aa565b91602082015192606061328b604085016153aa565b930151909392909238613224565b3d9150613254565b503461033757806003193601126103375760a0610103546040519061ffff8082168352808260101c166020840152808260201c1660408401528160301c16606083015260401c6080820152f35b50346103375780602080600319360112611248576004356001600160401b0381116116b857613322839136906004016142e9565b91909261332d614b83565b73605B6900CB9c632000312Cd116B3e1e82985aF7492825b818110613350578380f35b61335b818388614c7a565b35613364614bc8565b60fb908154865261010180865260408720883b15610b4757604051906329caab3960e11b8252836004830152602482015287816044818c5af49081156125cb578891613437575b50506101045492548752855260408620916001600160a01b0316873b15610b5f57604051630b06bff360e21b815260048101929092526001600160a01b0316602482015260448101919091528481606481895af49081156106d5578591613423575b505061341e90600161016255614c1f565b613345565b61342c90614171565b6105aa57838861340d565b61344090614171565b610b5f57868b6133ab565b50346103375761058461345d366142b4565b9161346b610e5c84336146f9565b6147c2565b50346103375760e03660031901126103375761348a61413f565b60c4356001600160401b0381116105c2576134a9903690600401614287565b6134b4929192615425565b6134bc614b83565b6134e260043560ff6001918060081c600052610105602052161b60406000205416151590565b613a7e5760043560081c845261010560205260408420600160ff600435161b815417905561351160ff54614c1f565b8060ff55670de0b6b3a7640000908146029146830414461517156127c3579061353991614a52565b6001600160a01b038316855260fe602052604085208054919491929063ffffffff80851614613a6a57906135e3929163ffffffff60018187160116809563ffffffff19161790556040519361358d85614155565b60043585526001600160a01b038616602086015261ffff6084351660408601526060850152608084018790526001600160801b0360a435811660a08601526044351660c085015260643560e08501523691614334565b6101008201528284526101006020526101006004604086208351815560018060a01b0360208501511661ffff60a01b604086015160a01b1663ffffffff60b01b606087015160b01b169065ffffffffffff60d01b608088015160d01b169217171760018201556001600160801b0360a0850151166001600160801b031960c086015160801b1617600282015560e08401516003820155019101518051906001600160401b038211613a5657819061369a84546145aa565b601f8111613a1b575b50602090601f83116001146139b75787926139ac575b50508160011b916000199060031b1c19161790555b6040516136da8161419f565b8381526001600160a01b0382161561396857600083815261013260205260409020546137a891610e719161371a906001600160a01b031615155b15614c2e565b6000858152610132602052604090205461373e906001600160a01b03161515613714565b6001600160a01b0384168087526101336020908152604080892080546001019055878952610132909152872080546001600160a01b031916821790558590877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a484846148d6565b61010480546001600160a01b0316803b15610e76576040516310b3879160e11b81526001600160a01b0384166004820152604480356024830152909186918391829084905af180156106d557613955575b50839073dB4DfBAbCF466592159037B88e4067C61654eFAC60fb54835261010160205260408320813b156105aa578390606460405180948193636ebb252160e11b83526004830152896024830152823560448301525af49081156122ca578391613941575b50505461010e5473605B6900CB9c632000312Cd116B3e1e82985aF74916001600160a01b031690823b156105aa57604051638ec4211160e01b8152610102600482015261010360248201526044808201939093526001600160a01b03861660648201529135608483015260a4820152908290829060c49082905af4801561059f5761392d575b505060408051606435815260443560208201526001600160a01b0390921691600435917faf1bba31184b4d13e4f756b22fc2755d77b6ad147f10a7b12ea6afa58a2ca5f691a480f35b61393690614171565b6105c25782386138e4565b61394a90614171565b61059b57813861385e565b61396190949194614171565b92386137f9565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b0151905038806136b9565b848852602088209250601f198416885b818110613a0357509084600195949392106139ea575b505050811b0190556136ce565b015160001960f88460031b161c191690553880806139dd565b929360206001819287860151815501950193016139c7565b613a469085895260208920601f850160051c81019160208610613a4c575b601f0160051c0190614b6c565b386136a3565b9091508190613a39565b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b87526011600452602487fd5b604051630490d63160e01b8152600490fd5b5034610337576040366003190112610337576004356001600160401b036024358181116105aa57613ac5903690600401614229565b6101c6546001600160a01b031633819003613be0575082845261010a60209281845260ff6040872054161580613bcf575b613afe578580f35b600192836040882001908051928311613bbb57680100000000000000008311613bbb5785908254848455808510613ba1575b500190875284872084885b848110613b8f5750505050508385528252604084208160ff1982541617905561010c61010d928354865261010b81528460408720558354948652528260408520558201809211610fbf575538808080808580f35b87845194019381840155018590613b3b565b838a52828a20613bb5918101908601614b6c565b38613b30565b634e487b7160e01b88526041600452602488fd5b5060ff604087205460081c16613af6565b60405163073e64fd60e21b81523360048201526001600160a01b03919091166024820152604490fd5b0390fd5b503461033757602036600319011261033757600435613c2a614ca0565b6033546001600160a01b03163303610325578180808093818115613c54575b3390f1156107d45780f35b506108fc613c49565b503461033757806003193601126103375760fc546040516001600160a01b039091168152602090f35b503461033757604036600319011261033757613ce0604060a092613ca8614129565b613cb06153be565b5060fb54825261010160205260018383200190600180871b031682526020528181206024358252602052206153e9565b613d15604051809260808091805184526020810151602085015260408101516040850152606081015160608501520151910152565bf35b5034610337576020366003190112610337576004356001600160401b03811161059b576040613d4d613d81923690600401614229565b60fb548452610101602052818420825193849283926371695c4760e01b845260048401528460248401526044830190614d56565b038173605B6900CB9c632000312Cd116B3e1e82985aF745af4801561059f5782918391613db9575b6040838382519182526020820152f35b9150506040813d604011613dee575b81613dd5604093836141f1565b8101031261059b57604091506020815191015138613da9565b3d9150613dc8565b503461033757604036600319011261033757613e10614129565b602435906001600160a01b038080613e2785614586565b16921691808314613f1e57803314908115613efc575b5015613e91578284526101346020526040842080546001600160a01b03191683179055613e6983614586565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b905084526101356020526040842033855260205260ff60408520541638613e3d565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b5034610337576020366003190112610337576020611bbb6004356145e4565b5034610337578060031936011261033757604051908061013090815490613fb2826145aa565b808652926001928084169081156113095750600114613fdb576107548661129b818803826141f1565b815292507f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf345b82841061401d57505050810160200161129b826107543861128b565b80546020858701810191909152909301928101614001565b503461033757602036600319011261033757613ce0604060a0926140576153be565b5060fb5481526101016020528181206004358252602052206153e9565b90503461059b57602036600319011261059b5760043563ffffffff60e01b81168091036105c257602092506380ac58cd60e01b81149081156140d0575b81156140bf575b5015158152f35b6301ffc9a760e01b149050386140b8565b635b5e139f60e01b811491506140b1565b60005b8381106140f45750506000910152565b81810151838201526020016140e4565b9060209161411d815180928185528580860191016140e1565b601f01601f1916010190565b600435906001600160a01b03821682036105d157565b602435906001600160a01b03821682036105d157565b61012081019081106001600160401b038211176128cf57604052565b6001600160401b0381116128cf57604052565b60a081019081106001600160401b038211176128cf57604052565b602081019081106001600160401b038211176128cf57604052565b606081019081106001600160401b038211176128cf57604052565b61016081019081106001600160401b038211176128cf57604052565b90601f801991011681019081106001600160401b038211176128cf57604052565b6001600160401b0381116128cf5760051b60200190565b81601f820112156105d15780359161424083614212565b9261424e60405194856141f1565b808452602092838086019260051b8201019283116105d1578301905b828210614278575050505090565b8135815290830190830161426a565b9181601f840112156105d1578235916001600160401b0383116105d157602083818601950101116105d157565b60609060031901126105d1576001600160a01b039060043582811681036105d1579160243590811681036105d1579060443590565b9181601f840112156105d1578235916001600160401b0383116105d1576020808501948460051b0101116105d157565b6001600160401b0381116128cf57601f01601f191660200190565b92919261434082614319565b9161434e60405193846141f1565b8294818452818301116105d1578281602093846000960137010152565b9080601f830112156105d15781602061438693359101614334565b90565b60409060031901126105d1576004356001600160a01b03811681036105d1579060243580151581036105d15790565b156143bf57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561442057565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b156144af576000805160206154e983398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b3d15614535573d9061451b82614319565b9161452960405193846141f1565b82523d6000602084013e565b606090565b1561454157565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b600090815261013260205260409020546001600160a01b031661438681151561453a565b90600182811c921680156145da575b60208310146145c457565b634e487b7160e01b600052602260045260246000fd5b91607f16916145b9565b60008181526101326020526040902054614608906001600160a01b0316151561453a565b600090815261013460205260409020546001600160a01b031690565b1561462b57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b156146e057565b60405162461bcd60e51b815280613c0960048201614686565b906001600160a01b03808061470d84614586565b16931691838314938415614740575b50831561472a575b50505090565b614736919293506145e4565b1614388080614724565b90935060005261013560205260406000208260005260205260ff60406000205416923861471c565b1561476f57565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b906147ea916147d084614586565b6001600160a01b0393918416928492909183168414614768565b1691821561488557816148079161480086614586565b1614614768565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000848152610134602052604081206001600160601b0360a01b90818154169055838252610133602052604082206000198154019055848252604082206001815401905585825261013260205284604083209182541617905580a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9091600091803b156149c1576149216020918493604051948580948193630a85bd0160e11b9a8b84523360048501528460248501526044840152608060648401526084830190614104565b03926001600160a01b03165af190829082614979575b505061496b5761494561450a565b805190816149665760405162461bcd60e51b815280613c0960048201614686565b602001fd5b6001600160e01b0319161490565b909192506020813d82116149b9575b81614995602093836141f1565b8101031261059b5751906001600160e01b0319821682036103375750903880614937565b3d9150614988565b50505050600190565b91926000929190813b15614a3b57602091614a209185604051958680958194630a85bd0160e11b9b8c845233600485015260018060a01b0380951660248501526044840152608060648401526084830190614104565b0393165af19082908261497957505061496b5761494561450a565b5050505050600190565b919082039182116127ad57565b919082018092116127ad57565b90919015614a6b575090565b815115614a7b5750805190602001fd5b60405162461bcd60e51b815260206004820152908190613c09906024830190614104565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103819055603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b15614b1357565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b818110614b77575050565b60008155600101614b6c565b60ff6101945416614b9057565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b6101626002815414614bda5760029055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60001981146127ad5760010190565b15614c3557565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b9190811015614c8a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b60ff610194541615614cae57565b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b9190808252602080920192916000805b838210614d0957505050505090565b9091929394853560018060a01b0381168091036105c2578152830194830193929160010190614cfa565b906002821015614d405752565b634e487b7160e01b600052602160045260246000fd5b90815180825260208080930193019160005b828110614d76575050505090565b835185529381019392810192600101614d68565b91909164ffffffffff808094169116019182116127ad57565b600090600090606091610106546001908160ff821614614dc257505050565b64ffffffffff959295949193949081614de5818360081c16828460581c16614d8a565b16421115614e11575050505060405192816020850152604084015260408352614e0d836141ba565b9190565b808280614e2c9360309a969998979a1c169160801c16614d8a565b164211614fea5773EDB80829E4ED4b4E6Ff7A178801b78586d279d266040908151926305f739f960e21b845261010b8060048601526020948581602481875af4908115614fe0578391614fb3575b50614e8757505050505050565b8395985060448597989495929395518096819363c9c3102d60e01b835260048301528560248301525af4928315614fa7578193614f78575b5082815261010a80865260ff8583205460181c166003811015614f64578803614efc575050506003825193840152818301528152614386816141ba565b838298969594939852845260ff8382205460181c16906003821015614f505750600214614f2b575b5050509190565b90919294506004825193840152818301528152614f47816141ba565b91388080614f24565b634e487b7160e01b81526021600452602490fd5b634e487b7160e01b83526021600452602483fd5b9092508481813d8311614fa0575b614f9081836141f1565b810103126105c257519138614ebf565b503d614f86565b508351903d90823e3d90fd5b90508581813d8311614fd9575b614fca81836141f1565b810103126105c2575138614e7a565b503d614fc0565b85513d85823e3d90fd5b93509091506040519260026020850152604084015260408352614e0d836141ba565b9060018060a01b038060fc5416906101075416604051906323b872dd60e01b82523360048301526024820152826044820152602081606481600080965af1801561059f5761508f575b505061506181836152de565b6040519081527f58c7b3bf0b0e168048426c1e9443a72696526292ca664e18b11f934cd6cfbbf360203392a3565b6020813d82116150be575b816150a7602093836141f1565b8101031261059b5751801515036103375780615055565b3d915061509a565b8054821015614c8a5760005260206000200190600090565b8051821015614c8a5760209160051b010190565b60209081818403126105d1578051906001600160401b0382116105d157019180601f840112156105d157825161512781614212565b9361513560405195866141f1565b818552838086019260051b8201019283116105d1578301905b82821061515c575050505090565b8151815290830190830161514e565b60fb5460009081526101016020526002604082200160405190634d63fffd60e01b82526004820152816024820152600a6044820152818160648173D2ACc08f1d6e403FCcBfD20D2098C653f79ddb4d5af49182156107d45780926151ce57505090565b61438692503d8091833e6151e281836141f1565b8101906150f2565b60fb5460009081526101016020526002604082200160405190634d63fffd60e01b82526004820152600a6024820152605a6044820152818160648173D2ACc08f1d6e403FCcBfD20D2098C653f79ddb4d5af49182156107d45780926151ce57505090565b60fb54600090815261010160205260408120600c8101939192600d82019260029092019173dB4DfBAbCF466592159037B88e4067C61654eFAC91823b156106e057918594939160a49360405198899687956311b7263f60e21b8752600487015260248601526044850152606484015260848301525af49081156107d457506152d35750565b6152dc90614171565b565b91909160fb5492600093845261010180602052604060018187200133875260205280862084875260205280862091615317848454614a52565b835560fb548752602052808620848752602052615338818720938454614a52565b83558573605B6900CB9c632000312Cd116B3e1e82985aF7492833b1561059b576044835180958193636496053360e01b835288600484015260248301525af49081156153a157506152dc949550615392575b50549061524e565b61539b90614171565b3861538a565b513d87823e3d90fd5b51906001600160a01b03821682036105d157565b604051906153cb82614184565b60006080838281528260208201528260408201528260608201520152565b906040516153f681614184565b608060048294805484526001810154602085015260028101546040850152600381015460608501520154910152565b3360005260fd60205260ff604060002054161561543e57565b60405163143606b960e31b8152600490fd5b600081815261010c9081602052604081205461010d92835494600019958681019081116154d457845261010b92836020526040852054908552604085205583526020528160408120558254848101908111610fbf57825260205280604081205581549283019283116154c0575055565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b85526011600452602485fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220f568baf440c478582acc96778c3c978cfbc96c153e481c91fe2994c5cf95ee1364736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a71461407457508063068bcd8d1461403557806306fdde0314613f8c578063081812fc14613f6d578063095ea7b314613df65780630aaef80214613d175780630e357a6e14613c8657806316a065c614613c5d57806317e0f25214613c0d5780631fe543e314613a9057806320dfe3c61461347057806323b872dd1461344b57806328275338146132ee5780632bf8e8f6146132a157806332eb808a1461317e578063350b2369146130a4578063362925c214612bf05780633659cfe614612a2057806339c17502146128e557806342842e0e1461288a57806343f0e9931461282f5780634585e33b146121575780634e71e0c8146120db5780634f1ef28614611dde57806352d1902d14611d1a57806358c7a06314611c505780635c975abb14611c2c578063603d080014611bcd5780636352211e14611b9c5780636817031b14611b285780636e04ff0d14611ace57806370a0823114611a37578063715018a6146119b6578063736c0d5b1461197757806376f7a9fc14611799578063802e9cfa146117225780638456cb59146116bc5780638d47a30d146115c15780638da5cb5b14611598578063918c49e4146113e85780639208b21e1461133657806395d89b411461124b5780639aab85e5146111d75780639d215042146110d1578063a22cb46514611011578063a54b2a7314610fe7578063afd5f74714610ee1578063b242e53414610e7a578063b88d4fde14610e01578063b9e53a9f14610b77578063c3b82b8d14610838578063c417db69146107e0578063c87b56dd146106e4578063db640081146105ff578063e30c3978146105d6578063e4421be21461048d578063e985e9c514610438578063f1bd4c041461040b578063f7b188a5146103a8578063fbd7823514610364578063fbfa77cf1461033a5763ff9c7543146102cb57600080fd5b3461033757602036600319011261033757603354600435906001600160a01b03163303610325576020817f39feb9fafd10c5355c86cdccca7884a183c4dd524ca37b0761575ce0974cdb069261011155604051908152a180f35b604051632e6c18c960e11b8152600490fd5b80fd5b5034610337578060031936011261033757610104546040516001600160a01b039091168152602090f35b503461033757602036600319011261033757602061039e60043560ff6001918060081c600052610105602052161b60406000205416151590565b6040519015158152f35b50346103375780600319360112610337576033546001600160a01b03163303610325576103d3614ca0565b61019460ff1981541690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b5034610337578060031936011261033757600f604060209260fb5481526101018452200154604051908152f35b503461033757604036600319011261033757610452614129565b604061045c61413f565b9260018060a01b038093168152610135602052209116600052602052602060ff604060002054166040519015158152f35b50346103375760403660031901126105d1576004356104aa614b83565b6104b2614bc8565b8173__$bf3a140bdbff42a6137d0acc0952596ca5$__60fb5482526101018060205260408320823b156105aa57604051906329caab3960e11b825285600483015260248201528381604481865af49081156105c65784916105ae575b505060018060a01b0361010454169060fb54845260205260408320823b156105aa57604051630b06bff360e21b8152600481018690526001600160a01b039290921660248301526044820152908290829060649082905af4801561059f57610587575b506001610162556105846024358361500c565b80f35b61059090614171565b61059b578138610571565b5080fd5b6040513d84823e3d90fd5b8380fd5b6105b790614171565b6105c257823861050e565b8280fd5b6040513d86823e3d90fd5b600080fd5b50346103375780600319360112610337576034546040516001600160a01b039091168152602090f35b50346103375760208060031936011261059b57816004356001600160401b03811161059b5791610634829336906004016142e9565b92909161063f614b83565b73__$bf3a140bdbff42a6137d0acc0952596ca5$__92825b858110610662578380f35b61066d818784614c7a565b3560fb548552610101845260408520863b156106e057604051916329caab3960e11b8352600483015260248201528481604481895af49081156106d55785916106c1575b50506106bc90614c1f565b610657565b6106ca90614171565b6105aa5783886106b1565b6040513d87823e3d90fd5b8580fd5b50346103375760208060031936011261059b57604051632f8218bd60e21b815261010060048201526004356024820152828160448173__$0e7f1d138f6cc9ca9006918b4d39b2c532$__5af49283156107d4578093610758575b5050610754604051928284938452830190614104565b0390f35b909192503d8082843e61076b81846141f1565b820191838184031261059b578051906001600160401b0382116105c2570182601f8201121561059b578051916107a083614319565b936107ae60405195866141f1565b8385528584840101116103375750906107cc918480850191016140e1565b90388061073e565b604051903d90823e3d90fd5b5034610337576020366003190112610337576001600160a01b0380610803614129565b16825261010260209081526040808420548316808552938190205481516001600160a01b039586168152931690931690820152f35b50346103375760603660031901126103375760243560043560443561085b614b83565b610863614bc8565b73__$bf3a140bdbff42a6137d0acc0952596ca5$__9160fb5485526101018560209482865260408220813b156105c2576040516329caab3960e11b9182825286600483015260248201528381604481865af49081156105c6578491610b63575b5050610104805460fb548552858952604085206001600160a01b039182169290853b15610b5f57604051630b06bff360e21b808252600482018b90526001600160a01b0395909516602482015260448101919091528681606481895af4908115610b3c578791610b4b575b50506101629360018555610940614bc8565b60fb548752878b5260408720863b15610b47576040519182528c600483015260248201528681604481895af4908115610b3c578791610b28575b505054169060fb54855285895260408520843b156106e057604051918252600482018b90526001600160a01b0392909216602482015260448101919091528381606481865af49081156105c6578491610b14575b50506001905560fb549283835280875260016040842001336000528752604060002085845287526040832093835286526040822084835286526040822092610a17868254614a45565b8155610a24868554614a45565b8455813b156105c2578290604460405180948193636496053360e01b835288600484015260248301525af4801561059f57610b00575b5050610a6790548261524e565b60405190815281838201527fe6907eb8ffc12ac27891b5560db15647cae89e2b344f0c34c63bb6f1d4249cff60403392a2605f810290808204605f1490151715610aec576064900490610aba82846152de565b6040519283528201527f7e9ecb928e58cb1d1c8cda62ae789939f9f184616eb26ef72e801f98b6ef556a60403392a280f35b634e487b7160e01b84526011600452602484fd5b610b0990614171565b6106e0578538610a5a565b610b1d90614171565b6105c25782386109ce565b610b3190614171565b6106e057853861097a565b6040513d89823e3d90fd5b8780fd5b610b5490614171565b6106e057853861092e565b8680fd5b610b6c90614171565b6105c25782386108c3565b5036600319016080811261059b57604013610337576044356001600160a01b03818116918281036105d15760643590338552610110936020948086526040872054610111541115610def5733875285526040862080549060018201809211610ddb5755610be2614b83565b610bea614bc8565b338652610102938486526040872054161580610dd2575b80610dc8575b610d70575b505060043591610c1c8383614a52565b93610c2a6024358096614a52565b91823410610d5e5786808080610c408734614a45565b818115610d55575b3390f115610d4a5760405190633039061160e01b825260048201526101036024820152336044820152826064820152818160848173__$bf3a140bdbff42a6137d0acc0952596ca5$__5af4908115610b3c578791610cfd575b50610ccd907f617b1a2bf0533cea0c5dd46104e1d48f8b290fc7d7360dba0182dbf07a00e46a93614a45565b60fb5487526101018252610ce9600f6040892001918254614a52565b90556040519283523392a460016101625580f35b90508181813d8311610d43575b610d1481836141f1565b810103126105d157517f617b1a2bf0533cea0c5dd46104e1d48f8b290fc7d7360dba0182dbf07a00e46a610ca1565b503d610d0a565b6040513d88823e3d90fd5b506108fc610c48565b604051632ca2f52b60e11b8152600490fd5b604080872080546001600160a01b0319169290921790915580513381526001600160a01b039290921660208301527f677cd8c8ce12dc7827579d65be5e6efa74b6ac9ab04ac43d4648dc85d328c2ae91a13880610c0c565b5033811415610c07565b50801515610c01565b634e487b7160e01b88526011600452602488fd5b60405163d92de14f60e01b8152600490fd5b503461033757608036600319011261033757610e1b614129565b610e2361413f565b90606435906044356001600160401b038311610e765761058493610e4e610e7194369060040161436b565b92610e61610e5c84336146f9565b614624565b610e6c8383836147c2565b6149ca565b6146d9565b8480fd5b503461033757610e8936614389565b6033549091906001600160a01b039081163303610325578116918215610ecf5715610eb8576105849150614a9f565b506001600160601b0360a01b603454161760345580f35b604051633aafecb360e21b8152600490fd5b50346103375780600319360112610337576033546001600160a01b031633036103255760fb54906001820191828111610fd3578260fb55610f20614b83565b610194600160ff198254161790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1815261010180602052600f604083200154908160041b9180830460101490151715610fbf5782936064935260205204600f6040832001557f3bf8992b1ca7018d446bcf1d45dc7a62e50decf5248434be4194aef154463380602060fb54604051908152a180f35b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b82526011600452602482fd5b5034610337578060031936011261033757610107546040516001600160a01b039091168152602090f35b50346103375761102036614389565b6001600160a01b039091169033821461108c57338352610135602052604083208260005260205260406000209015159060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b50346103375760a0366003190112610337576033546001600160a01b031633036103255760043580610108556024356001600160401b0381168091036105c257610109918254916044359363ffffffff91828616908187036105d157606435938416928385036105d1576084359661ffff8816958689036105d1577f3510c45fb24ce728b56d5136c57163ff69e25ab31ac04a1264387c7acff6c41e996bffffffff00000000000000008560a09b61ffff60801b9060801b169471ffffffffffffffffffffffffffffffffffff1916179160401b16179063ffffffff60601b9060601b16171790556040519485526020850152604084015260608301526080820152a180f35b5034610337576020366003190112610337576033546001600160a01b0390811633036103255781906101075416803b1561124857818091602460405180948193630852cd8d60e31b835260043560048401525af1801561059f576112385750f35b61124190614171565b6103375780f35b50fd5b5034610337578060031936011261033757604051908061013190815490611271826145aa565b8086529260019280841690811561130957506001146112af575b6107548661129b818803826141f1565b604051918291602083526020830190614104565b815292507fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db735b8284106112f157505050810160200161129b826107543861128b565b805460208587018101919091529093019281016112d5565b90508695506107549693506020925061129b94915060ff191682840152151560051b82010192933861128b565b50346103375760603660031901126103375760043561ffff908181168091036105d1576024359182168092036105d1576044359060028210156105aa576033546001600160a01b0316330361032557839273__$bf3a140bdbff42a6137d0acc0952596ca5$__803b15610e765784926084916113d96040519687958694631747e07760e01b86526101036004870152602486015260448501526064840190614d33565b5af4801561059f576112385750f35b50346103375760e03660031901126103375760043560c43560ff81168091036105d1578290611415614b83565b61141d614bc8565b73__$bf3a140bdbff42a6137d0acc0952596ca5$__60fb548352610101908160205260408420813b15610e7657604051906329caab3960e11b825286600483015260248201528481604481855af49081156106d5578591611584575b50506101045460fb548552602092909252604084206001600160a01b0392831690823b156106e057604051630b06bff360e21b8152600481018890526001600160a01b039290921660248301526044820152908490829060649082905af49081156105c6578491611570575b505060016101625560fc541690813b156105c257829160e48392604051948593849263d505accf60e01b845233600485015230602485015260443560448501526064356064850152608484015260843560a484015260a43560c48401525af1801561059f5761155c575b506105846024358361500c565b61156590614171565b61059b57813861154f565b61157990614171565b6105c25782386114e5565b61158d90614171565b6105aa578338611479565b50346103375780600319360112610337576033546040516001600160a01b039091168152602090f35b50346103375780602080600319360112611248576004356001600160401b0381116116b8576115f5839136906004016142e9565b919092611600614b83565b73__$bf3a140bdbff42a6137d0acc0952596ca5$__92825b818110611623578380f35b61162e818388614c7a565b6101045460fb5486526101018552604086209135906001600160a01b0316873b15610b5f57604051630b06bff360e21b815260048101929092526001600160a01b0316602482015260448101919091528481606481895af49081156106d55785916116a4575b505061169f90614c1f565b611618565b6116ad90614171565b6105aa578388611694565b5050fd5b50346103375780600319360112610337576033546001600160a01b03163303610325576116e7614b83565b610194600160ff198254161790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b50346103375760203660031901126103375761173c614129565b611744614ca0565b6033546001600160a01b03908116330361032557829181610104541691823b1561179457602484928360405195869485936350e0278760e11b85521660048401525af1801561059f576112385750f35b505050fd5b503461033757610120366003190112610337576033546001600160a01b031633036103255760043560ff8116810361059b5764ffffffffff60243516602435036105d15764ffffffffff60443516604435036105d15764ffffffffff60643516606435036105d15764ffffffffff60843516608435036105d15761ffff8060a4351660a435036105d1578060c4351660c435036105d1578060e4351660e435036105d15764ffffffffff610104351661010435036105d1577f75dab8e449fbbb96e7a6aba10424f40cd398bf158f0be1270be90389a3eeef7e916101209164ffffffffff60d81b6101043560d81b1660ff831665ffffffffff0060243560081b16176affffffffff00000000000060443560301b161764ffffffffff60581b60643560581b161764ffffffffff60801b60843560801b161761ffff60a81b60a43560a81b161761ffff60b81b60c43560b81b161761ffff60c81b60e43560c81b1617176101065560ff6040519216825264ffffffffff60243516602083015264ffffffffff60443516604083015264ffffffffff60643516606083015264ffffffffff6084351660808301528060a4351660a08301528060c4351660c083015260e4351660e082015264ffffffffff6101043516610100820152a180f35b50346103375760203660031901126103375760209060ff906040906001600160a01b036119a2614129565b16815260fd84522054166040519015158152f35b50346103375780600319360112610337576033546001600160a01b03811633810361032557600091827fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556001600160601b0360a01b166033557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610337576020366003190112610337576001600160a01b03611a59614129565b168015611a7757816040916020935261013383522054604051908152f35b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b5034610337576020366003190112610337576004356001600160401b03811161059b57611aff903690600401614287565b5050611b09614da3565b9061075460405192839215158352604060208401526040830190614104565b5034610337576020366003190112610337576004356001600160a01b03818116918290036105c2576033541633036103255761010480546001600160a01b031916821790556040519081527fe7ae49f883c825b05681b3e00e8be6fdea9ed2a8a45e4c6ecb9390fc44cce61590602090a180f35b5034610337576020366003190112610337576020611bbb600435614586565b6040516001600160a01b039091168152f35b503461033757602036600319011261033757611be7614129565b6033546001600160a01b0391908216330361032557168015611c1a5761010780546001600160a01b031916909117905580f35b604051630ae8f22360e21b8152600490fd5b5034610337578060031936011261033757602060ff61019454166040519015158152f35b503461033757604036600319011261033757611c6a614129565b60243590611c76615425565b611c7e614b83565b610104546001600160a01b03919084908316803b1561059b576040516310b3879160e11b81526001600160a01b0384166004820152602481018690529082908290604490829084905af1801561059f57611d06575b50507f7a0984e898d33e4bf6ad9f851bfab5517683d3dae5b57ed58fa8c7152d822e32916020916040519485521692a280f35b611d0f90614171565b6105aa578338611cd3565b50346103375780600319360112610337577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003611d735760206040516000805160206154e98339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b50604036600319011261033757611df3614129565b906024356001600160401b03811161059b57611e1390369060040161436b565b916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690611e4c308314156143b8565b611e696000805160206154e9833981519152928284541614614419565b80603354163303610325577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611eab57505061058491925061447a565b6040516352d1902d60e01b8152602094939291831691908581600481865afa600091816120ac575b50611f345760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9493940361205557611f458261447a565b604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a284511580159061204d575b611f86575b505050905080f35b813b15611ffc5750600084819284611ff29697519201905af4611fa761450a565b907f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60405193611fd6856141ba565b60278552840152660819985a5b195960ca1b6040840152614a5f565b5080388080611f7e565b62461bcd60e51b815260048101839052602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506001611f79565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918782813d83116120d4575b6120c381836141f1565b810103126103375750519038611ed3565b503d6120b9565b50346103375780600319360112610337576034546001600160a01b03908181163381900361214557806033549384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a01b0319928316176033551660345580f35b6040516305e05b4b60e31b8152600490fd5b50346103375760208060031936011261059b576001600160401b03906004358281116105aa5761218d6040913690600401614287565b90809291612199614b83565b810103126105d157808201359035600181036122e75750506101069182549060ff8216156122d55761226a93839264ffffffffff60581b6121de610e10420642614a45565b60581b1664ffffffffff60581b19919091161790556101c6546101085461010954604080516305d3b1d360e41b815260048101939093529381166001600160401b0316602483015261ffff608082901c16604483015263ffffffff9381901c8416606483015260601c9092166084830152909384916001600160a01b03169082908790829060a4820190565b03925af180156122ca57839061229b575b835261010a90525060408120805463ff00ff001916630100010017905580f35b508082813d83116122c3575b6122b181836141f1565b810103126105d15761010a915161227b565b503d6122a7565b6040513d85823e3d90fd5b60405163a397eb4760e01b8152600490fd5b600281036124155750506101069182549060ff8216156122d5576123b593839264ffffffffff60801b61231e610e10420642614a45565b64ffffffffff60801b19909216608092831b91909116179091556101c6546101085461010954604080516305d3b1d360e41b815260048101939093526001600160401b039582169590951660248301529283901c61ffff1660448201529282901c63ffffffff908116606485015260609290921c9091166084830152909384916001600160a01b03169082908790829060a4820190565b03925af180156122ca5783906123e6575b835261010a90525060408120805463ff00ff001916630200010017905580f35b508082813d831161240e575b6123fc81836141f1565b810103126105d15761010a91516123c6565b503d6123f2565b91939250906003908181036125da57506101069060ff825416156122d55761243b61516b565b946124446151ea565b9573__$bf3a140bdbff42a6137d0acc0952596ca5$__9160fb548752610101918282526040882090843b156125d65760405163df8fd62160e01b8152606060048201529189918391829161249c906064840190614d56565b908a602484015260448301520381875af480156125cb579088916125b7575b505060405193976124cb856141d5565b600a90818652610140368488013787895261010a835260408920805462ff000019166201000017815560010199895b838110612580575050505086975060fb969596548652526040842090803b15610e765761254785936040519586948593849363b2bdfd6b60e01b8552606060048601526064850190614d56565b916024840152604483015203915af4801561059f5761256c575b505061058490615450565b61257590614171565b61059b578138612561565b806125a1605a6125948f946125b2956150c6565b905490861b1c06856150de565b516125ac828b6150de565b52614c1f565b6124fa565b6125c090614171565b610b5f5786386124bb565b6040513d8a823e3d90fd5b8880fd5b9293926004146125eb575b50505080f35b6101069060ff825416156122d55761260161516b565b9161260a6151ea565b9173__$bf3a140bdbff42a6137d0acc0952596ca5$__60fb54885287610101958689526040822090833b156105c25760405163069381c360e51b81526060600482015291839183918291612662906064840190614d56565b9089602484015260448301520381865af4801561059f5761281b575b5091906040519161268e836141d5565b600a95868452610140368b86013788855261010a8a5260408520805462ff000019166201000017815560010191855b8881106127eb575050505060fb5483528588526040832091813b156105aa578391612706916040518095819482936353ce4e5160e11b8452606060048501526064840190614d56565b90896024840152604483015203915af4801561059f576127d7575b50505461ffff808260a81c169183830292808404851490151715610ddb5760b81c168281029281840414901517156127c3579061275d91614a52565b9060fb5493848652818152600f604087200154928381029381850414901517156127ad576127a59486525261279e612710600f604087200192048254614a45565b9055615450565b3880806125e5565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b86526011600452602486fd5b6127e090614171565b6106e0578538612721565b8394959650612804605a6125948361280f9596976150c6565b516125ac82896150de565b908b95949392916126bd565b61282490614171565b610b4757873861267e565b503461033757602036600319011261033757603354600435906001600160a01b03163303610325576020817f895ece2457e03622f6eab9f28377343eca29710870eb9636d6794049860e53fc9261010e55604051908152a180f35b503461033757612899366142b4565b6040519060208201928284106001600160401b038511176128cf5761058494610e7194604052868452610e61610e5c84336146f9565b634e487b7160e01b600052604160045260246000fd5b503461033757806003193601126103375761010060405161290581614155565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152015261012060405161294381614155565b64ffffffffff610100610106549260ff84168152828460081c166020820152828460301c166040820152828460581c166060820152828460801c16608082015261ffff8460a81c1660a082015261ffff8460b81c1660c082015261ffff8460c81c1660e08201528360d81c8282015260ff6040519416845282602082015116602085015282604082015116604085015282606082015116606085015282608082015116608085015261ffff60a08201511660a085015261ffff60c08201511660c085015261ffff60e08201511660e0850152015116610100820152f35b5034610337576020908160031936011261033757612a3c614129565b6001600160a01b03927f00000000000000000000000000000000000000000000000000000000000000008416612a74308214156143b8565b612a916000805160206154e9833981519152918683541614614419565b846033541633036103255760405194612aa98661419f565b8486527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612ae45750505061058491925061447a565b8392949316906040516352d1902d60e01b81528581600481865afa60009181612bc1575b50612b695760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9493940361205557612b7a8261447a565b604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2845115801590612bb957611f8657505050905080f35b506000611f79565b90918782813d8311612be9575b612bd881836141f1565b810103126103375750519038612b08565b503d612bce565b50346103375760a0366003190112610337576001600160a01b03600435818116908190036105c257612c2061413f565b916001600160401b03916044358381116106e057612c4290369060040161436b565b91606435848111610b5f57612c5b90369060040161436b565b6084359182168092036105d15786549060ff95868360081c161595868097613098575b8015613082575b156130265760019860ff1994888b878316178d55613015575b508615611c1a57612cdb906001600160601b0360a01b978860fc54161760fc55612cd68a8d5460081c16612cd181614b0c565b614b0c565b614a9f565b612cee888b5460081c16612cd181614b0c565b80518281116130015761013090808c612d0784546145aa565b94601f95868111612fb6575b50602091868411600114612f2f5792612f24575b5050600019600383901b1c1916908b1b1790555b8251918211612f105761013192612d5284546145aa565b828111612ebb575b506020918311600114612e3857612dca949392918b9183612e2d575b5050600019600383901b1c191690891b1790555b8754958660081c1690612d9c82614b0c565b612da582614b0c565b8761016255612db382614b0c565b612dbc82614b0c565b610194908154169055614b0c565b8015612e1b576101c691825416179055612de2578280f35b61ff00191682556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b604051630cee34c560e11b8152600490fd5b015190503880612d76565b838b5293929189917fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7390601f1983168d5b818110612ea357509683612dca9810612e8a575b505050811b019055612d8a565b015160001960f88460031b161c19169055388080612e7d565b8289015184558d959093019260209283019201612e69565b612f0190858d527fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db738480870160051c82019260208810612f07575b0160051c0190614b6c565b38612d5a565b92508192612ef6565b634e487b7160e01b8a52604160045260248afd5b015190503880612d27565b91908e9450601f1984168684527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf34935b818110612f9457508411612f7b575b505050811b019055612d3b565b015160001960f88460031b161c19169055388080612f6e565b93839596602092939491839286015181550195019301908f9594939291612f5f565b612ffb908684527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf348880870160051c82019260208810612f07570160051c0190614b6c565b38612d13565b634e487b7160e01b8b52604160045260248bfd5b61ffff1916610101178b5538612c9e565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015612c855750600188851614612c85565b50600188851610612c7e565b50346103375760031960403682011261059b576001600160401b03906004358281116105aa576130d89036906004016142e9565b919092602435908111610e76576130f39036906004016142e9565b60335491939092916001600160a01b0316330361032557859473__$bf3a140bdbff42a6137d0acc0952596ca5$__91823b15610b5f5761316d61315e94889660405198899788968796631bd4474f60e31b885260fd6004890152606060248901526064880191614cea565b92858403016044860152614cea565b03915af4801561059f576112385750f35b503461033757606036600319011261033757613198614129565b6044359060028210156105c25761010e54604051631b7fc0f360e11b815261010260048201526101036024808301919091526001600160a01b039384166044830152356064820152926131ef906084850190614d33565b60a483015260808260c48173__$bf3a140bdbff42a6137d0acc0952596ca5$__5af49081156122ca5783928485918694613243575b5060809550826040519516855260208501521660408301526060820152f35b9350505091506080813d8211613299575b81613261608093836141f1565b810103126105c25760809250613276816153aa565b91602082015192606061328b604085016153aa565b930151909392909238613224565b3d9150613254565b503461033757806003193601126103375760a0610103546040519061ffff8082168352808260101c166020840152808260201c1660408401528160301c16606083015260401c6080820152f35b50346103375780602080600319360112611248576004356001600160401b0381116116b857613322839136906004016142e9565b91909261332d614b83565b73__$bf3a140bdbff42a6137d0acc0952596ca5$__92825b818110613350578380f35b61335b818388614c7a565b35613364614bc8565b60fb908154865261010180865260408720883b15610b4757604051906329caab3960e11b8252836004830152602482015287816044818c5af49081156125cb578891613437575b50506101045492548752855260408620916001600160a01b0316873b15610b5f57604051630b06bff360e21b815260048101929092526001600160a01b0316602482015260448101919091528481606481895af49081156106d5578591613423575b505061341e90600161016255614c1f565b613345565b61342c90614171565b6105aa57838861340d565b61344090614171565b610b5f57868b6133ab565b50346103375761058461345d366142b4565b9161346b610e5c84336146f9565b6147c2565b50346103375760e03660031901126103375761348a61413f565b60c4356001600160401b0381116105c2576134a9903690600401614287565b6134b4929192615425565b6134bc614b83565b6134e260043560ff6001918060081c600052610105602052161b60406000205416151590565b613a7e5760043560081c845261010560205260408420600160ff600435161b815417905561351160ff54614c1f565b8060ff55670de0b6b3a7640000908146029146830414461517156127c3579061353991614a52565b6001600160a01b038316855260fe602052604085208054919491929063ffffffff80851614613a6a57906135e3929163ffffffff60018187160116809563ffffffff19161790556040519361358d85614155565b60043585526001600160a01b038616602086015261ffff6084351660408601526060850152608084018790526001600160801b0360a435811660a08601526044351660c085015260643560e08501523691614334565b6101008201528284526101006020526101006004604086208351815560018060a01b0360208501511661ffff60a01b604086015160a01b1663ffffffff60b01b606087015160b01b169065ffffffffffff60d01b608088015160d01b169217171760018201556001600160801b0360a0850151166001600160801b031960c086015160801b1617600282015560e08401516003820155019101518051906001600160401b038211613a5657819061369a84546145aa565b601f8111613a1b575b50602090601f83116001146139b75787926139ac575b50508160011b916000199060031b1c19161790555b6040516136da8161419f565b8381526001600160a01b0382161561396857600083815261013260205260409020546137a891610e719161371a906001600160a01b031615155b15614c2e565b6000858152610132602052604090205461373e906001600160a01b03161515613714565b6001600160a01b0384168087526101336020908152604080892080546001019055878952610132909152872080546001600160a01b031916821790558590877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a484846148d6565b61010480546001600160a01b0316803b15610e76576040516310b3879160e11b81526001600160a01b0384166004820152604480356024830152909186918391829084905af180156106d557613955575b50839073__$b6aef517fe05d85bc7364998255804b986$__60fb54835261010160205260408320813b156105aa578390606460405180948193636ebb252160e11b83526004830152896024830152823560448301525af49081156122ca578391613941575b50505461010e5473__$bf3a140bdbff42a6137d0acc0952596ca5$__916001600160a01b031690823b156105aa57604051638ec4211160e01b8152610102600482015261010360248201526044808201939093526001600160a01b03861660648201529135608483015260a4820152908290829060c49082905af4801561059f5761392d575b505060408051606435815260443560208201526001600160a01b0390921691600435917faf1bba31184b4d13e4f756b22fc2755d77b6ad147f10a7b12ea6afa58a2ca5f691a480f35b61393690614171565b6105c25782386138e4565b61394a90614171565b61059b57813861385e565b61396190949194614171565b92386137f9565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b0151905038806136b9565b848852602088209250601f198416885b818110613a0357509084600195949392106139ea575b505050811b0190556136ce565b015160001960f88460031b161c191690553880806139dd565b929360206001819287860151815501950193016139c7565b613a469085895260208920601f850160051c81019160208610613a4c575b601f0160051c0190614b6c565b386136a3565b9091508190613a39565b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b87526011600452602487fd5b604051630490d63160e01b8152600490fd5b5034610337576040366003190112610337576004356001600160401b036024358181116105aa57613ac5903690600401614229565b6101c6546001600160a01b031633819003613be0575082845261010a60209281845260ff6040872054161580613bcf575b613afe578580f35b600192836040882001908051928311613bbb57680100000000000000008311613bbb5785908254848455808510613ba1575b500190875284872084885b848110613b8f5750505050508385528252604084208160ff1982541617905561010c61010d928354865261010b81528460408720558354948652528260408520558201809211610fbf575538808080808580f35b87845194019381840155018590613b3b565b838a52828a20613bb5918101908601614b6c565b38613b30565b634e487b7160e01b88526041600452602488fd5b5060ff604087205460081c16613af6565b60405163073e64fd60e21b81523360048201526001600160a01b03919091166024820152604490fd5b0390fd5b503461033757602036600319011261033757600435613c2a614ca0565b6033546001600160a01b03163303610325578180808093818115613c54575b3390f1156107d45780f35b506108fc613c49565b503461033757806003193601126103375760fc546040516001600160a01b039091168152602090f35b503461033757604036600319011261033757613ce0604060a092613ca8614129565b613cb06153be565b5060fb54825261010160205260018383200190600180871b031682526020528181206024358252602052206153e9565b613d15604051809260808091805184526020810151602085015260408101516040850152606081015160608501520151910152565bf35b5034610337576020366003190112610337576004356001600160401b03811161059b576040613d4d613d81923690600401614229565b60fb548452610101602052818420825193849283926371695c4760e01b845260048401528460248401526044830190614d56565b038173__$bf3a140bdbff42a6137d0acc0952596ca5$__5af4801561059f5782918391613db9575b6040838382519182526020820152f35b9150506040813d604011613dee575b81613dd5604093836141f1565b8101031261059b57604091506020815191015138613da9565b3d9150613dc8565b503461033757604036600319011261033757613e10614129565b602435906001600160a01b038080613e2785614586565b16921691808314613f1e57803314908115613efc575b5015613e91578284526101346020526040842080546001600160a01b03191683179055613e6983614586565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b905084526101356020526040842033855260205260ff60408520541638613e3d565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b5034610337576020366003190112610337576020611bbb6004356145e4565b5034610337578060031936011261033757604051908061013090815490613fb2826145aa565b808652926001928084169081156113095750600114613fdb576107548661129b818803826141f1565b815292507f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf345b82841061401d57505050810160200161129b826107543861128b565b80546020858701810191909152909301928101614001565b503461033757602036600319011261033757613ce0604060a0926140576153be565b5060fb5481526101016020528181206004358252602052206153e9565b90503461059b57602036600319011261059b5760043563ffffffff60e01b81168091036105c257602092506380ac58cd60e01b81149081156140d0575b81156140bf575b5015158152f35b6301ffc9a760e01b149050386140b8565b635b5e139f60e01b811491506140b1565b60005b8381106140f45750506000910152565b81810151838201526020016140e4565b9060209161411d815180928185528580860191016140e1565b601f01601f1916010190565b600435906001600160a01b03821682036105d157565b602435906001600160a01b03821682036105d157565b61012081019081106001600160401b038211176128cf57604052565b6001600160401b0381116128cf57604052565b60a081019081106001600160401b038211176128cf57604052565b602081019081106001600160401b038211176128cf57604052565b606081019081106001600160401b038211176128cf57604052565b61016081019081106001600160401b038211176128cf57604052565b90601f801991011681019081106001600160401b038211176128cf57604052565b6001600160401b0381116128cf5760051b60200190565b81601f820112156105d15780359161424083614212565b9261424e60405194856141f1565b808452602092838086019260051b8201019283116105d1578301905b828210614278575050505090565b8135815290830190830161426a565b9181601f840112156105d1578235916001600160401b0383116105d157602083818601950101116105d157565b60609060031901126105d1576001600160a01b039060043582811681036105d1579160243590811681036105d1579060443590565b9181601f840112156105d1578235916001600160401b0383116105d1576020808501948460051b0101116105d157565b6001600160401b0381116128cf57601f01601f191660200190565b92919261434082614319565b9161434e60405193846141f1565b8294818452818301116105d1578281602093846000960137010152565b9080601f830112156105d15781602061438693359101614334565b90565b60409060031901126105d1576004356001600160a01b03811681036105d1579060243580151581036105d15790565b156143bf57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561442057565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b156144af576000805160206154e983398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b3d15614535573d9061451b82614319565b9161452960405193846141f1565b82523d6000602084013e565b606090565b1561454157565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b600090815261013260205260409020546001600160a01b031661438681151561453a565b90600182811c921680156145da575b60208310146145c457565b634e487b7160e01b600052602260045260246000fd5b91607f16916145b9565b60008181526101326020526040902054614608906001600160a01b0316151561453a565b600090815261013460205260409020546001600160a01b031690565b1561462b57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b156146e057565b60405162461bcd60e51b815280613c0960048201614686565b906001600160a01b03808061470d84614586565b16931691838314938415614740575b50831561472a575b50505090565b614736919293506145e4565b1614388080614724565b90935060005261013560205260406000208260005260205260ff60406000205416923861471c565b1561476f57565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b906147ea916147d084614586565b6001600160a01b0393918416928492909183168414614768565b1691821561488557816148079161480086614586565b1614614768565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000848152610134602052604081206001600160601b0360a01b90818154169055838252610133602052604082206000198154019055848252604082206001815401905585825261013260205284604083209182541617905580a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9091600091803b156149c1576149216020918493604051948580948193630a85bd0160e11b9a8b84523360048501528460248501526044840152608060648401526084830190614104565b03926001600160a01b03165af190829082614979575b505061496b5761494561450a565b805190816149665760405162461bcd60e51b815280613c0960048201614686565b602001fd5b6001600160e01b0319161490565b909192506020813d82116149b9575b81614995602093836141f1565b8101031261059b5751906001600160e01b0319821682036103375750903880614937565b3d9150614988565b50505050600190565b91926000929190813b15614a3b57602091614a209185604051958680958194630a85bd0160e11b9b8c845233600485015260018060a01b0380951660248501526044840152608060648401526084830190614104565b0393165af19082908261497957505061496b5761494561450a565b5050505050600190565b919082039182116127ad57565b919082018092116127ad57565b90919015614a6b575090565b815115614a7b5750805190602001fd5b60405162461bcd60e51b815260206004820152908190613c09906024830190614104565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103819055603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b15614b1357565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b818110614b77575050565b60008155600101614b6c565b60ff6101945416614b9057565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b6101626002815414614bda5760029055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60001981146127ad5760010190565b15614c3557565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b9190811015614c8a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b60ff610194541615614cae57565b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b9190808252602080920192916000805b838210614d0957505050505090565b9091929394853560018060a01b0381168091036105c2578152830194830193929160010190614cfa565b906002821015614d405752565b634e487b7160e01b600052602160045260246000fd5b90815180825260208080930193019160005b828110614d76575050505090565b835185529381019392810192600101614d68565b91909164ffffffffff808094169116019182116127ad57565b600090600090606091610106546001908160ff821614614dc257505050565b64ffffffffff959295949193949081614de5818360081c16828460581c16614d8a565b16421115614e11575050505060405192816020850152604084015260408352614e0d836141ba565b9190565b808280614e2c9360309a969998979a1c169160801c16614d8a565b164211614fea5773__$f445361e8b50888b0b8cee3fd4db50a783$__6040908151926305f739f960e21b845261010b8060048601526020948581602481875af4908115614fe0578391614fb3575b50614e8757505050505050565b8395985060448597989495929395518096819363c9c3102d60e01b835260048301528560248301525af4928315614fa7578193614f78575b5082815261010a80865260ff8583205460181c166003811015614f64578803614efc575050506003825193840152818301528152614386816141ba565b838298969594939852845260ff8382205460181c16906003821015614f505750600214614f2b575b5050509190565b90919294506004825193840152818301528152614f47816141ba565b91388080614f24565b634e487b7160e01b81526021600452602490fd5b634e487b7160e01b83526021600452602483fd5b9092508481813d8311614fa0575b614f9081836141f1565b810103126105c257519138614ebf565b503d614f86565b508351903d90823e3d90fd5b90508581813d8311614fd9575b614fca81836141f1565b810103126105c2575138614e7a565b503d614fc0565b85513d85823e3d90fd5b93509091506040519260026020850152604084015260408352614e0d836141ba565b9060018060a01b038060fc5416906101075416604051906323b872dd60e01b82523360048301526024820152826044820152602081606481600080965af1801561059f5761508f575b505061506181836152de565b6040519081527f58c7b3bf0b0e168048426c1e9443a72696526292ca664e18b11f934cd6cfbbf360203392a3565b6020813d82116150be575b816150a7602093836141f1565b8101031261059b5751801515036103375780615055565b3d915061509a565b8054821015614c8a5760005260206000200190600090565b8051821015614c8a5760209160051b010190565b60209081818403126105d1578051906001600160401b0382116105d157019180601f840112156105d157825161512781614212565b9361513560405195866141f1565b818552838086019260051b8201019283116105d1578301905b82821061515c575050505090565b8151815290830190830161514e565b60fb5460009081526101016020526002604082200160405190634d63fffd60e01b82526004820152816024820152600a6044820152818160648173__$69292ab8e6f98571d324d08d63c6dae4eb$__5af49182156107d45780926151ce57505090565b61438692503d8091833e6151e281836141f1565b8101906150f2565b60fb5460009081526101016020526002604082200160405190634d63fffd60e01b82526004820152600a6024820152605a6044820152818160648173__$69292ab8e6f98571d324d08d63c6dae4eb$__5af49182156107d45780926151ce57505090565b60fb54600090815261010160205260408120600c8101939192600d82019260029092019173__$b6aef517fe05d85bc7364998255804b986$__91823b156106e057918594939160a49360405198899687956311b7263f60e21b8752600487015260248601526044850152606484015260848301525af49081156107d457506152d35750565b6152dc90614171565b565b91909160fb5492600093845261010180602052604060018187200133875260205280862084875260205280862091615317848454614a52565b835560fb548752602052808620848752602052615338818720938454614a52565b83558573__$bf3a140bdbff42a6137d0acc0952596ca5$__92833b1561059b576044835180958193636496053360e01b835288600484015260248301525af49081156153a157506152dc949550615392575b50549061524e565b61539b90614171565b3861538a565b513d87823e3d90fd5b51906001600160a01b03821682036105d157565b604051906153cb82614184565b60006080838281528260208201528260408201528260608201520152565b906040516153f681614184565b608060048294805484526001810154602085015260028101546040850152600381015460608501520154910152565b3360005260fd60205260ff604060002054161561543e57565b60405163143606b960e31b8152600490fd5b600081815261010c9081602052604081205461010d92835494600019958681019081116154d457845261010b92836020526040852054908552604085205583526020528160408120558254848101908111610fbf57825260205280604081205581549283019283116154c0575055565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b85526011600452602485fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220f568baf440c478582acc96778c3c978cfbc96c153e481c91fe2994c5cf95ee1364736f6c63430008110033",
  "libraries": {
    "RenderConstant": "0x1Cd4a056477222f0fB4D7727F059191613E44f7E",
    "Renderer": "0xF4415A0f02255B9dd5FfF6bE3F4E514F2E18DDfa",
    "FastArray": "0xEDB80829E4ED4b4E6Ff7A178801b78586d279d26",
    "RankingRedBlackTree": "0x6385827d74AD1879fA80A2246e0374557d558C39",
    "SingleRanking": "0xD2ACc08f1d6e403FCcBfD20D2098C653f79ddb4d",
    "DegenRank": "0xdB4DfBAbCF466592159037B88e4067C61654eFAC",
    "PortalLib": "0x605B6900CB9c632000312Cd116B3e1e82985aF74"
  },
  "devdoc": {
    "errors": {
      "DropOff()": [
        {
          "details": "revert when the drop is not on"
        }
      ],
      "IncarnationExceedLimit()": [
        {
          "details": "revert when incarnation count exceed limit"
        }
      ],
      "InsufficientAmount()": [
        {
          "details": "revert when msg.value is insufficient"
        }
      ],
      "NotSetBurnPoolAddress()": [
        {
          "details": "revert if burnPool address not set when infuse"
        }
      ],
      "NotSigner()": [
        {
          "details": "revert when to caller is not signer"
        }
      ],
      "SameSeed()": [
        {
          "details": "revert when the random seed is duplicated"
        }
      ],
      "ZeroAddressSet()": [
        {
          "details": "revert when some address var are set to zero"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baptise(address,uint256)": {
        "details": "reward for share the game",
        "params": {
          "amount": "amount for reward",
          "user": "user address"
        }
      },
      "burnFromBurnPool(uint256)": {
        "details": "burn $REBORN from burn pool",
        "params": {
          "amount": "burn from burn pool"
        }
      },
      "calculateReferReward(address,uint256,uint8)": {
        "details": "returns referrer and referer reward",
        "returns": {
          "ref1": " level1 of referrer. direct referrer",
          "ref1Reward": " level 1 referrer reward",
          "ref2": " level2 of referrer. referrer's referrer",
          "ref2Reward": " level 2 referrer reward"
        }
      },
      "checkUpkeep(bytes)": {
        "details": "checkUpkeep for chainlink automation"
      },
      "claimDrops(uint256[])": {
        "details": "user claim many pools' airdrop",
        "params": {
          "tokenIds": "pools' tokenId array to claim"
        }
      },
      "claimNativeDrops(uint256[])": {
        "details": "user claim many pools' native token airdrop",
        "params": {
          "tokenIds": "pools' tokenId array to claim"
        }
      },
      "claimOwnership()": {
        "details": "pending owner call this function to claim ownership"
      },
      "claimRebornDrops(uint256[])": {
        "details": "user claim many pools' reborn token airdrop",
        "params": {
          "tokenIds": "pools' tokenId array to claim"
        }
      },
      "engrave(bytes32,address,uint256,uint256,uint256,uint256,string)": {
        "details": "engrave the result on chain and reward",
        "params": {
          "cost": "user cost for this life",
          "reward": "$REBORN user earns, decimal 10^18",
          "score": "life score",
          "seed": "random seed in bytes32",
          "user": "user address"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getJackPot()": {
        "details": "return the jackpot amount of current season"
      },
      "getPool(uint256)": {
        "details": "read pool attribute"
      },
      "getPortfolio(address,uint256)": {
        "details": "read pool attribute"
      },
      "getRerferrers(address)": {
        "details": "referrer1: level1 of referrers referrer2: level2 of referrers"
      },
      "incarnate((uint256,uint256),address,uint256)": {
        "details": "user buy the innate for the life",
        "params": {
          "innate": "talent and property choice",
          "referrer": "the referrer address"
        }
      },
      "infuse(uint256,uint256)": {
        "details": "stake $REBORN on this tombstone",
        "params": {
          "amount": "stake amount, decimal 10^18",
          "tokenId": "tokenId of the life to stake"
        }
      },
      "infuse(uint256,uint256,uint256,uint256,bytes32,bytes32,uint8)": {
        "details": "stake $REBORN with permit",
        "params": {
          "amount": "amount of $REBORN to stake",
          "permitAmount": "amount of $REBORN to approve",
          "r": "r of signature",
          "s": "v of signature",
          "tokenId": "tokenId of the life to stake",
          "v": "v of signature"
        }
      },
      "initialize(address,address,string,string,address)": {
        "details": "initialize function",
        "params": {
          "name_": "ERC712 name",
          "owner_": "owner address",
          "rebornToken_": "$REBORN token address",
          "symbol_": "ERC721 symbol",
          "vrfCoordinator_": "chainlink vrf coordinator_ address"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingDrop(uint256[])": {
        "details": "read pending reward from specific pool",
        "params": {
          "tokenIds": "tokenId array of the pools"
        }
      },
      "pendingOwner()": {
        "details": "Return the address of the pending owner"
      },
      "performUpkeep(bytes)": {
        "details": "Upkeep perform of chainlink automation"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "seedExists(bytes32)": {
        "details": "check whether the seed is used on-chain",
        "params": {
          "seed": "random seed in bytes32"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setDropConf((uint8,uint40,uint40,uint40,uint40,uint16,uint16,uint16,uint40))": {
        "details": "set new airdrop config"
      },
      "setIncarnationLimit(uint256)": {
        "details": "set incarnation limit"
      },
      "setReferrerRewardFee(uint16,uint16,uint8)": {
        "details": "set percentage of referrer reward",
        "params": {
          "rewardType": "0: incarnate reward 1: engrave reward"
        }
      },
      "setVault(address)": {
        "details": "set vault",
        "params": {
          "vault_": "new vault address"
        }
      },
      "setVrfConf((bytes32,uint64,uint32,uint32,uint16))": {
        "details": "set new chainlink vrf v2 config"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "switchPool(uint256,uint256,uint256)": {
        "details": "switch stake amount from poolFrom to poolTo",
        "params": {
          "amount": "amount to switch",
          "fromTokenId": "tokenId of from pool",
          "toTokenId": "tokenId of to pool"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "toNextSeason()": {
        "details": "switch to next season, call by owner"
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address,bool)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership"
      },
      "updateSigners(address[],address[])": {
        "details": "update signers",
        "params": {
          "toAdd": "list of to be added signer",
          "toRemove": "list of to be removed signer"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdrawNativeToken(uint256)": {
        "details": "withdraw native token for reward distributionamount how much to withdraw"
      },
      "withdrawVault(address)": {
        "details": "withdraw token from vault",
        "params": {
          "to": "the address which owner withdraw token to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRerferrers(address)": {
        "notice": "A -> B -> C: B: level1 A: level2"
      },
      "setReferrerRewardFee(uint16,uint16,uint8)": {
        "notice": "mul 100 when set. eg: 8% -> 800 18%-> 1800"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 549,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 552,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3596,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8211,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 8213,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 8404,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 531,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 846,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4460,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12356,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_season",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 12359,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "rebornToken",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(RBT)10264"
      },
      {
        "astId": 12363,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "signers",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12367,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "rounds",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 12369,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "idx",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 12374,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "details",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_struct(LifeDetail)12970_storage)"
      },
      {
        "astId": 12379,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_seasonData",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_uint256,t_struct(SeasonData)13002_storage)"
      },
      {
        "astId": 12383,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "referrals",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 12386,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "rewardFees",
        "offset": 0,
        "slot": "259",
        "type": "t_struct(ReferrerRewardFees)8724_storage"
      },
      {
        "astId": 12389,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "vault",
        "offset": 0,
        "slot": "260",
        "type": "t_contract(RewardVault)12795"
      },
      {
        "astId": 12392,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_seeds",
        "offset": 0,
        "slot": "261",
        "type": "t_struct(BitMap)5346_storage"
      },
      {
        "astId": 12395,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_dropConf",
        "offset": 0,
        "slot": "262",
        "type": "t_struct(AirdropConf)8766_storage"
      },
      {
        "astId": 12397,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "burnPool",
        "offset": 0,
        "slot": "263",
        "type": "t_address"
      },
      {
        "astId": 12400,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_vrfConf",
        "offset": 0,
        "slot": "264",
        "type": "t_struct(VrfConf)8777_storage"
      },
      {
        "astId": 12405,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_vrfRequests",
        "offset": 0,
        "slot": "266",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)13019_storage)"
      },
      {
        "astId": 12408,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_pendingDrops",
        "offset": 0,
        "slot": "267",
        "type": "t_struct(Data)13359_storage"
      },
      {
        "astId": 12410,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_extraReward",
        "offset": 0,
        "slot": "270",
        "type": "t_uint256"
      },
      {
        "astId": 12412,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_g",
        "offset": 0,
        "slot": "271",
        "type": "t_bool"
      },
      {
        "astId": 12416,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_incarnateCounts",
        "offset": 0,
        "slot": "272",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12418,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_incarnateCountLimit",
        "offset": 0,
        "slot": "273",
        "type": "t_uint256"
      },
      {
        "astId": 12423,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_gap",
        "offset": 0,
        "slot": "274",
        "type": "t_array(t_uint256)30_storage"
      },
      {
        "astId": 2169,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_name",
        "offset": 0,
        "slot": "304",
        "type": "t_string_storage"
      },
      {
        "astId": 2171,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_symbol",
        "offset": 0,
        "slot": "305",
        "type": "t_string_storage"
      },
      {
        "astId": 2175,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_owners",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2179,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_balances",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2183,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2189,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3109,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "310",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 988,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_status",
        "offset": 0,
        "slot": "354",
        "type": "t_uint256"
      },
      {
        "astId": 1046,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "355",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 868,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_paused",
        "offset": 0,
        "slot": "404",
        "type": "t_bool"
      },
      {
        "astId": 973,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "405",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19092,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "454",
        "type": "t_address"
      },
      {
        "astId": 19096,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "455",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)30_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[30]",
        "numberOfBytes": "960"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(RBT)10264": {
        "encoding": "inplace",
        "label": "contract RBT",
        "numberOfBytes": "20"
      },
      "t_contract(RewardVault)12795": {
        "encoding": "inplace",
        "label": "contract RewardVault",
        "numberOfBytes": "20"
      },
      "t_enum(AirdropVrfType)13006": {
        "encoding": "inplace",
        "label": "enum IRebornDefination.AirdropVrfType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Portfolio)8747_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PortalLib.Portfolio))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Portfolio)8747_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Data)13359_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FastArray.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)13359_storage"
      },
      "t_mapping(t_uint256,t_struct(LifeDetail)12970_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRebornDefination.LifeDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(LifeDetail)12970_storage"
      },
      "t_mapping(t_uint256,t_struct(Node)13599_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RankingRedBlackTree.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)13599_storage"
      },
      "t_mapping(t_uint256,t_struct(Pool)8735_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PortalLib.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)8735_storage"
      },
      "t_mapping(t_uint256,t_struct(Portfolio)8747_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PortalLib.Portfolio)",
        "numberOfBytes": "32",
        "value": "t_struct(Portfolio)8747_storage"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)13019_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRebornDefination.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)13019_storage"
      },
      "t_mapping(t_uint256,t_struct(SeasonData)13002_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRebornDefination.SeasonData)",
        "numberOfBytes": "32",
        "value": "t_struct(SeasonData)13002_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AirdropConf)8766_storage": {
        "encoding": "inplace",
        "label": "struct PortalLib.AirdropConf",
        "members": [
          {
            "astId": 8749,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_dropOn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8751,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_rebornDropInterval",
            "offset": 1,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 8753,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_nativeDropInterval",
            "offset": 6,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 8755,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_rebornDropLastUpdate",
            "offset": 11,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 8757,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_nativeDropLastUpdate",
            "offset": 16,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 8759,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_nativeTopDropRatio",
            "offset": 21,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8761,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_nativeRaffleDropRatio",
            "offset": 23,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8763,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_rebornTopEthAmount",
            "offset": 25,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8765,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_rebornRaffleEthAmount",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(BitMap)5346_storage": {
        "encoding": "inplace",
        "label": "struct BitMapsUpgradeable.BitMap",
        "members": [
          {
            "astId": 5345,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)13359_storage": {
        "encoding": "inplace",
        "label": "struct FastArray.Data",
        "members": [
          {
            "astId": 13352,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "array",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 13356,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "indexMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 13358,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Data)16713_storage": {
        "encoding": "inplace",
        "label": "struct SingleRanking.Data",
        "members": [
          {
            "astId": 16705,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "tree",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Tree)13609_storage"
          },
          {
            "astId": 16710,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "keys",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Data)13359_storage)"
          },
          {
            "astId": 16712,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "length",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(LifeDetail)12970_storage": {
        "encoding": "inplace",
        "label": "struct IRebornDefination.LifeDetail",
        "members": [
          {
            "astId": 12953,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "seed",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 12955,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12957,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "age",
            "offset": 20,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 12959,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "round",
            "offset": 22,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 12961,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "nothing",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 12963,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "cost",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 12965,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "reward",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 12967,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "score",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12969,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "creatorName",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Node)13599_storage": {
        "encoding": "inplace",
        "label": "struct RankingRedBlackTree.Node",
        "members": [
          {
            "astId": 13586,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13588,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13590,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "count",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13592,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "parent",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13594,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "left",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13596,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "right",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13598,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "red",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Pool)8735_storage": {
        "encoding": "inplace",
        "label": "struct PortalLib.Pool",
        "members": [
          {
            "astId": 8726,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8728,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "accRebornPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8730,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "accNativePerShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8732,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "epoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8734,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Portfolio)8747_storage": {
        "encoding": "inplace",
        "label": "struct PortalLib.Portfolio",
        "members": [
          {
            "astId": 8737,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "accumulativeAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8739,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "rebornRewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8741,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "nativeRewardDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8744,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "pendingOwnerRebornReward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8746,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "pendingOwnerNativeReward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(ReferrerRewardFees)8724_storage": {
        "encoding": "inplace",
        "label": "struct PortalLib.ReferrerRewardFees",
        "members": [
          {
            "astId": 8715,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "incarnateRef1Fee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8717,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "incarnateRef2Fee",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8719,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "vaultRef1Fee",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8721,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "vaultRef2Fee",
            "offset": 6,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8723,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_slotPlaceholder",
            "offset": 8,
            "slot": "0",
            "type": "t_uint192"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RequestStatus)13019_storage": {
        "encoding": "inplace",
        "label": "struct IRebornDefination.RequestStatus",
        "members": [
          {
            "astId": 13008,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13010,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13012,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "executed",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13015,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "t",
            "offset": 3,
            "slot": "0",
            "type": "t_enum(AirdropVrfType)13006"
          },
          {
            "astId": 13018,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SeasonData)13002_storage": {
        "encoding": "inplace",
        "label": "struct IRebornDefination.SeasonData",
        "members": [
          {
            "astId": 12975,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "pools",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(Pool)8735_storage)"
          },
          {
            "astId": 12983,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "portfolios",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Portfolio)8747_storage))"
          },
          {
            "astId": 12986,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_tributeRank",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Data)16713_storage"
          },
          {
            "astId": 12989,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_scoreRank",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(Data)16713_storage"
          },
          {
            "astId": 12993,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_oldStakeAmounts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 12997,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_isTopHundredScore",
            "offset": 0,
            "slot": "13",
            "type": "t_struct(BitMap)5346_storage"
          },
          {
            "astId": 12999,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_minScore",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 13001,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_jackpot",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(Tree)13609_storage": {
        "encoding": "inplace",
        "label": "struct RankingRedBlackTree.Tree",
        "members": [
          {
            "astId": 13601,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13606,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "nodes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(Node)13599_storage)"
          },
          {
            "astId": 13608,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "counter",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VrfConf)8777_storage": {
        "encoding": "inplace",
        "label": "struct PortalLib.VrfConf",
        "members": [
          {
            "astId": 8768,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "keyHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8770,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "s_subscriptionId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 8772,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "callbackGasLimit",
            "offset": 8,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 8774,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "numWords",
            "offset": 12,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 8776,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "requestConfirmations",
            "offset": 16,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}