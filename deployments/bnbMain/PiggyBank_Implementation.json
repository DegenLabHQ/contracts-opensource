{
  "address": "0x7Ad21E540630aC3A14EBEdCe2b0734Bb9e9Fa05B",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveFromNonZeroToNonZeroAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BeaconImplementationIsNotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotPortal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotTokenOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractIsInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractIsNotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CountDownTimeLongNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecreasedAllowanceBelowZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelegateCallToNonContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20OperationDidNotSucceed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRoundInfo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSeason",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureSValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustBeCalledThroughActiveProxy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustBeCalledThroughDelegatecall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewAdminIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewBeaconIsNotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewImplementationIsNotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewImplementationIsNotUUPS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PausableNotPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PausablePaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermitDidNotSucceed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SeasonNotOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SeasonOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressOwnerSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroOwnerSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimedReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundTotalAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "seasonStartTime",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "currentIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct IPiggyBankDefination.RoundInfo",
          "name": "roundInfo",
          "type": "tuple"
        }
      ],
      "name": "InitializeSeason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "NewSeason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "SeasonStoped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "minTimeLong",
          "type": "uint64"
        }
      ],
      "name": "SetMinTimeLong",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "countDownTimeLong",
          "type": "uint32"
        }
      ],
      "name": "SetNewCountDownTimeLong",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "multiple",
          "type": "uint8"
        }
      ],
      "name": "SetNewMultiple",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "stopedHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifySigner",
          "type": "address"
        }
      ],
      "name": "SetStopedHash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "SignerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        }
      ],
      "name": "checkIsSeasonEnd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countDownTimeLong",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "income",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        }
      ],
      "name": "getRoundInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "currentIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            }
          ],
          "internalType": "struct IPiggyBankDefination.RoundInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        }
      ],
      "name": "getSeasonInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "stopedHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "verifySigner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "stoped",
              "type": "bool"
            }
          ],
          "internalType": "struct IPiggyBankDefination.SeasonInfo",
          "name": "seasonInfo",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isSeasonEnd",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundIndex",
          "type": "uint256"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPiggyBankDefination.UserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "portal_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "seasonStartTime",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "initRoundTarget",
          "type": "uint256"
        }
      ],
      "name": "initializeSeason",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTimeLong",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiple",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "newSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "countDownTimeLong_",
          "type": "uint32"
        }
      ],
      "name": "setCoundDownTimeLong",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "minTimeLong_",
          "type": "uint64"
        }
      ],
      "name": "setMinTimeLong",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "multiple_",
          "type": "uint8"
        }
      ],
      "name": "setMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "stopedHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "verifySigner",
          "type": "address"
        }
      ],
      "name": "setSeasonStopedHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        }
      ],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyStopHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x65f982839bc3d59f5c3784041c4ce42440ff4ef20553c1ace87414fd567f33c6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x93246E7F1618d7016A569a5F3E7B161DAb078d2d",
    "contractAddress": null,
    "transactionIndex": 78,
    "gasUsed": "1626065",
    "logsBloom": "0x
    "blockHash": "0x64586eb9252bcbc65f49e6c7e3c2c55de3969454264723aee9b8f5d4c2ce6553",
    "transactionHash": "0x65f982839bc3d59f5c3784041c4ce42440ff4ef20553c1ace87414fd567f33c6",
    "logs": [],
    "blockNumber": 27617059,
    "cumulativeGasUsed": "10891185",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "30be6ac1ac29577dcf3ad6f2c80ed7cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveFromNonZeroToNonZeroAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeaconImplementationIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotPortal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotTokenOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsNotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CountDownTimeLongNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegateCallToNonContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20OperationDidNotSucceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoundInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSeason\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureSValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeCalledThroughActiveProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeCalledThroughDelegatecall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewAdminIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewBeaconIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewImplementationIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewImplementationIsNotUUPS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausableNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausablePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDidNotSucceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SeasonNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SeasonOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressOwnerSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroOwnerSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundTotalAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"seasonStartTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"currentIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IPiggyBankDefination.RoundInfo\",\"name\":\"roundInfo\",\"type\":\"tuple\"}],\"name\":\"InitializeSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"NewSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"SeasonStoped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"minTimeLong\",\"type\":\"uint64\"}],\"name\":\"SetMinTimeLong\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"countDownTimeLong\",\"type\":\"uint32\"}],\"name\":\"SetNewCountDownTimeLong\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"multiple\",\"type\":\"uint8\"}],\"name\":\"SetNewMultiple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stopedHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifySigner\",\"type\":\"address\"}],\"name\":\"SetStopedHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"SignerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"checkIsSeasonEnd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countDownTimeLong\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"currentIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"}],\"internalType\":\"struct IPiggyBankDefination.RoundInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"getSeasonInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stopedHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifySigner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"stoped\",\"type\":\"bool\"}],\"internalType\":\"struct IPiggyBankDefination.SeasonInfo\",\"name\":\"seasonInfo\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isSeasonEnd\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPiggyBankDefination.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"portal_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"seasonStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"initRoundTarget\",\"type\":\"uint256\"}],\"name\":\"initializeSeason\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTimeLong\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiple\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"newSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"countDownTimeLong_\",\"type\":\"uint32\"}],\"name\":\"setCoundDownTimeLong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"minTimeLong_\",\"type\":\"uint64\"}],\"name\":\"setMinTimeLong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"multiple_\",\"type\":\"uint8\"}],\"name\":\"setMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stopedHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifySigner\",\"type\":\"address\"}],\"name\":\"setSeasonStopedHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyStopHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"pending owner call this function to claim ownership\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Return the address of the pending owner\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address,bool)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PiggyBank.sol\":\"PiggyBank\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363832333036303832393434\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/PiggyBank.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {UUPSUpgradeable} from \\\"./oz/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ECDSAUpgradeable} from \\\"./oz/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport {SafeOwnableUpgradeable} from \\\"./utils/SafeOwnableUpgradeable.sol\\\";\\nimport {CommonError} from \\\"./lib/CommonError.sol\\\";\\nimport {IPiggyBank} from \\\"./interfaces/IPiggyBank.sol\\\";\\n\\ncontract PiggyBank is SafeOwnableUpgradeable, UUPSUpgradeable, IPiggyBank {\\n    uint256 public constant PERCENTAGE_BASE = 10000;\\n    address public portal;\\n\\n    // nextRoundTarget = preRoundTarget * multiple / 100\\n    uint8 public multiple;\\n\\n    // min time long from season start to end\\n    uint64 public minTimeLong;\\n\\n    // Mapping from season to seasonInfo\\n    mapping(uint256 => SeasonInfo) internal seasons;\\n\\n    // Mapping from round index to RoundInfo\\n    mapping(uint256 => RoundInfo) internal rounds;\\n\\n    // mapping(account => mappiing(season=> mapping(roundIndex => userInfo)))\\n    mapping(address => mapping(uint256 => mapping(uint256 => UserInfo)))\\n        internal users;\\n\\n    uint32 public countDownTimeLong;\\n\\n    uint256[43] internal _gap;\\n\\n    function initialize(address owner_, address portal_) public initializer {\\n        if (portal_ == address(0) || owner_ == address(0)) {\\n            revert CommonError.ZeroAddressSet();\\n        }\\n\\n        __Ownable_init(owner_);\\n\\n        portal = portal_;\\n    }\\n\\n    function initializeSeason(\\n        uint256 season,\\n        uint32 seasonStartTime,\\n        uint256 initRoundTarget\\n    ) external payable onlyPortal {\\n        RoundInfo memory roundInfo = RoundInfo({\\n            totalAmount: 0,\\n            target: initRoundTarget,\\n            currentIndex: 0,\\n            startTime: seasonStartTime\\n        });\\n\\n        seasons[season].totalAmount = msg.value;\\n        seasons[season].startTime = seasonStartTime;\\n        rounds[season] = roundInfo;\\n\\n        emit InitializeSeason(season, seasonStartTime, roundInfo);\\n    }\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n\\n    function deposit(\\n        uint256 season,\\n        address account,\\n        uint256 income\\n    ) external payable override onlyPortal {\\n        if (countDownTimeLong == 0) {\\n            revert CountDownTimeLongNotSet();\\n        }\\n\\n        bool isEnd = checkIsSeasonEnd(season);\\n        if (isEnd) {\\n            if (!seasons[season].stoped) {\\n                seasons[season].stoped = true;\\n            }\\n            revert SeasonOver();\\n        }\\n\\n        seasons[season].totalAmount += msg.value;\\n\\n        // update round info\\n        RoundInfo storage roundInfo = rounds[season];\\n        if (roundInfo.totalAmount + income > roundInfo.target) {\\n            uint256 newRoundInitAmount = income -\\n                (roundInfo.target - roundInfo.totalAmount);\\n\\n            uint256 remainingAmount = roundInfo.target - roundInfo.totalAmount;\\n            roundInfo.totalAmount = roundInfo.target;\\n            users[account][season][roundInfo.currentIndex]\\n                .amount += remainingAmount;\\n\\n            emit Deposit(\\n                season,\\n                account,\\n                roundInfo.currentIndex,\\n                remainingAmount,\\n                roundInfo.totalAmount\\n            );\\n\\n            _toNextRound(account, season, newRoundInitAmount);\\n        } else {\\n            roundInfo.totalAmount += income;\\n            users[account][season][roundInfo.currentIndex].amount += income;\\n\\n            emit Deposit(\\n                season,\\n                account,\\n                roundInfo.currentIndex,\\n                income,\\n                roundInfo.totalAmount\\n            );\\n        }\\n    }\\n\\n    function newSeason(uint256 season, uint256 startTime) external onlyPortal {\\n        if (seasons[season].startTime == 0) {\\n            seasons[season].startTime = uint32(startTime);\\n        }\\n\\n        emit NewSeason(season, startTime);\\n    }\\n\\n    function stop(uint256 season) external override onlyPortal {\\n        if (seasons[season].startTime == 0) {\\n            revert InvalidSeason();\\n        }\\n        seasons[season].stoped = true;\\n\\n        emit SeasonStoped(season, block.timestamp);\\n    }\\n\\n    function claimReward(uint256 season) external {\\n        if (!checkIsSeasonEnd(season)) {\\n            revert SeasonNotOver();\\n        }\\n\\n        SeasonInfo memory seasonInfo = seasons[season];\\n        RoundInfo memory roundInfo = rounds[season];\\n        UserInfo storage userInfo = users[msg.sender][season][\\n            roundInfo.currentIndex\\n        ];\\n\\n        if (userInfo.claimedAmount > 0) {\\n            revert AlreadyClaimed();\\n        }\\n\\n        uint256 userReward = (seasonInfo.totalAmount * userInfo.amount) /\\n            roundInfo.totalAmount;\\n\\n        userInfo.claimedAmount = userReward;\\n\\n        payable(msg.sender).transfer(userReward);\\n\\n        emit ClaimedReward(season, msg.sender, userReward);\\n    }\\n\\n    function setMultiple(uint8 multiple_) external override onlyOwner {\\n        multiple = multiple_;\\n\\n        emit SetNewMultiple(multiple_);\\n    }\\n\\n    function setMinTimeLong(uint64 minTimeLong_) external override onlyOwner {\\n        minTimeLong = minTimeLong_;\\n\\n        emit SetMinTimeLong(minTimeLong_);\\n    }\\n\\n    function setCoundDownTimeLong(\\n        uint32 countDownTimeLong_\\n    ) external onlyOwner {\\n        countDownTimeLong = countDownTimeLong_;\\n\\n        emit SetNewCountDownTimeLong(countDownTimeLong_);\\n    }\\n\\n    function setSeasonStopedHash(\\n        uint256 season,\\n        bytes32 stopedHash,\\n        address verifySigner\\n    ) external override onlyOwner {\\n        if (seasons[season].startTime == 0) {\\n            revert InvalidSeason();\\n        }\\n        if (verifySigner == address(0)) {\\n            revert CommonError.ZeroAddressSet();\\n        }\\n\\n        seasons[season].stopedHash = stopedHash;\\n        seasons[season].verifySigner = verifySigner;\\n\\n        emit SetStopedHash(season, stopedHash, verifySigner);\\n    }\\n\\n    function _toNextRound(\\n        address account,\\n        uint256 season,\\n        uint256 nextRoundInitAmount\\n    ) internal {\\n        // update rounds\\n        RoundInfo storage roundInfo = rounds[season];\\n        roundInfo.currentIndex++;\\n        roundInfo.startTime = uint32(block.timestamp);\\n        roundInfo.target += (roundInfo.target * multiple) / PERCENTAGE_BASE;\\n\\n        if (nextRoundInitAmount > roundInfo.target) {\\n            roundInfo.totalAmount = roundInfo.target;\\n            // update userInfo\\n            users[account][season][roundInfo.currentIndex].amount = roundInfo\\n                .target;\\n\\n            emit Deposit(\\n                season,\\n                account,\\n                roundInfo.currentIndex,\\n                roundInfo.target,\\n                roundInfo.totalAmount\\n            );\\n\\n            _toNextRound(\\n                account,\\n                season,\\n                nextRoundInitAmount - roundInfo.target\\n            );\\n        } else {\\n            roundInfo.totalAmount = nextRoundInitAmount;\\n\\n            users[account][season][roundInfo.currentIndex]\\n                .amount = nextRoundInitAmount;\\n\\n            emit Deposit(\\n                season,\\n                account,\\n                roundInfo.currentIndex,\\n                nextRoundInitAmount,\\n                nextRoundInitAmount\\n            );\\n        }\\n    }\\n\\n    function checkIsSeasonEnd(uint256 season) public view returns (bool) {\\n        bool isEnd = false;\\n\\n        bool isAutoEnd = ((block.timestamp >\\n            seasons[season].startTime + minTimeLong) &&\\n            (rounds[season].totalAmount < rounds[season].target) &&\\n            (block.timestamp - rounds[season].startTime) >= countDownTimeLong);\\n\\n        if (isAutoEnd || seasons[season].stoped) {\\n            isEnd = true;\\n        }\\n        return isEnd;\\n    }\\n\\n    function getSeasonInfo(\\n        uint256 season\\n    ) external view returns (SeasonInfo memory seasonInfo, bool isSeasonEnd) {\\n        seasonInfo = seasons[season];\\n        isSeasonEnd = checkIsSeasonEnd(season);\\n    }\\n\\n    function getRoundInfo(\\n        uint256 season\\n    ) external view returns (RoundInfo memory) {\\n        return rounds[season];\\n    }\\n\\n    function getUserInfo(\\n        address account,\\n        uint256 season,\\n        uint256 roundIndex\\n    ) external view returns (UserInfo memory) {\\n        return users[account][season][roundIndex];\\n    }\\n\\n    function verifyStopHash(\\n        uint256 season,\\n        bytes calldata signature\\n    ) public view returns (bool) {\\n        bytes32 messageHash = ECDSAUpgradeable.toEthSignedMessageHash(\\n            seasons[season].stopedHash\\n        );\\n        address signer = ECDSAUpgradeable.recover(messageHash, signature);\\n        return signer == seasons[season].verifySigner;\\n    }\\n\\n    modifier onlyPortal() {\\n        if (msg.sender != portal) {\\n            revert CallerNotPortal();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd87aecd387eb2498d20b2d5a01bd6392789901133ad76123e2f5e0f48baace19\",\"license\":\"GPL-3.0\"},\"src/interfaces/IPiggyBank.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IPiggyBankDefination {\\n    struct SeasonInfo {\\n        uint256 totalAmount;\\n        bytes32 stopedHash;\\n        address verifySigner; // Used for verification the next time stop is called\\n        uint32 startTime;\\n        bool stoped;\\n    }\\n\\n    struct RoundInfo {\\n        uint256 totalAmount;\\n        uint256 target;\\n        uint32 currentIndex;\\n        uint32 startTime;\\n    }\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 claimedAmount;\\n    }\\n\\n    event InitializeSeason(\\n        uint256 season,\\n        uint32 seasonStartTime,\\n        RoundInfo roundInfo\\n    );\\n    event SetNewMultiple(uint8 multiple);\\n    event SetMinTimeLong(uint64 minTimeLong);\\n    event NewSeason(uint256 season, uint256 startTime);\\n    event Deposit(\\n        uint256 season,\\n        address account,\\n        uint256 roundIndex,\\n        uint256 amount,\\n        uint256 roundTotalAmount\\n    );\\n    event SeasonStoped(uint256 season, uint256 stopTime);\\n    event SignerUpdate(address indexed signer, bool valid);\\n    event SetStopedHash(\\n        uint256 season,\\n        bytes32 stopedHash,\\n        address verifySigner\\n    );\\n    event ClaimedReward(uint256 season, address account, uint256 amount);\\n    event SetNewCountDownTimeLong(uint32 countDownTimeLong);\\n\\n    error CallerNotPortal();\\n    error InvalidRoundInfo();\\n    error SeasonOver();\\n    error InvalidSeason();\\n    error AlreadyClaimed();\\n    error SeasonNotOver();\\n    error CountDownTimeLongNotSet();\\n}\\n\\ninterface IPiggyBank is IPiggyBankDefination {\\n    function deposit(\\n        uint256 season,\\n        address account,\\n        uint256 income\\n    ) external payable;\\n\\n    function setMultiple(uint8 multiple_) external;\\n\\n    function setMinTimeLong(uint64 minTimeLong_) external;\\n\\n    function checkIsSeasonEnd(uint256 season) external view returns (bool);\\n\\n    function newSeason(uint256 season, uint256 startTime) external;\\n\\n    function setSeasonStopedHash(\\n        uint256 season,\\n        bytes32 stopedHash,\\n        address verifySigner\\n    ) external;\\n\\n    function stop(uint256 season) external;\\n}\\n\",\"keccak256\":\"0xe275be61ff4c6ba8d6da6383800d84255dd320462ac43919c91ea50f9f63d1f9\",\"license\":\"GPL-3.0\"},\"src/lib/CommonError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nlibrary CommonError {\\n    error ZeroAddressSet();\\n    error InvalidParams();\\n    /// @dev revert when to caller is not signer\\n    error NotSigner();\\n    error SignatureExpired();\\n}\\n\",\"keccak256\":\"0x810b70d395173799f0357fb37a6dff60225ba8b25f07ed79f9b6419e03e284bd\",\"license\":\"GPL-3.0\"},\"src/oz/contracts-upgradeable/ICustomError.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICustomError {\\n    /**********************************\\n     * Generic errors\\n     **********************************/\\n    error ZeroOwnerSet();\\n\\n    /**********************************\\n     * Initializable\\n     **********************************/\\n    error ContractAlreadyInitialized();\\n    error ContractIsNotInitializing();\\n    error ContractIsInitializing();\\n\\n    /**********************************\\n     * ReentrancyGuardUpgradeable\\n     **********************************/\\n    error ReentrantCall();\\n\\n    /**********************************\\n     * PausableUpgradeable\\n     **********************************/\\n    error PausablePaused();\\n    error PausableNotPaused();\\n\\n    /**********************************\\n     * UUPSUpgradeable\\n     **********************************/\\n    error MustBeCalledThroughDelegatecall();\\n    error MustBeCalledThroughActiveProxy();\\n\\n    /**********************************\\n     * ERC1967UpgradeUpgradeable\\n     **********************************/\\n    error NewImplementationIsNotContract();\\n    error UnsupportedProxiableUUID();\\n    error NewImplementationIsNotUUPS();\\n    error NewAdminIsZeroAddress();\\n    error NewBeaconIsNotContract();\\n    error BeaconImplementationIsNotContract();\\n    error DelegateCallToNonContract();\\n\\n    /**********************************\\n     * ERC721\\n     **********************************/\\n    error InvalidTokenID();\\n    error ApproveToCurrentOwner();\\n    error CallerNotTokenOwnerOrApproved();\\n    error TransferToNonERC721ReceiverImplementer();\\n    error MintToZeroAddress();\\n    error TokenAlreadyMinted();\\n    error TransferFromIncorrectOwner();\\n    error TransferToZeroAddress();\\n    error ApproveToCaller();\\n\\n    /**********************************\\n     * ERC20Upgradeable\\n     **********************************/\\n    error DecreasedAllowanceBelowZero();\\n    error TransferFromZeroAddress();\\n    error TransferAmountExceedsBalance();\\n    error BurnFromZeroAddress();\\n    error BurnAmountExceedsBalance();\\n    error ApproveFromZeroAddress();\\n    error ApproveToZeroAddress();\\n    error InsufficientAllowance();\\n\\n    /**********************************\\n     * SafeERC20Upgradeable\\n     **********************************/\\n    error ApproveFromNonZeroToNonZeroAllowance();\\n    error PermitDidNotSucceed();\\n    error ERC20OperationDidNotSucceed();\\n}\\n\",\"keccak256\":\"0x7154b0f6b72eaf1e1fa957d0bd1feca367f1dfc3bacab0d3daa0fc11a16f2260\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {}\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {}\\n\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT =\\n        0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return\\n            StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (!AddressUpgradeable.isContract(newImplementation)) {\\n            revert NewImplementationIsNotContract();\\n        }\\n        StorageSlotUpgradeable\\n            .getAddressSlot(_IMPLEMENTATION_SLOT)\\n            .value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try\\n                IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID()\\n            returns (bytes32 slot) {\\n                // require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n                if (slot != _IMPLEMENTATION_SLOT) {\\n                    revert UnsupportedProxiableUUID();\\n                }\\n            } catch {\\n                revert NewImplementationIsNotUUPS();\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT =\\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert NewAdminIsZeroAddress();\\n        }\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (!AddressUpgradeable.isContract(newBeacon)) {\\n            revert NewBeaconIsNotContract();\\n        }\\n\\n        if (\\n            !AddressUpgradeable.isContract(\\n                IBeaconUpgradeable(newBeacon).implementation()\\n            )\\n        ) {\\n            revert BeaconImplementationIsNotContract();\\n        }\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(\\n                IBeaconUpgradeable(newBeacon).implementation(),\\n                data\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) private returns (bytes memory) {\\n        if (!AddressUpgradeable.isContract(target)) {\\n            revert DelegateCallToNonContract();\\n        }\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return\\n            AddressUpgradeable.verifyCallResult(\\n                success,\\n                returndata,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x341a0b22f62691d6ca411ec3b1dea6a8309c8323055d377e8944f8d800850848\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../ICustomError.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable is ICustomError {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!AddressUpgradeable.isContract(address(this)) &&\\n                    _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        if (_initializing || _initialized >= version) {\\n            revert ContractAlreadyInitialized();\\n        }\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        if (!_initializing) {\\n            revert ContractIsNotInitializing();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        if (_initializing) {\\n            revert ContractIsInitializing();\\n        }\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x4e019cc92a726afc75016b586b75ef237a64307448afe94114bf67845baf0007\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is\\n    Initializable,\\n    IERC1822ProxiableUpgradeable,\\n    ERC1967UpgradeUpgradeable\\n{\\n    function __UUPSUpgradeable_init() internal onlyInitializing {}\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {}\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        if (address(this) == __self) {\\n            revert MustBeCalledThroughDelegatecall();\\n        }\\n        if (_getImplementation() != __self) {\\n            revert MustBeCalledThroughActiveProxy();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        if (address(this) != __self) {\\n            revert MustBeCalledThroughDelegatecall();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID()\\n        external\\n        view\\n        virtual\\n        override\\n        notDelegated\\n        returns (bytes32)\\n    {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data\\n    ) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xafa6e61b5f13e52763f84cde40ae80307e2a9c42727a46bb1c67324df6363ed9\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    error InsufficientBalance();\\n    error UnableToSendValue();\\n    error CallToNoContract();\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert InsufficientBalance();\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert UnableToSendValue();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                0,\\n                \\\"Address: low-level call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert InsufficientBalance();\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return\\n            verifyCallResultFromTarget(\\n                target,\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return\\n            verifyCallResultFromTarget(\\n                target,\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                if (!isContract(target)) {\\n                    revert CallToNoContract();\\n                }\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdbe978844e2c83577cb26e94ece37446ef615db209022838c13ee452c63efb0c\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n    error InvalidSignature();\\n    error InvalidSignatureLength();\\n    error InvalidSignatureSValue();\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert InvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert InvalidSignatureLength();\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert InvalidSignatureSValue();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs &\\n            bytes32(\\n                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            );\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(\\n        bytes32 hash\\n    ) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(\\n        bytes memory s\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n                    StringsUpgradeable.toString(s.length),\\n                    s\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(\\n        bytes32 domainSeparator,\\n        bytes32 structHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x642a537e21d1e06eb879d03b23d5fe50b76a198071426972e62d71b0590060d5\",\"license\":\"MIT\"},\"src/oz/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"src/utils/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Thanks Yos Riady\\n// Refer to https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol\\n// https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/access/OwnableUpgradeable.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oz/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../oz/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ncontract SafeOwnableUpgradeable is Initializable, ContextUpgradeable {\\n    error CallerNotOwner();\\n    error ZeroAddressOwnerSet();\\n    error CallerNotPendingOwner();\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT =\\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address owner_) internal onlyInitializing {\\n        __Ownable_init_unchained(owner_);\\n    }\\n\\n    function __Ownable_init_unchained(\\n        address owner_\\n    ) internal onlyInitializing {\\n        _transferOwnership(owner_);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Return the address of the pending owner\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    function _checkOwner() internal view {\\n        if (owner() != _msgSender()) {\\n            revert CallerNotOwner();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     * Note If direct is false, it will set an pending owner and the OwnerShipTransferring\\n     * only happens when the pending owner claim the ownership\\n     */\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct\\n    ) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert ZeroAddressOwnerSet();\\n        }\\n        if (direct) {\\n            _transferOwnership(newOwner);\\n        } else {\\n            _transferPendingOwnership(newOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev pending owner call this function to claim ownership\\n     */\\n    function claimOwnership() public {\\n        if (msg.sender != _pendingOwner) {\\n            revert CallerNotPendingOwner();\\n        }\\n\\n        _claimOwnership();\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        // compatible with hardhat-deploy, maybe removed later\\n        assembly {\\n            sstore(_ADMIN_SLOT, newOwner)\\n        }\\n\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev set the pending owner address\\n     * Internal function without access restriction.\\n     */\\n    function _transferPendingOwnership(address newOwner) internal virtual {\\n        _pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _claimOwnership() internal virtual {\\n        address oldOwner = _owner;\\n        emit OwnershipTransferred(oldOwner, _pendingOwner);\\n\\n        _owner = _pendingOwner;\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x94cf52fabd12a8209141000ceb1492d15c2b58591a7706498e3a8791e82e87ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100315730608052611c6190816100378239608051818181610bfc01528181610c9c01526111ca0152f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081631bae2b6c146113be57508063305607a3146113955780633659cfe6146111a1578063437a8ae61461117c578063485cc95514610fef5780634b491d4914610f115780634e71e0c814610ea55780634f1ef28614610c4e57806352d1902d14610be75780636170690814610b655780636299f8cf14610abf5780636425666b14610a96578063715018a614610a3957806387c1394314610a1c57806388c3ffb01461099c5780638bdea051146109775780638da5cb5b1461094e57806398b46eaf146108de578063a6645a92146108b1578063a74b434b146107da578063a7e45114146106dc578063ae169a501461054b578063b242e534146104d1578063bc157ac114610317578063e30c3978146102ee578063e89a886614610245578063f4d508ec146101c05763ff16dcf71461015757600080fd5b346101bc5760203660031901126101bc57359063ffffffff82168092036101bc577faba92a609cdbe77fef99a809dfea9ec223f92370ccc2a5c1db15dc0973e99385916020916101a5611afc565b8163ffffffff1960cd54161760cd5551908152a180f35b8280fd5b82843461024257606036600319011261024257816101dc61148c565b918151926101e984611509565b81845260209384018290526001600160a01b0316815260cc8352818120602435825283528181206044358252835220825190919061022681611509565b8160018454948584520154910190815283519283525190820152f35b80fd5b509190346102ea57806003193601126102ea5760c954833590602435906001600160a01b031633036102da57839450817fb11bddedb817d627b042c6a3047fc8475045ad29f830bcb1102385e67ab5f607945260ca60205263ffffffff806002858820015460a01c16156102c3575b5082519182526020820152a180f35b6102d49082166002858820016115e0565b386102b4565b82516325ba3c7960e01b81528590fd5b5080fd5b5050346102ea57816003193601126102ea5760345490516001600160a01b039091168152602090f35b5060603660031901126101bc5780359161032f6114a7565b916044359160018060a01b03918260c9541633036104c35763ffffffff908160cd5416156104b55761036087611836565b61049f5750858752602060ca815282882061037c348254611626565b905586885260cb81528288209384546103958782611626565b9060018701918254106000146104355750936104329896936103d998969361042a936103e66103df600080516020611bcc83398151915299549888549d8e8b611699565b90611699565b9b88611699565b96865588168c5260cc8152828c20898d528152828c2060028601918d84845416905252828c20610417878254611626565b9055541692549051938493878986611663565b0390a16116ce565b80f35b610499969391509161045988600080516020611bcc8339815191529b999694611626565b845588168a5260cc8152848a20878b528152848a206002840191838354168c5252848a20610488858254611626565b905554169054925195869586611663565b0390a180f35b86885260ca6020528251639c0f823160e01b8152fd5b82516317806fc960e11b8152fd5b90516325ba3c7960e01b8152fd5b50346101bc57816003193601126101bc576104ea61148c565b9060243590811515820361054757610500611afc565b6001600160a01b03831693841561053a57505015610522576104329150611b22565b50603480546001600160a01b03191691909117905580f35b51633aafecb360e21b8152fd5b8480fd5b50346101bc57602090816003193601126106d85780359161056b83611836565b156106c95782855260ca8152838520916002855193610589856114bd565b80548552600181015484860152015460018060a01b0381168685015260ff63ffffffff91828160a01c16606087015260c01c161515608085015284875260cb83528587209060028751926105dc846114ee565b8054845260018101548685015201549080888401928181168452861c16606084015233895260cc8552878920878a52855287892091511688528352858720600181019485546106b957519054610631916116a6565b90519182156106a6575004809255848083801561069c575b8280929181923390f11561068f579083606093927fb3aa8b63132d4c8c050f3c58896489ee2a949eaf514406ec8e56b2da530551c095519384523390840152820152a180f35b50505051903d90823e3d90fd5b6108fc9150610649565b634e487b7160e01b885260129052602487fd5b8751630c8d9eab60e31b81528490fd5b508251632ef30f6760e01b8152fd5b8380fd5b509060603660031901126101bc5781359163ffffffff602435818116928382036107d65760c9546001600160a01b031633036107c85750928085936107b288857fe8e66eabd4aa2cabec66a281b78e951231358e5c4b4b79c9f2c79b673320afd0996107c497600260c09b8851998a96610755886114ee565b808852610789602089019360443585526060848b019a848c5201978c8952835260ca602052348484205585848420016115e0565b60cb60205220908a5182555160018201550193511663ffffffff19845416178355511690611603565b815194855260208501528301906115b4565ba180f35b84516325ba3c7960e01b8152fd5b8680fd5b50346101bc5760603660031901126101bc578035916044356001600160a01b03811692602435918490036108ad57610810611afc565b84865260ca60205263ffffffff6002848820015460a01c161561089f578315610891575083855260ca602090815282862060010182905582862060020180546001600160a01b0319168517905582519485528401528201527fe4eea18f24578792f606d968efb4f4ec1ea13d58d50c82006515adadb0a276f290606090a180f35b8251630ae8f22360e21b8152fd5b825163d40820c360e01b8152fd5b8580fd5b5050346102ea57816003193601126102ea5760c954905160a89190911c6001600160401b03168152602090f35b50346101bc5760203660031901126101bc573560ff81168082036106d8577fb173a1edd1427ad576f900f4964fa68e44b92cfa0e1800390756129ebd97dd4892602092610929611afc565b60c9805460ff60a01b191660a09290921b60ff60a01b1691909117905551908152a180f35b5050346102ea57816003193601126102ea5760335490516001600160a01b039091168152602090f35b5050346102ea57816003193601126102ea5760209063ffffffff60cd54169051908152f35b50346101bc5760203660031901126101bc578183610a1a92608095606084516109c4816114ee565b8281528260208201528286820152015235815260cb602052209160028151936109ec856114ee565b8054855260018101546020860152015463ffffffff908181168386015260201c1660608401525180926115b4565bf35b5050346102ea57816003193601126102ea57602090516127108152f35b8334610242578060031936011261024257610a52611afc565b600080516020611b8c833981519152819055603380546001600160a01b0319811690915581906001600160a01b0316600080516020611bec8339815191528280a380f35b5050346102ea57816003193601126102ea5760c95490516001600160a01b039091168152602090f35b50346101bc5760203660031901126101bc5760c954813591906001600160a01b03163303610b575781845260ca60205263ffffffff6002848620015460a01c161561089f575080835260ca6020908152828420600201805460ff60c01b1916600160c01b179055825191825242908201527fe2d7e99c747f0e0432e852688145c87e00818a413f45fad18191d3d04f4d63299190a180f35b82516325ba3c7960e01b8152fd5b50346101bc5760203660031901126101bc57356001600160401b0381168082036106d8577fa75f2406e0931fd8259df0d754624886d64079585e253256af11d7e2d34d163392602092610bb6611afc565b60c98054600160a81b600160e81b03191660a89290921b600160a81b600160e81b031691909117905551908152a180f35b509134610242578060031936011261024257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610c415760209051600080516020611bac8339815191528152f35b5163e437988b60e01b8152fd5b50816003193601126101bc57610c6261148c565b916024356001600160401b038111610547573660238201121561054757610c92903690602481860135910161157d565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690308214610e9557600080516020611bac833981519152918183541603610e8557610ce6611afc565b600080516020611b6c8339815191525460ff1615610d0c5750505050506104329061190d565b85919294969395168551926352d1902d60e01b845260209384818a81865afa869181610e56575b50610d4857875163fec758a960e01b81528990fd5b979293959796949603610e4757610d5e8361190d565b835190600080516020611c0c8339815191528780a2865115801590610e3f575b610d8d575b5050505050905080f35b823b15610e33575050928085610e1495858398519201905af43d15610e2057660819985a5b195960ca1b3d92610dc284611562565b93610dcf8251958661153f565b84523d878686013e5b7f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c815195610e0587611524565b60278752860152840152611954565b50803880808080610d83565b660819985a5b195960ca1b606092610dd8565b63a6c49bc960e01b8152fd5b506001610d7e565b5082516322b9fa5360e21b8152fd5b9091508581813d8311610e7e575b610e6e818361153f565b810103126107d657519038610d33565b503d610e64565b50505051631008d79560e01b8152fd5b5050505163e437988b60e01b8152fd5b5090346101bc57826003193601126101bc576034546001600160a01b03929091838316919033839003610f0457505080603354938416600080516020611bec8339815191528680a36001600160a01b0319928316176033551660345580f35b516305e05b4b60e31b8152fd5b50346101bc57816003193601126101bc578035906001600160401b0390602435908282116108ad57366023830112156108ad57810135918211610547573660248383010111610547579382610fc68593610fc0602098610fce97865260ca8a526001878720015487518b8101917b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8352603c820152603c8152610fb281611524565b51902092602436920161157d565b90611a45565b9490946119cf565b815260ca8552206002015491516001600160a01b0392831691909216148152f35b50346101bc57816003193601126101bc5761100861148c565b6110106114a7565b9084549260ff8460081c16159384809561116f575b8015611158575b156110fe5760ff1981166001178755846110ed575b506001600160a01b039283169283159081156110e2575b506110d45760ff865460081c16156110c6575061107490611b22565b60c980546001600160a01b031916919091179055611090575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b84516369be8d9360e11b8152fd5b8451630ae8f22360e21b8152fd5b905082161538611058565b61ffff191661010117865538611041565b855162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561102c5750600160ff82161461102c565b50600160ff821610611025565b5050346102ea57816003193601126102ea5760209060ff60c95460a01c169051908152f35b509190346102ea57602090816003193601126101bc576111bf61148c565b916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811630811461138557600080516020611bac83398151915290828254160361137557611213611afc565b8351838101929091906001600160401b0384118385101761136257838652878352600080516020611b6c8339815191525460ff161561125d5750505050505061043291925061190d565b86979597169087516352d1902d60e01b815285818b81865afa87918161132f575b5061129357885163fec758a960e01b81528a90fd5b98929394969897959703611320576112aa8861190d565b845190600080516020611c0c8339815191528880a2825115801590611319575b6112da575b505050505050905080f35b873b15610e33575050938095819261130c9651915af43d15610e2057660819985a5b195960ca1b3d92610dc284611562565b50803880808080806112cf565b50866112ca565b5083516322b9fa5360e21b8152fd5b9091508681813d831161135b575b611347818361153f565b810103126113575751903861127e565b8780fd5b503d61133d565b634e487b7160e01b885260418952602488fd5b8351631008d79560e01b81528790fd5b835163e437988b60e01b81528790fd5b50913461024257602036600319011261024257506113b560209235611836565b90519015158152f35b92919050346106d85760203660031901126106d8578360c0946080849335956113e6816114bd565b8281528260208201528285820152826060820152015283815260ca6020522090805192611412846114bd565b825484526002600184015493602086019485520154918085019060018060a01b038085168352606087019261146163ffffffff95868860a01c16865260ff60808b01988c1c1615158852611836565b96835198518952516020890152511690860152511660608401525115156080830152151560a0820152f35b600435906001600160a01b03821682036114a257565b600080fd5b602435906001600160a01b03821682036114a257565b60a081019081106001600160401b038211176114d857604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b038211176114d857604052565b604081019081106001600160401b038211176114d857604052565b606081019081106001600160401b038211176114d857604052565b601f909101601f19168101906001600160401b038211908210176114d857604052565b6001600160401b0381116114d857601f01601f191660200190565b92919261158982611562565b91611597604051938461153f565b8294818452818301116114a2578281602093846000960137010152565b60609080518352602081015160208401528163ffffffff91826040820151166040860152015116910152565b805463ffffffff60a01b191660a09290921b63ffffffff60a01b16919091179055565b805463ffffffff60201b191660209290921b63ffffffff60201b16919091179055565b9190820180921161163357565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0316600090815260cc6020526040902090565b9081526001600160a01b03909116602082015263ffffffff90911660408201526060810191909152608081019190915260a00190565b9190820391821161163357565b8181029291811591840414171561163357565b63ffffffff8091169081146116335760010190565b906116e38160005260cb602052604060002090565b9260028401906117186117026116fd845463ffffffff1690565b6116b9565b835463ffffffff191663ffffffff909116178355565b61172863ffffffff421683611603565b60018501611764815461175e61175661175061174a60c95460ff9060a01c1690565b60ff1690565b836116a6565b612710900490565b90611626565b8082558211156117f95790600080516020611bcc8339815191526117f7966117d76117f19594549485809355826117cc6117b08a6117a18d611649565b90600052602052604060002090565b835463ffffffff1663ffffffff16600052602052604060002090565b555463ffffffff1690565b6117e9826040519384938b8b86611663565b0390a1611699565b916116ce565b565b50806118256118319382600080516020611bcc8339815191529855826117cc6117b0886117a18b611649565b60405195869586611663565b0390a1565b60009080825260ca60205263ffffffff9081600260408520015460a01c1660018060401b03908160c95460a81c16018181116118f95716421191826118dd575b826118ae575b508115611892575b5061188c5790565b50600190565b82525060ca602052604081206002015460c01c60ff1638611884565b90809250835260cb6020526118cf81600260408620015460201c1642611699565b9060cd54161115903861187c565b81845260cb602052604084208054600190910154119250611876565b634e487b7160e01b85526011600452602485fd5b803b1561194257600080516020611bac83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405163145708c760e31b8152600490fd5b90919015611960575090565b8151156119705750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106119b6575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350611993565b6005811015611a2f57806119e05750565b600181036119fa57604051638baa579f60e01b8152600490fd5b60028103611a1457604051634be6321b60e01b8152600490fd5b600314611a1d57565b60405163185f3d1d60e21b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b906041815114600014611a7357611a6f916020820151906060604084015193015160001a90611a7d565b9091565b5050600090600290565b9291906fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311611af05791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15611ae35781516001600160a01b0381161561188c579190565b50604051903d90823e3d90fd5b50505050600090600390565b6033546001600160a01b03163303611b1057565b604051632e6c18c960e11b8152600490fd5b600080516020611b8c833981519152819055603380546001600160a01b039283166001600160a01b031982168117909255909116600080516020611bec833981519152600080a356fe4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc996a417e6461fc8f287ec9a6c2e9afb764a1d6fbdaa6570826ae99855b453aff8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3ba2646970667358221220944bbc5434cfb11a9ab3e88d1518f3997d50800c0d5b73fedf377f9a0be0c69364736f6c63430008110033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c9081631bae2b6c146113be57508063305607a3146113955780633659cfe6146111a1578063437a8ae61461117c578063485cc95514610fef5780634b491d4914610f115780634e71e0c814610ea55780634f1ef28614610c4e57806352d1902d14610be75780636170690814610b655780636299f8cf14610abf5780636425666b14610a96578063715018a614610a3957806387c1394314610a1c57806388c3ffb01461099c5780638bdea051146109775780638da5cb5b1461094e57806398b46eaf146108de578063a6645a92146108b1578063a74b434b146107da578063a7e45114146106dc578063ae169a501461054b578063b242e534146104d1578063bc157ac114610317578063e30c3978146102ee578063e89a886614610245578063f4d508ec146101c05763ff16dcf71461015757600080fd5b346101bc5760203660031901126101bc57359063ffffffff82168092036101bc577faba92a609cdbe77fef99a809dfea9ec223f92370ccc2a5c1db15dc0973e99385916020916101a5611afc565b8163ffffffff1960cd54161760cd5551908152a180f35b8280fd5b82843461024257606036600319011261024257816101dc61148c565b918151926101e984611509565b81845260209384018290526001600160a01b0316815260cc8352818120602435825283528181206044358252835220825190919061022681611509565b8160018454948584520154910190815283519283525190820152f35b80fd5b509190346102ea57806003193601126102ea5760c954833590602435906001600160a01b031633036102da57839450817fb11bddedb817d627b042c6a3047fc8475045ad29f830bcb1102385e67ab5f607945260ca60205263ffffffff806002858820015460a01c16156102c3575b5082519182526020820152a180f35b6102d49082166002858820016115e0565b386102b4565b82516325ba3c7960e01b81528590fd5b5080fd5b5050346102ea57816003193601126102ea5760345490516001600160a01b039091168152602090f35b5060603660031901126101bc5780359161032f6114a7565b916044359160018060a01b03918260c9541633036104c35763ffffffff908160cd5416156104b55761036087611836565b61049f5750858752602060ca815282882061037c348254611626565b905586885260cb81528288209384546103958782611626565b9060018701918254106000146104355750936104329896936103d998969361042a936103e66103df600080516020611bcc83398151915299549888549d8e8b611699565b90611699565b9b88611699565b96865588168c5260cc8152828c20898d528152828c2060028601918d84845416905252828c20610417878254611626565b9055541692549051938493878986611663565b0390a16116ce565b80f35b610499969391509161045988600080516020611bcc8339815191529b999694611626565b845588168a5260cc8152848a20878b528152848a206002840191838354168c5252848a20610488858254611626565b905554169054925195869586611663565b0390a180f35b86885260ca6020528251639c0f823160e01b8152fd5b82516317806fc960e11b8152fd5b90516325ba3c7960e01b8152fd5b50346101bc57816003193601126101bc576104ea61148c565b9060243590811515820361054757610500611afc565b6001600160a01b03831693841561053a57505015610522576104329150611b22565b50603480546001600160a01b03191691909117905580f35b51633aafecb360e21b8152fd5b8480fd5b50346101bc57602090816003193601126106d85780359161056b83611836565b156106c95782855260ca8152838520916002855193610589856114bd565b80548552600181015484860152015460018060a01b0381168685015260ff63ffffffff91828160a01c16606087015260c01c161515608085015284875260cb83528587209060028751926105dc846114ee565b8054845260018101548685015201549080888401928181168452861c16606084015233895260cc8552878920878a52855287892091511688528352858720600181019485546106b957519054610631916116a6565b90519182156106a6575004809255848083801561069c575b8280929181923390f11561068f579083606093927fb3aa8b63132d4c8c050f3c58896489ee2a949eaf514406ec8e56b2da530551c095519384523390840152820152a180f35b50505051903d90823e3d90fd5b6108fc9150610649565b634e487b7160e01b885260129052602487fd5b8751630c8d9eab60e31b81528490fd5b508251632ef30f6760e01b8152fd5b8380fd5b509060603660031901126101bc5781359163ffffffff602435818116928382036107d65760c9546001600160a01b031633036107c85750928085936107b288857fe8e66eabd4aa2cabec66a281b78e951231358e5c4b4b79c9f2c79b673320afd0996107c497600260c09b8851998a96610755886114ee565b808852610789602089019360443585526060848b019a848c5201978c8952835260ca602052348484205585848420016115e0565b60cb60205220908a5182555160018201550193511663ffffffff19845416178355511690611603565b815194855260208501528301906115b4565ba180f35b84516325ba3c7960e01b8152fd5b8680fd5b50346101bc5760603660031901126101bc578035916044356001600160a01b03811692602435918490036108ad57610810611afc565b84865260ca60205263ffffffff6002848820015460a01c161561089f578315610891575083855260ca602090815282862060010182905582862060020180546001600160a01b0319168517905582519485528401528201527fe4eea18f24578792f606d968efb4f4ec1ea13d58d50c82006515adadb0a276f290606090a180f35b8251630ae8f22360e21b8152fd5b825163d40820c360e01b8152fd5b8580fd5b5050346102ea57816003193601126102ea5760c954905160a89190911c6001600160401b03168152602090f35b50346101bc5760203660031901126101bc573560ff81168082036106d8577fb173a1edd1427ad576f900f4964fa68e44b92cfa0e1800390756129ebd97dd4892602092610929611afc565b60c9805460ff60a01b191660a09290921b60ff60a01b1691909117905551908152a180f35b5050346102ea57816003193601126102ea5760335490516001600160a01b039091168152602090f35b5050346102ea57816003193601126102ea5760209063ffffffff60cd54169051908152f35b50346101bc5760203660031901126101bc578183610a1a92608095606084516109c4816114ee565b8281528260208201528286820152015235815260cb602052209160028151936109ec856114ee565b8054855260018101546020860152015463ffffffff908181168386015260201c1660608401525180926115b4565bf35b5050346102ea57816003193601126102ea57602090516127108152f35b8334610242578060031936011261024257610a52611afc565b600080516020611b8c833981519152819055603380546001600160a01b0319811690915581906001600160a01b0316600080516020611bec8339815191528280a380f35b5050346102ea57816003193601126102ea5760c95490516001600160a01b039091168152602090f35b50346101bc5760203660031901126101bc5760c954813591906001600160a01b03163303610b575781845260ca60205263ffffffff6002848620015460a01c161561089f575080835260ca6020908152828420600201805460ff60c01b1916600160c01b179055825191825242908201527fe2d7e99c747f0e0432e852688145c87e00818a413f45fad18191d3d04f4d63299190a180f35b82516325ba3c7960e01b8152fd5b50346101bc5760203660031901126101bc57356001600160401b0381168082036106d8577fa75f2406e0931fd8259df0d754624886d64079585e253256af11d7e2d34d163392602092610bb6611afc565b60c98054600160a81b600160e81b03191660a89290921b600160a81b600160e81b031691909117905551908152a180f35b509134610242578060031936011261024257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610c415760209051600080516020611bac8339815191528152f35b5163e437988b60e01b8152fd5b50816003193601126101bc57610c6261148c565b916024356001600160401b038111610547573660238201121561054757610c92903690602481860135910161157d565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690308214610e9557600080516020611bac833981519152918183541603610e8557610ce6611afc565b600080516020611b6c8339815191525460ff1615610d0c5750505050506104329061190d565b85919294969395168551926352d1902d60e01b845260209384818a81865afa869181610e56575b50610d4857875163fec758a960e01b81528990fd5b979293959796949603610e4757610d5e8361190d565b835190600080516020611c0c8339815191528780a2865115801590610e3f575b610d8d575b5050505050905080f35b823b15610e33575050928085610e1495858398519201905af43d15610e2057660819985a5b195960ca1b3d92610dc284611562565b93610dcf8251958661153f565b84523d878686013e5b7f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c815195610e0587611524565b60278752860152840152611954565b50803880808080610d83565b660819985a5b195960ca1b606092610dd8565b63a6c49bc960e01b8152fd5b506001610d7e565b5082516322b9fa5360e21b8152fd5b9091508581813d8311610e7e575b610e6e818361153f565b810103126107d657519038610d33565b503d610e64565b50505051631008d79560e01b8152fd5b5050505163e437988b60e01b8152fd5b5090346101bc57826003193601126101bc576034546001600160a01b03929091838316919033839003610f0457505080603354938416600080516020611bec8339815191528680a36001600160a01b0319928316176033551660345580f35b516305e05b4b60e31b8152fd5b50346101bc57816003193601126101bc578035906001600160401b0390602435908282116108ad57366023830112156108ad57810135918211610547573660248383010111610547579382610fc68593610fc0602098610fce97865260ca8a526001878720015487518b8101917b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8352603c820152603c8152610fb281611524565b51902092602436920161157d565b90611a45565b9490946119cf565b815260ca8552206002015491516001600160a01b0392831691909216148152f35b50346101bc57816003193601126101bc5761100861148c565b6110106114a7565b9084549260ff8460081c16159384809561116f575b8015611158575b156110fe5760ff1981166001178755846110ed575b506001600160a01b039283169283159081156110e2575b506110d45760ff865460081c16156110c6575061107490611b22565b60c980546001600160a01b031916919091179055611090575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b84516369be8d9360e11b8152fd5b8451630ae8f22360e21b8152fd5b905082161538611058565b61ffff191661010117865538611041565b855162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561102c5750600160ff82161461102c565b50600160ff821610611025565b5050346102ea57816003193601126102ea5760209060ff60c95460a01c169051908152f35b509190346102ea57602090816003193601126101bc576111bf61148c565b916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811630811461138557600080516020611bac83398151915290828254160361137557611213611afc565b8351838101929091906001600160401b0384118385101761136257838652878352600080516020611b6c8339815191525460ff161561125d5750505050505061043291925061190d565b86979597169087516352d1902d60e01b815285818b81865afa87918161132f575b5061129357885163fec758a960e01b81528a90fd5b98929394969897959703611320576112aa8861190d565b845190600080516020611c0c8339815191528880a2825115801590611319575b6112da575b505050505050905080f35b873b15610e33575050938095819261130c9651915af43d15610e2057660819985a5b195960ca1b3d92610dc284611562565b50803880808080806112cf565b50866112ca565b5083516322b9fa5360e21b8152fd5b9091508681813d831161135b575b611347818361153f565b810103126113575751903861127e565b8780fd5b503d61133d565b634e487b7160e01b885260418952602488fd5b8351631008d79560e01b81528790fd5b835163e437988b60e01b81528790fd5b50913461024257602036600319011261024257506113b560209235611836565b90519015158152f35b92919050346106d85760203660031901126106d8578360c0946080849335956113e6816114bd565b8281528260208201528285820152826060820152015283815260ca6020522090805192611412846114bd565b825484526002600184015493602086019485520154918085019060018060a01b038085168352606087019261146163ffffffff95868860a01c16865260ff60808b01988c1c1615158852611836565b96835198518952516020890152511690860152511660608401525115156080830152151560a0820152f35b600435906001600160a01b03821682036114a257565b600080fd5b602435906001600160a01b03821682036114a257565b60a081019081106001600160401b038211176114d857604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b038211176114d857604052565b604081019081106001600160401b038211176114d857604052565b606081019081106001600160401b038211176114d857604052565b601f909101601f19168101906001600160401b038211908210176114d857604052565b6001600160401b0381116114d857601f01601f191660200190565b92919261158982611562565b91611597604051938461153f565b8294818452818301116114a2578281602093846000960137010152565b60609080518352602081015160208401528163ffffffff91826040820151166040860152015116910152565b805463ffffffff60a01b191660a09290921b63ffffffff60a01b16919091179055565b805463ffffffff60201b191660209290921b63ffffffff60201b16919091179055565b9190820180921161163357565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0316600090815260cc6020526040902090565b9081526001600160a01b03909116602082015263ffffffff90911660408201526060810191909152608081019190915260a00190565b9190820391821161163357565b8181029291811591840414171561163357565b63ffffffff8091169081146116335760010190565b906116e38160005260cb602052604060002090565b9260028401906117186117026116fd845463ffffffff1690565b6116b9565b835463ffffffff191663ffffffff909116178355565b61172863ffffffff421683611603565b60018501611764815461175e61175661175061174a60c95460ff9060a01c1690565b60ff1690565b836116a6565b612710900490565b90611626565b8082558211156117f95790600080516020611bcc8339815191526117f7966117d76117f19594549485809355826117cc6117b08a6117a18d611649565b90600052602052604060002090565b835463ffffffff1663ffffffff16600052602052604060002090565b555463ffffffff1690565b6117e9826040519384938b8b86611663565b0390a1611699565b916116ce565b565b50806118256118319382600080516020611bcc8339815191529855826117cc6117b0886117a18b611649565b60405195869586611663565b0390a1565b60009080825260ca60205263ffffffff9081600260408520015460a01c1660018060401b03908160c95460a81c16018181116118f95716421191826118dd575b826118ae575b508115611892575b5061188c5790565b50600190565b82525060ca602052604081206002015460c01c60ff1638611884565b90809250835260cb6020526118cf81600260408620015460201c1642611699565b9060cd54161115903861187c565b81845260cb602052604084208054600190910154119250611876565b634e487b7160e01b85526011600452602485fd5b803b1561194257600080516020611bac83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405163145708c760e31b8152600490fd5b90919015611960575090565b8151156119705750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106119b6575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350611993565b6005811015611a2f57806119e05750565b600181036119fa57604051638baa579f60e01b8152600490fd5b60028103611a1457604051634be6321b60e01b8152600490fd5b600314611a1d57565b60405163185f3d1d60e21b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b906041815114600014611a7357611a6f916020820151906060604084015193015160001a90611a7d565b9091565b5050600090600290565b9291906fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311611af05791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15611ae35781516001600160a01b0381161561188c579190565b50604051903d90823e3d90fd5b50505050600090600390565b6033546001600160a01b03163303611b1057565b604051632e6c18c960e11b8152600490fd5b600080516020611b8c833981519152819055603380546001600160a01b039283166001600160a01b031982168117909255909116600080516020611bec833981519152600080a356fe4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc996a417e6461fc8f287ec9a6c2e9afb764a1d6fbdaa6570826ae99855b453aff8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3ba2646970667358221220944bbc5434cfb11a9ab3e88d1518f3997d50800c0d5b73fedf377f9a0be0c69364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "pending owner call this function to claim ownership"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Return the address of the pending owner"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address,bool)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24550,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 24553,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 27910,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 29813,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 29815,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 30013,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 24529,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 24852,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7704,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "portal",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 7706,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "multiple",
        "offset": 20,
        "slot": "201",
        "type": "t_uint8"
      },
      {
        "astId": 7708,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "minTimeLong",
        "offset": 21,
        "slot": "201",
        "type": "t_uint64"
      },
      {
        "astId": 7713,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "seasons",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(SeasonInfo)15376_storage)"
      },
      {
        "astId": 7718,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "rounds",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_struct(RoundInfo)15385_storage)"
      },
      {
        "astId": 7727,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "users",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInfo)15390_storage)))"
      },
      {
        "astId": 7729,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "countDownTimeLong",
        "offset": 0,
        "slot": "205",
        "type": "t_uint32"
      },
      {
        "astId": 7733,
        "contract": "src/PiggyBank.sol:PiggyBank",
        "label": "_gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)43_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInfo)15390_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct IPiggyBankDefination.UserInfo)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInfo)15390_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserInfo)15390_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct IPiggyBankDefination.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UserInfo)15390_storage)"
      },
      "t_mapping(t_uint256,t_struct(RoundInfo)15385_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPiggyBankDefination.RoundInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoundInfo)15385_storage"
      },
      "t_mapping(t_uint256,t_struct(SeasonInfo)15376_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPiggyBankDefination.SeasonInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SeasonInfo)15376_storage"
      },
      "t_mapping(t_uint256,t_struct(UserInfo)15390_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPiggyBankDefination.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)15390_storage"
      },
      "t_struct(RoundInfo)15385_storage": {
        "encoding": "inplace",
        "label": "struct IPiggyBankDefination.RoundInfo",
        "members": [
          {
            "astId": 15378,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15380,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "target",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15382,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "currentIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 15384,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "startTime",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(SeasonInfo)15376_storage": {
        "encoding": "inplace",
        "label": "struct IPiggyBankDefination.SeasonInfo",
        "members": [
          {
            "astId": 15367,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15369,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "stopedHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 15371,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "verifySigner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 15373,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "startTime",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 15375,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "stoped",
            "offset": 24,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)15390_storage": {
        "encoding": "inplace",
        "label": "struct IPiggyBankDefination.UserInfo",
        "members": [
          {
            "astId": 15387,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15389,
            "contract": "src/PiggyBank.sol:PiggyBank",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}